
project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015a  00800060  000043c2  00004436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000378c  00000000  00000000  00004590  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f30  00000000  00000000  00007d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00008c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00008dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00008fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000b3e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000c76f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000d948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000db08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000ddfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e76c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <main>
      7a:	0c 94 df 21 	jmp	0x43be	; 0x43be <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 63 21 	jmp	0x42c6	; 0x42c6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 eb       	ldi	r26, 0xB2	; 178
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 7f 21 	jmp	0x42fe	; 0x42fe <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 6f 21 	jmp	0x42de	; 0x42de <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 8b 21 	jmp	0x4316	; 0x4316 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 6f 21 	jmp	0x42de	; 0x42de <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 8b 21 	jmp	0x4316	; 0x4316 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 63 21 	jmp	0x42c6	; 0x42c6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 eb       	ldi	r24, 0xB2	; 178
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 7f 21 	jmp	0x42fe	; 0x42fe <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	62 eb       	ldi	r22, 0xB2	; 178
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 87 21 	jmp	0x430e	; 0x430e <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 6f 21 	jmp	0x42de	; 0x42de <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 8b 21 	jmp	0x4316	; 0x4316 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 6f 21 	jmp	0x42de	; 0x42de <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 8b 21 	jmp	0x4316	; 0x4316 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 6f 21 	jmp	0x42de	; 0x42de <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 8b 21 	jmp	0x4316	; 0x4316 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 73 21 	jmp	0x42e6	; 0x42e6 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 8f 21 	jmp	0x431e	; 0x431e <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 6b 21 	jmp	0x42d6	; 0x42d6 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 87 21 	jmp	0x430e	; 0x430e <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e6 54       	subi	r30, 0x46	; 70
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ADC_init>:

/*The function is going to initialize the ADC by setting the reference
 * voltage to 2.56 and prescaler to F_CPU/128.*/
/*These bits select the voltage reference for the ADC*/
void ADC_init(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	/*These bits(REFS1 and REFS0) select the voltage reference for the ADC*/
	SET_BIT(ADMUX,REFS1);
     e26:	a7 e2       	ldi	r26, 0x27	; 39
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e7 e2       	ldi	r30, 0x27	; 39
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	80 68       	ori	r24, 0x80	; 128
     e32:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
     e34:	a7 e2       	ldi	r26, 0x27	; 39
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e7 e2       	ldi	r30, 0x27	; 39
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	80 64       	ori	r24, 0x40	; 64
     e40:	8c 93       	st	X, r24

	 /* Use Right Adjust */
	 CLEAR_BIT(ADMUX,ADLAR);
     e42:	a7 e2       	ldi	r26, 0x27	; 39
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e7 e2       	ldi	r30, 0x27	; 39
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 7d       	andi	r24, 0xDF	; 223
     e4e:	8c 93       	st	X, r24
	 SET_BIT(ADCSRA,ADEN);
     e50:	a6 e2       	ldi	r26, 0x26	; 38
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e6 e2       	ldi	r30, 0x26	; 38
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	80 68       	ori	r24, 0x80	; 128
     e5c:	8c 93       	st	X, r24

	/*These bits(ADPS0, ADPS1 and ADPS2) in ADCSRA register
	 * determine the division factor between
	 *  the XTAL frequency and the input clock to the ADC.*/
	SET_BIT(ADCSRA,ADPS0);
     e5e:	a6 e2       	ldi	r26, 0x26	; 38
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e6 e2       	ldi	r30, 0x26	; 38
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	81 60       	ori	r24, 0x01	; 1
     e6a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
     e6c:	a6 e2       	ldi	r26, 0x26	; 38
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e6 e2       	ldi	r30, 0x26	; 38
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	82 60       	ori	r24, 0x02	; 2
     e78:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
     e7a:	a6 e2       	ldi	r26, 0x26	; 38
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e6 e2       	ldi	r30, 0x26	; 38
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	84 60       	ori	r24, 0x04	; 4
     e86:	8c 93       	st	X, r24
}
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <ADC_readChannel>:

/*Reads analog data from a specific ADC channel and converts it to digital.*/
uint16 ADC_readChannel(uint8 channel_num)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	0f 92       	push	r0
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	87 70       	andi	r24, 0x07	; 7
     e9e:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     ea0:	a7 e2       	ldi	r26, 0x27	; 39
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e7 e2       	ldi	r30, 0x27	; 39
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	80 7e       	andi	r24, 0xE0	; 224
     eac:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     eae:	a7 e2       	ldi	r26, 0x27	; 39
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e7 e2       	ldi	r30, 0x27	; 39
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	90 81       	ld	r25, Z
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	89 2b       	or	r24, r25
     ebc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
     ebe:	a6 e2       	ldi	r26, 0x26	; 38
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e6 e2       	ldi	r30, 0x26	; 38
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	80 64       	ori	r24, 0x40	; 64
     eca:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
     ecc:	e6 e2       	ldi	r30, 0x26	; 38
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	80 71       	andi	r24, 0x10	; 16
     ed8:	90 70       	andi	r25, 0x00	; 0
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	b9 f3       	breq	.-18     	; 0xecc <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
     ede:	a6 e2       	ldi	r26, 0x26	; 38
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e6 e2       	ldi	r30, 0x26	; 38
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 61       	ori	r24, 0x10	; 16
     eea:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
     eec:	e4 e2       	ldi	r30, 0x24	; 36
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	91 81       	ldd	r25, Z+1	; 0x01
}
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <Buzzer_init>:
#include "gpio.h"
#include "std_types.h"

/*Initializes the buzzer pin direction and turn off the buzzer.*/
 void Buzzer_init(void)
 {
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
	 GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	65 e0       	ldi	r22, 0x05	; 5
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
	 GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	65 e0       	ldi	r22, 0x05	; 5
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
 }
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <Buzzer_on>:

/*Activates the buzzer.*/
 void Buzzer_on(void)
 {
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
	 GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	65 e0       	ldi	r22, 0x05	; 5
     f2a:	41 e0       	ldi	r20, 0x01	; 1
     f2c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
 }
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <Buzzer_off>:
/*Deactivates the buzzer.*/
 void Buzzer_off(void)
 {
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
	 GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	65 e0       	ldi	r22, 0x05	; 5
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
 }
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <DcMotor_Init>:
#include "pwm.h"

/*Initializes the DC motor by setting the direction for the motor pins and stopping the
motor at the beginning.*/
void DcMotor_Init(void)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	41 e0       	ldi	r20, 0x01	; 1
     f5c:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	41 e0       	ldi	r20, 0x01	; 1
     f66:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>

	/* Stop the DC-Motor at the beginning (IN1 = 0, IN2 = 0) */
	GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
	GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	40 e0       	ldi	r20, 0x00	; 0
     f7a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
}
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <DcMotor_Rotate>:
/*Controls the motor's state (Clockwise/Anti-Clockwise/Stop) and adjusts the speed based
on the input duty cycle.*/
/*Parameters:
▪ state: Enum or uint8 that indicates motor direction (CW, A-CW, Stop).
▪ speed: Motor speed in percentage (0 to 100%).*/
void DcMotor_Rotate(DcMotor_State state, uint8 speed){
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <DcMotor_Rotate+0x6>
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <DcMotor_Rotate+0x8>
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	6a 83       	std	Y+2, r22	; 0x02
	/* Setting the DC Motor rotation direction (CW/ or A-CW or stop) based on the state value. */
	switch(state)
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	3c 83       	std	Y+4, r19	; 0x04
     f9c:	2b 83       	std	Y+3, r18	; 0x03
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	91 05       	cpc	r25, r1
     fa6:	f9 f0       	breq	.+62     	; 0xfe6 <DcMotor_Rotate+0x62>
     fa8:	2b 81       	ldd	r18, Y+3	; 0x03
     faa:	3c 81       	ldd	r19, Y+4	; 0x04
     fac:	22 30       	cpi	r18, 0x02	; 2
     fae:	31 05       	cpc	r19, r1
     fb0:	79 f0       	breq	.+30     	; 0xfd0 <DcMotor_Rotate+0x4c>
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	01 f5       	brne	.+64     	; 0xffa <DcMotor_Rotate+0x76>
	{
		case STOP:
			/* Stop the DC-Motor (IN1 = 0, IN2 = 0) */
			GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	40 e0       	ldi	r20, 0x00	; 0
     fc0:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
			GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
     fce:	15 c0       	rjmp	.+42     	; 0xffa <DcMotor_Rotate+0x76>
			break;
		case ClockWise:
			/* DC-Motor Mode --> ClockWise Rotation (IN1 = 0, IN2 = 1) */
			GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
			GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	41 e0       	ldi	r20, 0x01	; 1
     fe0:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
     fe4:	0a c0       	rjmp	.+20     	; 0xffa <DcMotor_Rotate+0x76>
			break;
		case Anti_ClockWise:
			/* DC-Motor Mode --> Anti_ClockWise Rotation (IN1 = 1, IN2 = 0) */
			GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	41 e0       	ldi	r20, 0x01	; 1
     fec:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
			GPIO_writePin(MOTOR_PINS_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	61 e0       	ldi	r22, 0x01	; 1
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
		}

		/* Setting the Required DC Motor Speed Using PWM Signal at Enable1 */
		if ((speed >= 0) && (speed <= 255))
		{
			PWM_Timer0_Start(speed);
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	0e 94 b8 20 	call	0x4170	; 0x4170 <PWM_Timer0_Start>
		}
		else
		{
			PWM_Timer0_Start(0);
		}
}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <GPIO_setupPinDirection+0x6>
    1014:	00 d0       	rcall	.+0      	; 0x1016 <GPIO_setupPinDirection+0x8>
    1016:	0f 92       	push	r0
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	89 83       	std	Y+1, r24	; 0x01
    101e:	6a 83       	std	Y+2, r22	; 0x02
    1020:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1022:	8a 81       	ldd	r24, Y+2	; 0x02
    1024:	88 30       	cpi	r24, 0x08	; 8
    1026:	08 f0       	brcs	.+2      	; 0x102a <GPIO_setupPinDirection+0x1c>
    1028:	d5 c0       	rjmp	.+426    	; 0x11d4 <GPIO_setupPinDirection+0x1c6>
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	84 30       	cpi	r24, 0x04	; 4
    102e:	08 f0       	brcs	.+2      	; 0x1032 <GPIO_setupPinDirection+0x24>
    1030:	d1 c0       	rjmp	.+418    	; 0x11d4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	3d 83       	std	Y+5, r19	; 0x05
    103a:	2c 83       	std	Y+4, r18	; 0x04
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	9d 81       	ldd	r25, Y+5	; 0x05
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	91 05       	cpc	r25, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <GPIO_setupPinDirection+0x3a>
    1046:	43 c0       	rjmp	.+134    	; 0x10ce <GPIO_setupPinDirection+0xc0>
    1048:	2c 81       	ldd	r18, Y+4	; 0x04
    104a:	3d 81       	ldd	r19, Y+5	; 0x05
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	2c f4       	brge	.+10     	; 0x105c <GPIO_setupPinDirection+0x4e>
    1052:	8c 81       	ldd	r24, Y+4	; 0x04
    1054:	9d 81       	ldd	r25, Y+5	; 0x05
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	71 f0       	breq	.+28     	; 0x1076 <GPIO_setupPinDirection+0x68>
    105a:	bc c0       	rjmp	.+376    	; 0x11d4 <GPIO_setupPinDirection+0x1c6>
    105c:	2c 81       	ldd	r18, Y+4	; 0x04
    105e:	3d 81       	ldd	r19, Y+5	; 0x05
    1060:	22 30       	cpi	r18, 0x02	; 2
    1062:	31 05       	cpc	r19, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <GPIO_setupPinDirection+0x5a>
    1066:	5f c0       	rjmp	.+190    	; 0x1126 <GPIO_setupPinDirection+0x118>
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	9d 81       	ldd	r25, Y+5	; 0x05
    106c:	83 30       	cpi	r24, 0x03	; 3
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <GPIO_setupPinDirection+0x66>
    1072:	85 c0       	rjmp	.+266    	; 0x117e <GPIO_setupPinDirection+0x170>
    1074:	af c0       	rjmp	.+350    	; 0x11d4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	a1 f4       	brne	.+40     	; 0x10a4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    107c:	aa e3       	ldi	r26, 0x3A	; 58
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	ea e3       	ldi	r30, 0x3A	; 58
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <GPIO_setupPinDirection+0x8c>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <GPIO_setupPinDirection+0x88>
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	98 c0       	rjmp	.+304    	; 0x11d4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    10a4:	aa e3       	ldi	r26, 0x3A	; 58
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	ea e3       	ldi	r30, 0x3A	; 58
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <GPIO_setupPinDirection+0xb4>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <GPIO_setupPinDirection+0xb0>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	83 c0       	rjmp	.+262    	; 0x11d4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	a1 f4       	brne	.+40     	; 0x10fc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10d4:	a7 e3       	ldi	r26, 0x37	; 55
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e7 e3       	ldi	r30, 0x37	; 55
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <GPIO_setupPinDirection+0xe4>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <GPIO_setupPinDirection+0xe0>
    10f6:	84 2b       	or	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	6c c0       	rjmp	.+216    	; 0x11d4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10fc:	a7 e3       	ldi	r26, 0x37	; 55
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e7 e3       	ldi	r30, 0x37	; 55
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <GPIO_setupPinDirection+0x10c>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <GPIO_setupPinDirection+0x108>
    111e:	80 95       	com	r24
    1120:	84 23       	and	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	57 c0       	rjmp	.+174    	; 0x11d4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	a1 f4       	brne	.+40     	; 0x1154 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    112c:	a4 e3       	ldi	r26, 0x34	; 52
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e4 e3       	ldi	r30, 0x34	; 52
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <GPIO_setupPinDirection+0x13c>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <GPIO_setupPinDirection+0x138>
    114e:	84 2b       	or	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	40 c0       	rjmp	.+128    	; 0x11d4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1154:	a4 e3       	ldi	r26, 0x34	; 52
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e4 e3       	ldi	r30, 0x34	; 52
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <GPIO_setupPinDirection+0x164>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <GPIO_setupPinDirection+0x160>
    1176:	80 95       	com	r24
    1178:	84 23       	and	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	2b c0       	rjmp	.+86     	; 0x11d4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	a1 f4       	brne	.+40     	; 0x11ac <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1184:	a1 e3       	ldi	r26, 0x31	; 49
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e1 e3       	ldi	r30, 0x31	; 49
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 2e       	mov	r0, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <GPIO_setupPinDirection+0x194>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	0a 94       	dec	r0
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <GPIO_setupPinDirection+0x190>
    11a6:	84 2b       	or	r24, r20
    11a8:	8c 93       	st	X, r24
    11aa:	14 c0       	rjmp	.+40     	; 0x11d4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    11ac:	a1 e3       	ldi	r26, 0x31	; 49
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e1 e3       	ldi	r30, 0x31	; 49
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	48 2f       	mov	r20, r24
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <GPIO_setupPinDirection+0x1bc>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <GPIO_setupPinDirection+0x1b8>
    11ce:	80 95       	com	r24
    11d0:	84 23       	and	r24, r20
    11d2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <GPIO_writePin+0x6>
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <GPIO_writePin+0x8>
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	6a 83       	std	Y+2, r22	; 0x02
    11f6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	88 30       	cpi	r24, 0x08	; 8
    11fc:	08 f0       	brcs	.+2      	; 0x1200 <GPIO_writePin+0x1c>
    11fe:	d5 c0       	rjmp	.+426    	; 0x13aa <GPIO_writePin+0x1c6>
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	08 f0       	brcs	.+2      	; 0x1208 <GPIO_writePin+0x24>
    1206:	d1 c0       	rjmp	.+418    	; 0x13aa <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	3d 83       	std	Y+5, r19	; 0x05
    1210:	2c 83       	std	Y+4, r18	; 0x04
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	9d 81       	ldd	r25, Y+5	; 0x05
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	91 05       	cpc	r25, r1
    121a:	09 f4       	brne	.+2      	; 0x121e <GPIO_writePin+0x3a>
    121c:	43 c0       	rjmp	.+134    	; 0x12a4 <GPIO_writePin+0xc0>
    121e:	2c 81       	ldd	r18, Y+4	; 0x04
    1220:	3d 81       	ldd	r19, Y+5	; 0x05
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	31 05       	cpc	r19, r1
    1226:	2c f4       	brge	.+10     	; 0x1232 <GPIO_writePin+0x4e>
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	71 f0       	breq	.+28     	; 0x124c <GPIO_writePin+0x68>
    1230:	bc c0       	rjmp	.+376    	; 0x13aa <GPIO_writePin+0x1c6>
    1232:	2c 81       	ldd	r18, Y+4	; 0x04
    1234:	3d 81       	ldd	r19, Y+5	; 0x05
    1236:	22 30       	cpi	r18, 0x02	; 2
    1238:	31 05       	cpc	r19, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <GPIO_writePin+0x5a>
    123c:	5f c0       	rjmp	.+190    	; 0x12fc <GPIO_writePin+0x118>
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	83 30       	cpi	r24, 0x03	; 3
    1244:	91 05       	cpc	r25, r1
    1246:	09 f4       	brne	.+2      	; 0x124a <GPIO_writePin+0x66>
    1248:	85 c0       	rjmp	.+266    	; 0x1354 <GPIO_writePin+0x170>
    124a:	af c0       	rjmp	.+350    	; 0x13aa <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	a1 f4       	brne	.+40     	; 0x127a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1252:	ab e3       	ldi	r26, 0x3B	; 59
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	eb e3       	ldi	r30, 0x3B	; 59
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	48 2f       	mov	r20, r24
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	02 2e       	mov	r0, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <GPIO_writePin+0x8c>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <GPIO_writePin+0x88>
    1274:	84 2b       	or	r24, r20
    1276:	8c 93       	st	X, r24
    1278:	98 c0       	rjmp	.+304    	; 0x13aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    127a:	ab e3       	ldi	r26, 0x3B	; 59
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	eb e3       	ldi	r30, 0x3B	; 59
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <GPIO_writePin+0xb4>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <GPIO_writePin+0xb0>
    129c:	80 95       	com	r24
    129e:	84 23       	and	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	83 c0       	rjmp	.+262    	; 0x13aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	a1 f4       	brne	.+40     	; 0x12d2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    12aa:	a8 e3       	ldi	r26, 0x38	; 56
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	e8 e3       	ldi	r30, 0x38	; 56
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <GPIO_writePin+0xe4>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <GPIO_writePin+0xe0>
    12cc:	84 2b       	or	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	6c c0       	rjmp	.+216    	; 0x13aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12d2:	a8 e3       	ldi	r26, 0x38	; 56
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e8 e3       	ldi	r30, 0x38	; 56
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	48 2f       	mov	r20, r24
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 2e       	mov	r0, r18
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <GPIO_writePin+0x10c>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <GPIO_writePin+0x108>
    12f4:	80 95       	com	r24
    12f6:	84 23       	and	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	57 c0       	rjmp	.+174    	; 0x13aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	a1 f4       	brne	.+40     	; 0x132a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1302:	a5 e3       	ldi	r26, 0x35	; 53
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e5 e3       	ldi	r30, 0x35	; 53
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	48 2f       	mov	r20, r24
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 2e       	mov	r0, r18
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <GPIO_writePin+0x13c>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	0a 94       	dec	r0
    1322:	e2 f7       	brpl	.-8      	; 0x131c <GPIO_writePin+0x138>
    1324:	84 2b       	or	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	40 c0       	rjmp	.+128    	; 0x13aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    132a:	a5 e3       	ldi	r26, 0x35	; 53
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e5 e3       	ldi	r30, 0x35	; 53
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	48 2f       	mov	r20, r24
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 2e       	mov	r0, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <GPIO_writePin+0x164>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <GPIO_writePin+0x160>
    134c:	80 95       	com	r24
    134e:	84 23       	and	r24, r20
    1350:	8c 93       	st	X, r24
    1352:	2b c0       	rjmp	.+86     	; 0x13aa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	a1 f4       	brne	.+40     	; 0x1382 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    135a:	a2 e3       	ldi	r26, 0x32	; 50
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e2 e3       	ldi	r30, 0x32	; 50
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 2e       	mov	r0, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <GPIO_writePin+0x194>
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	0a 94       	dec	r0
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <GPIO_writePin+0x190>
    137c:	84 2b       	or	r24, r20
    137e:	8c 93       	st	X, r24
    1380:	14 c0       	rjmp	.+40     	; 0x13aa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1382:	a2 e3       	ldi	r26, 0x32	; 50
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e2 e3       	ldi	r30, 0x32	; 50
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 2e       	mov	r0, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <GPIO_writePin+0x1bc>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <GPIO_writePin+0x1b8>
    13a4:	80 95       	com	r24
    13a6:	84 23       	and	r24, r20
    13a8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <GPIO_readPin+0x6>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <GPIO_readPin+0x8>
    13c2:	0f 92       	push	r0
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	8a 83       	std	Y+2, r24	; 0x02
    13ca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13cc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 30       	cpi	r24, 0x08	; 8
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <GPIO_readPin+0x1c>
    13d4:	84 c0       	rjmp	.+264    	; 0x14de <GPIO_readPin+0x124>
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	84 30       	cpi	r24, 0x04	; 4
    13da:	08 f0       	brcs	.+2      	; 0x13de <GPIO_readPin+0x24>
    13dc:	80 c0       	rjmp	.+256    	; 0x14de <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	3d 83       	std	Y+5, r19	; 0x05
    13e6:	2c 83       	std	Y+4, r18	; 0x04
    13e8:	4c 81       	ldd	r20, Y+4	; 0x04
    13ea:	5d 81       	ldd	r21, Y+5	; 0x05
    13ec:	41 30       	cpi	r20, 0x01	; 1
    13ee:	51 05       	cpc	r21, r1
    13f0:	79 f1       	breq	.+94     	; 0x1450 <GPIO_readPin+0x96>
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	82 30       	cpi	r24, 0x02	; 2
    13f8:	91 05       	cpc	r25, r1
    13fa:	34 f4       	brge	.+12     	; 0x1408 <GPIO_readPin+0x4e>
    13fc:	2c 81       	ldd	r18, Y+4	; 0x04
    13fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1400:	21 15       	cp	r18, r1
    1402:	31 05       	cpc	r19, r1
    1404:	69 f0       	breq	.+26     	; 0x1420 <GPIO_readPin+0x66>
    1406:	6b c0       	rjmp	.+214    	; 0x14de <GPIO_readPin+0x124>
    1408:	4c 81       	ldd	r20, Y+4	; 0x04
    140a:	5d 81       	ldd	r21, Y+5	; 0x05
    140c:	42 30       	cpi	r20, 0x02	; 2
    140e:	51 05       	cpc	r21, r1
    1410:	b9 f1       	breq	.+110    	; 0x1480 <GPIO_readPin+0xc6>
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	9d 81       	ldd	r25, Y+5	; 0x05
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	91 05       	cpc	r25, r1
    141a:	09 f4       	brne	.+2      	; 0x141e <GPIO_readPin+0x64>
    141c:	49 c0       	rjmp	.+146    	; 0x14b0 <GPIO_readPin+0xf6>
    141e:	5f c0       	rjmp	.+190    	; 0x14de <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1420:	e9 e3       	ldi	r30, 0x39	; 57
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	88 2f       	mov	r24, r24
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	a9 01       	movw	r20, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <GPIO_readPin+0x7e>
    1434:	55 95       	asr	r21
    1436:	47 95       	ror	r20
    1438:	8a 95       	dec	r24
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <GPIO_readPin+0x7a>
    143c:	ca 01       	movw	r24, r20
    143e:	81 70       	andi	r24, 0x01	; 1
    1440:	90 70       	andi	r25, 0x00	; 0
    1442:	88 23       	and	r24, r24
    1444:	19 f0       	breq	.+6      	; 0x144c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	49 c0       	rjmp	.+146    	; 0x14de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    144c:	19 82       	std	Y+1, r1	; 0x01
    144e:	47 c0       	rjmp	.+142    	; 0x14de <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1450:	e6 e3       	ldi	r30, 0x36	; 54
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a9 01       	movw	r20, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <GPIO_readPin+0xae>
    1464:	55 95       	asr	r21
    1466:	47 95       	ror	r20
    1468:	8a 95       	dec	r24
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <GPIO_readPin+0xaa>
    146c:	ca 01       	movw	r24, r20
    146e:	81 70       	andi	r24, 0x01	; 1
    1470:	90 70       	andi	r25, 0x00	; 0
    1472:	88 23       	and	r24, r24
    1474:	19 f0       	breq	.+6      	; 0x147c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	31 c0       	rjmp	.+98     	; 0x14de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    147c:	19 82       	std	Y+1, r1	; 0x01
    147e:	2f c0       	rjmp	.+94     	; 0x14de <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1480:	e3 e3       	ldi	r30, 0x33	; 51
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	a9 01       	movw	r20, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <GPIO_readPin+0xde>
    1494:	55 95       	asr	r21
    1496:	47 95       	ror	r20
    1498:	8a 95       	dec	r24
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <GPIO_readPin+0xda>
    149c:	ca 01       	movw	r24, r20
    149e:	81 70       	andi	r24, 0x01	; 1
    14a0:	90 70       	andi	r25, 0x00	; 0
    14a2:	88 23       	and	r24, r24
    14a4:	19 f0       	breq	.+6      	; 0x14ac <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	19 c0       	rjmp	.+50     	; 0x14de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14ac:	19 82       	std	Y+1, r1	; 0x01
    14ae:	17 c0       	rjmp	.+46     	; 0x14de <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    14b0:	e0 e3       	ldi	r30, 0x30	; 48
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a9 01       	movw	r20, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <GPIO_readPin+0x10e>
    14c4:	55 95       	asr	r21
    14c6:	47 95       	ror	r20
    14c8:	8a 95       	dec	r24
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <GPIO_readPin+0x10a>
    14cc:	ca 01       	movw	r24, r20
    14ce:	81 70       	andi	r24, 0x01	; 1
    14d0:	90 70       	andi	r25, 0x00	; 0
    14d2:	88 23       	and	r24, r24
    14d4:	19 f0       	breq	.+6      	; 0x14dc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	01 c0       	rjmp	.+2      	; 0x14de <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14dc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14de:	89 81       	ldd	r24, Y+1	; 0x01
}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <GPIO_setupPortDirection+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <GPIO_setupPortDirection+0x8>
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	84 30       	cpi	r24, 0x04	; 4
    1504:	90 f5       	brcc	.+100    	; 0x156a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3c 83       	std	Y+4, r19	; 0x04
    150e:	2b 83       	std	Y+3, r18	; 0x03
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	d1 f0       	breq	.+52     	; 0x154e <GPIO_setupPortDirection+0x5e>
    151a:	2b 81       	ldd	r18, Y+3	; 0x03
    151c:	3c 81       	ldd	r19, Y+4	; 0x04
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	2c f4       	brge	.+10     	; 0x152e <GPIO_setupPortDirection+0x3e>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	61 f0       	breq	.+24     	; 0x1544 <GPIO_setupPortDirection+0x54>
    152c:	1e c0       	rjmp	.+60     	; 0x156a <GPIO_setupPortDirection+0x7a>
    152e:	2b 81       	ldd	r18, Y+3	; 0x03
    1530:	3c 81       	ldd	r19, Y+4	; 0x04
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	81 f0       	breq	.+32     	; 0x1558 <GPIO_setupPortDirection+0x68>
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	91 05       	cpc	r25, r1
    1540:	81 f0       	breq	.+32     	; 0x1562 <GPIO_setupPortDirection+0x72>
    1542:	13 c0       	rjmp	.+38     	; 0x156a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1544:	ea e3       	ldi	r30, 0x3A	; 58
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	80 83       	st	Z, r24
    154c:	0e c0       	rjmp	.+28     	; 0x156a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    154e:	e7 e3       	ldi	r30, 0x37	; 55
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	80 83       	st	Z, r24
    1556:	09 c0       	rjmp	.+18     	; 0x156a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1558:	e4 e3       	ldi	r30, 0x34	; 52
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	80 83       	st	Z, r24
    1560:	04 c0       	rjmp	.+8      	; 0x156a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1562:	e1 e3       	ldi	r30, 0x31	; 49
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	80 83       	st	Z, r24
			break;
		}
	}
}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	08 95       	ret

00001578 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1578:	df 93       	push	r29
    157a:	cf 93       	push	r28
    157c:	00 d0       	rcall	.+0      	; 0x157e <GPIO_writePort+0x6>
    157e:	00 d0       	rcall	.+0      	; 0x1580 <GPIO_writePort+0x8>
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	84 30       	cpi	r24, 0x04	; 4
    158c:	90 f5       	brcc	.+100    	; 0x15f2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	3c 83       	std	Y+4, r19	; 0x04
    1596:	2b 83       	std	Y+3, r18	; 0x03
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	91 05       	cpc	r25, r1
    15a0:	d1 f0       	breq	.+52     	; 0x15d6 <GPIO_writePort+0x5e>
    15a2:	2b 81       	ldd	r18, Y+3	; 0x03
    15a4:	3c 81       	ldd	r19, Y+4	; 0x04
    15a6:	22 30       	cpi	r18, 0x02	; 2
    15a8:	31 05       	cpc	r19, r1
    15aa:	2c f4       	brge	.+10     	; 0x15b6 <GPIO_writePort+0x3e>
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	61 f0       	breq	.+24     	; 0x15cc <GPIO_writePort+0x54>
    15b4:	1e c0       	rjmp	.+60     	; 0x15f2 <GPIO_writePort+0x7a>
    15b6:	2b 81       	ldd	r18, Y+3	; 0x03
    15b8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ba:	22 30       	cpi	r18, 0x02	; 2
    15bc:	31 05       	cpc	r19, r1
    15be:	81 f0       	breq	.+32     	; 0x15e0 <GPIO_writePort+0x68>
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	83 30       	cpi	r24, 0x03	; 3
    15c6:	91 05       	cpc	r25, r1
    15c8:	81 f0       	breq	.+32     	; 0x15ea <GPIO_writePort+0x72>
    15ca:	13 c0       	rjmp	.+38     	; 0x15f2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15cc:	eb e3       	ldi	r30, 0x3B	; 59
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	80 83       	st	Z, r24
    15d4:	0e c0       	rjmp	.+28     	; 0x15f2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15d6:	e8 e3       	ldi	r30, 0x38	; 56
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	80 83       	st	Z, r24
    15de:	09 c0       	rjmp	.+18     	; 0x15f2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15e0:	e5 e3       	ldi	r30, 0x35	; 53
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	80 83       	st	Z, r24
    15e8:	04 c0       	rjmp	.+8      	; 0x15f2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15ea:	e2 e3       	ldi	r30, 0x32	; 50
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	80 83       	st	Z, r24
			break;
		}
	}
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <GPIO_readPort+0x6>
    1606:	00 d0       	rcall	.+0      	; 0x1608 <GPIO_readPort+0x8>
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    160e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	84 30       	cpi	r24, 0x04	; 4
    1614:	90 f5       	brcc	.+100    	; 0x167a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	3c 83       	std	Y+4, r19	; 0x04
    161e:	2b 83       	std	Y+3, r18	; 0x03
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	91 05       	cpc	r25, r1
    1628:	d1 f0       	breq	.+52     	; 0x165e <GPIO_readPort+0x5e>
    162a:	2b 81       	ldd	r18, Y+3	; 0x03
    162c:	3c 81       	ldd	r19, Y+4	; 0x04
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	2c f4       	brge	.+10     	; 0x163e <GPIO_readPort+0x3e>
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	9c 81       	ldd	r25, Y+4	; 0x04
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	61 f0       	breq	.+24     	; 0x1654 <GPIO_readPort+0x54>
    163c:	1e c0       	rjmp	.+60     	; 0x167a <GPIO_readPort+0x7a>
    163e:	2b 81       	ldd	r18, Y+3	; 0x03
    1640:	3c 81       	ldd	r19, Y+4	; 0x04
    1642:	22 30       	cpi	r18, 0x02	; 2
    1644:	31 05       	cpc	r19, r1
    1646:	81 f0       	breq	.+32     	; 0x1668 <GPIO_readPort+0x68>
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	83 30       	cpi	r24, 0x03	; 3
    164e:	91 05       	cpc	r25, r1
    1650:	81 f0       	breq	.+32     	; 0x1672 <GPIO_readPort+0x72>
    1652:	13 c0       	rjmp	.+38     	; 0x167a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1654:	e9 e3       	ldi	r30, 0x39	; 57
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	0e c0       	rjmp	.+28     	; 0x167a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    165e:	e6 e3       	ldi	r30, 0x36	; 54
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	09 c0       	rjmp	.+18     	; 0x167a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1668:	e3 e3       	ldi	r30, 0x33	; 51
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	04 c0       	rjmp	.+8      	; 0x167a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1672:	e0 e3       	ldi	r30, 0x30	; 48
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    167a:	89 81       	ldd	r24, Y+1	; 0x01
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <Heater_init>:
#include "heater.h"

/*Initializes heater and
  Turn off the heater*/
void Heater_init(void)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(HEATERPORT_ID, HEATERPIN_ID, PIN_OUTPUT);
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	66 e0       	ldi	r22, 0x06	; 6
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>

	GPIO_writePin(HEATERPORT_ID , HEATERPIN_ID, LOGIC_LOW);
    169c:	83 e0       	ldi	r24, 0x03	; 3
    169e:	66 e0       	ldi	r22, 0x06	; 6
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>

}
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <Heater_on>:

/*Turns on heater.*/
void Heater_on()
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(HEATERPORT_ID , HEATERPIN_ID, LOGIC_HIGH);
    16b4:	83 e0       	ldi	r24, 0x03	; 3
    16b6:	66 e0       	ldi	r22, 0x06	; 6
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
}
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <Heater_off>:

/*Turns off the heater*/
void Heater_off()
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(HEATERPORT_ID , HEATERPIN_ID, LOGIC_LOW);
    16cc:	83 e0       	ldi	r24, 0x03	; 3
    16ce:	66 e0       	ldi	r22, 0x06	; 6
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
}
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	60 97       	sbiw	r28, 0x10	; 16
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	64 e0       	ldi	r22, 0x04	; 4
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	65 e0       	ldi	r22, 0x05	; 5
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	66 e0       	ldi	r22, 0x06	; 6
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	67 e0       	ldi	r22, 0x07	; 7
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1718:	83 e0       	ldi	r24, 0x03	; 3
    171a:	62 e0       	ldi	r22, 0x02	; 2
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1722:	83 e0       	ldi	r24, 0x03	; 3
    1724:	63 e0       	ldi	r22, 0x03	; 3
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    172c:	83 e0       	ldi	r24, 0x03	; 3
    172e:	64 e0       	ldi	r22, 0x04	; 4
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	65 e0       	ldi	r22, 0x05	; 5
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1740:	1f 86       	std	Y+15, r1	; 0x0f
    1742:	b4 c0       	rjmp	.+360    	; 0x18ac <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1744:	8f 85       	ldd	r24, Y+15	; 0x0f
    1746:	98 2f       	mov	r25, r24
    1748:	9c 5f       	subi	r25, 0xFC	; 252
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	69 2f       	mov	r22, r25
    174e:	41 e0       	ldi	r20, 0x01	; 1
    1750:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1754:	8f 85       	ldd	r24, Y+15	; 0x0f
    1756:	98 2f       	mov	r25, r24
    1758:	9c 5f       	subi	r25, 0xFC	; 252
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	69 2f       	mov	r22, r25
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1764:	18 8a       	std	Y+16, r1	; 0x10
    1766:	22 c0       	rjmp	.+68     	; 0x17ac <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1768:	88 89       	ldd	r24, Y+16	; 0x10
    176a:	98 2f       	mov	r25, r24
    176c:	9e 5f       	subi	r25, 0xFE	; 254
    176e:	83 e0       	ldi	r24, 0x03	; 3
    1770:	69 2f       	mov	r22, r25
    1772:	0e 94 dd 09 	call	0x13ba	; 0x13ba <GPIO_readPin>
    1776:	88 23       	and	r24, r24
    1778:	b1 f4       	brne	.+44     	; 0x17a6 <KEYPAD_getPressedKey+0xca>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    177a:	8f 85       	ldd	r24, Y+15	; 0x0f
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	98 2f       	mov	r25, r24
    178a:	88 89       	ldd	r24, Y+16	; 0x10
    178c:	89 0f       	add	r24, r25
    178e:	8f 5f       	subi	r24, 0xFF	; 255
    1790:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1794:	60 96       	adiw	r28, 0x10	; 16
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    17a6:	88 89       	ldd	r24, Y+16	; 0x10
    17a8:	8f 5f       	subi	r24, 0xFF	; 255
    17aa:	88 8b       	std	Y+16, r24	; 0x10
    17ac:	88 89       	ldd	r24, Y+16	; 0x10
    17ae:	84 30       	cpi	r24, 0x04	; 4
    17b0:	d8 f2       	brcs	.-74     	; 0x1768 <KEYPAD_getPressedKey+0x8c>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    17b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b4:	98 2f       	mov	r25, r24
    17b6:	9c 5f       	subi	r25, 0xFC	; 252
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	69 2f       	mov	r22, r25
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	a0 e2       	ldi	r26, 0x20	; 32
    17c8:	b1 e4       	ldi	r27, 0x41	; 65
    17ca:	8b 87       	std	Y+11, r24	; 0x0b
    17cc:	9c 87       	std	Y+12, r25	; 0x0c
    17ce:	ad 87       	std	Y+13, r26	; 0x0d
    17d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	4a e7       	ldi	r20, 0x7A	; 122
    17e0:	55 e4       	ldi	r21, 0x45	; 69
    17e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	8f 83       	std	Y+7, r24	; 0x07
    17ec:	98 87       	std	Y+8, r25	; 0x08
    17ee:	a9 87       	std	Y+9, r26	; 0x09
    17f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17f2:	6f 81       	ldd	r22, Y+7	; 0x07
    17f4:	78 85       	ldd	r23, Y+8	; 0x08
    17f6:	89 85       	ldd	r24, Y+9	; 0x09
    17f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e8       	ldi	r20, 0x80	; 128
    1800:	5f e3       	ldi	r21, 0x3F	; 63
    1802:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1806:	88 23       	and	r24, r24
    1808:	2c f4       	brge	.+10     	; 0x1814 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	8d 83       	std	Y+5, r24	; 0x05
    1812:	3f c0       	rjmp	.+126    	; 0x1892 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1814:	6f 81       	ldd	r22, Y+7	; 0x07
    1816:	78 85       	ldd	r23, Y+8	; 0x08
    1818:	89 85       	ldd	r24, Y+9	; 0x09
    181a:	9a 85       	ldd	r25, Y+10	; 0x0a
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	3f ef       	ldi	r19, 0xFF	; 255
    1820:	4f e7       	ldi	r20, 0x7F	; 127
    1822:	57 e4       	ldi	r21, 0x47	; 71
    1824:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1828:	18 16       	cp	r1, r24
    182a:	4c f5       	brge	.+82     	; 0x187e <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182c:	6b 85       	ldd	r22, Y+11	; 0x0b
    182e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1830:	8d 85       	ldd	r24, Y+13	; 0x0d
    1832:	9e 85       	ldd	r25, Y+14	; 0x0e
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e2       	ldi	r20, 0x20	; 32
    183a:	51 e4       	ldi	r21, 0x41	; 65
    183c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	bc 01       	movw	r22, r24
    1846:	cd 01       	movw	r24, r26
    1848:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	9e 83       	std	Y+6, r25	; 0x06
    1852:	8d 83       	std	Y+5, r24	; 0x05
    1854:	0f c0       	rjmp	.+30     	; 0x1874 <KEYPAD_getPressedKey+0x198>
    1856:	80 e9       	ldi	r24, 0x90	; 144
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	9c 83       	std	Y+4, r25	; 0x04
    185c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <KEYPAD_getPressedKey+0x186>
    1866:	9c 83       	std	Y+4, r25	; 0x04
    1868:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	9e 83       	std	Y+6, r25	; 0x06
    1872:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	9e 81       	ldd	r25, Y+6	; 0x06
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	69 f7       	brne	.-38     	; 0x1856 <KEYPAD_getPressedKey+0x17a>
    187c:	14 c0       	rjmp	.+40     	; 0x18a6 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187e:	6f 81       	ldd	r22, Y+7	; 0x07
    1880:	78 85       	ldd	r23, Y+8	; 0x08
    1882:	89 85       	ldd	r24, Y+9	; 0x09
    1884:	9a 85       	ldd	r25, Y+10	; 0x0a
    1886:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	9e 83       	std	Y+6, r25	; 0x06
    1890:	8d 83       	std	Y+5, r24	; 0x05
    1892:	8d 81       	ldd	r24, Y+5	; 0x05
    1894:	9e 81       	ldd	r25, Y+6	; 0x06
    1896:	9a 83       	std	Y+2, r25	; 0x02
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	9a 81       	ldd	r25, Y+2	; 0x02
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <KEYPAD_getPressedKey+0x1c2>
    18a2:	9a 83       	std	Y+2, r25	; 0x02
    18a4:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    18a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a8:	8f 5f       	subi	r24, 0xFF	; 255
    18aa:	8f 87       	std	Y+15, r24	; 0x0f
    18ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ae:	84 30       	cpi	r24, 0x04	; 4
    18b0:	08 f4       	brcc	.+2      	; 0x18b4 <KEYPAD_getPressedKey+0x1d8>
    18b2:	48 cf       	rjmp	.-368    	; 0x1744 <KEYPAD_getPressedKey+0x68>
    18b4:	45 cf       	rjmp	.-374    	; 0x1740 <KEYPAD_getPressedKey+0x64>

000018b6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <KEYPAD_4x4_adjustKeyNumber+0x6>
    18bc:	00 d0       	rcall	.+0      	; 0x18be <KEYPAD_4x4_adjustKeyNumber+0x8>
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    18c4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	3c 83       	std	Y+4, r19	; 0x04
    18ce:	2b 83       	std	Y+3, r18	; 0x03
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	88 30       	cpi	r24, 0x08	; 8
    18d6:	91 05       	cpc	r25, r1
    18d8:	09 f4       	brne	.+2      	; 0x18dc <KEYPAD_4x4_adjustKeyNumber+0x26>
    18da:	70 c0       	rjmp	.+224    	; 0x19bc <KEYPAD_4x4_adjustKeyNumber+0x106>
    18dc:	2b 81       	ldd	r18, Y+3	; 0x03
    18de:	3c 81       	ldd	r19, Y+4	; 0x04
    18e0:	29 30       	cpi	r18, 0x09	; 9
    18e2:	31 05       	cpc	r19, r1
    18e4:	5c f5       	brge	.+86     	; 0x193c <KEYPAD_4x4_adjustKeyNumber+0x86>
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	84 30       	cpi	r24, 0x04	; 4
    18ec:	91 05       	cpc	r25, r1
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    18f0:	59 c0       	rjmp	.+178    	; 0x19a4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    18f2:	2b 81       	ldd	r18, Y+3	; 0x03
    18f4:	3c 81       	ldd	r19, Y+4	; 0x04
    18f6:	25 30       	cpi	r18, 0x05	; 5
    18f8:	31 05       	cpc	r19, r1
    18fa:	9c f4       	brge	.+38     	; 0x1922 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	82 30       	cpi	r24, 0x02	; 2
    1902:	91 05       	cpc	r25, r1
    1904:	09 f4       	brne	.+2      	; 0x1908 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1906:	48 c0       	rjmp	.+144    	; 0x1998 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1908:	2b 81       	ldd	r18, Y+3	; 0x03
    190a:	3c 81       	ldd	r19, Y+4	; 0x04
    190c:	23 30       	cpi	r18, 0x03	; 3
    190e:	31 05       	cpc	r19, r1
    1910:	0c f0       	brlt	.+2      	; 0x1914 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1912:	45 c0       	rjmp	.+138    	; 0x199e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	9c 81       	ldd	r25, Y+4	; 0x04
    1918:	81 30       	cpi	r24, 0x01	; 1
    191a:	91 05       	cpc	r25, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    191e:	39 c0       	rjmp	.+114    	; 0x1992 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1920:	67 c0       	rjmp	.+206    	; 0x19f0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1922:	2b 81       	ldd	r18, Y+3	; 0x03
    1924:	3c 81       	ldd	r19, Y+4	; 0x04
    1926:	26 30       	cpi	r18, 0x06	; 6
    1928:	31 05       	cpc	r19, r1
    192a:	09 f4       	brne	.+2      	; 0x192e <KEYPAD_4x4_adjustKeyNumber+0x78>
    192c:	41 c0       	rjmp	.+130    	; 0x19b0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	87 30       	cpi	r24, 0x07	; 7
    1934:	91 05       	cpc	r25, r1
    1936:	0c f0       	brlt	.+2      	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1938:	3e c0       	rjmp	.+124    	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    193a:	37 c0       	rjmp	.+110    	; 0x19aa <KEYPAD_4x4_adjustKeyNumber+0xf4>
    193c:	2b 81       	ldd	r18, Y+3	; 0x03
    193e:	3c 81       	ldd	r19, Y+4	; 0x04
    1940:	2c 30       	cpi	r18, 0x0C	; 12
    1942:	31 05       	cpc	r19, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1946:	46 c0       	rjmp	.+140    	; 0x19d4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	8d 30       	cpi	r24, 0x0D	; 13
    194e:	91 05       	cpc	r25, r1
    1950:	5c f4       	brge	.+22     	; 0x1968 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1952:	2b 81       	ldd	r18, Y+3	; 0x03
    1954:	3c 81       	ldd	r19, Y+4	; 0x04
    1956:	2a 30       	cpi	r18, 0x0A	; 10
    1958:	31 05       	cpc	r19, r1
    195a:	b1 f1       	breq	.+108    	; 0x19c8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	8b 30       	cpi	r24, 0x0B	; 11
    1962:	91 05       	cpc	r25, r1
    1964:	a4 f5       	brge	.+104    	; 0x19ce <KEYPAD_4x4_adjustKeyNumber+0x118>
    1966:	2d c0       	rjmp	.+90     	; 0x19c2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1968:	2b 81       	ldd	r18, Y+3	; 0x03
    196a:	3c 81       	ldd	r19, Y+4	; 0x04
    196c:	2e 30       	cpi	r18, 0x0E	; 14
    196e:	31 05       	cpc	r19, r1
    1970:	b9 f1       	breq	.+110    	; 0x19e0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	8e 30       	cpi	r24, 0x0E	; 14
    1978:	91 05       	cpc	r25, r1
    197a:	7c f1       	brlt	.+94     	; 0x19da <KEYPAD_4x4_adjustKeyNumber+0x124>
    197c:	2b 81       	ldd	r18, Y+3	; 0x03
    197e:	3c 81       	ldd	r19, Y+4	; 0x04
    1980:	2f 30       	cpi	r18, 0x0F	; 15
    1982:	31 05       	cpc	r19, r1
    1984:	79 f1       	breq	.+94     	; 0x19e4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	80 31       	cpi	r24, 0x10	; 16
    198c:	91 05       	cpc	r25, r1
    198e:	69 f1       	breq	.+90     	; 0x19ea <KEYPAD_4x4_adjustKeyNumber+0x134>
    1990:	2f c0       	rjmp	.+94     	; 0x19f0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1992:	87 e0       	ldi	r24, 0x07	; 7
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	2e c0       	rjmp	.+92     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1998:	88 e0       	ldi	r24, 0x08	; 8
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	2b c0       	rjmp	.+86     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    199e:	89 e0       	ldi	r24, 0x09	; 9
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	28 c0       	rjmp	.+80     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    19a4:	85 e2       	ldi	r24, 0x25	; 37
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	25 c0       	rjmp	.+74     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    19aa:	84 e0       	ldi	r24, 0x04	; 4
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	22 c0       	rjmp	.+68     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    19b0:	85 e0       	ldi	r24, 0x05	; 5
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	1f c0       	rjmp	.+62     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    19b6:	86 e0       	ldi	r24, 0x06	; 6
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	1c c0       	rjmp	.+56     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    19bc:	8a e2       	ldi	r24, 0x2A	; 42
    19be:	89 83       	std	Y+1, r24	; 0x01
    19c0:	19 c0       	rjmp	.+50     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	16 c0       	rjmp	.+44     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    19c8:	82 e0       	ldi	r24, 0x02	; 2
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	13 c0       	rjmp	.+38     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	10 c0       	rjmp	.+32     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    19d4:	8d e2       	ldi	r24, 0x2D	; 45
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	0d c0       	rjmp	.+26     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    19da:	8d e0       	ldi	r24, 0x0D	; 13
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	0a c0       	rjmp	.+20     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    19e0:	19 82       	std	Y+1, r1	; 0x01
    19e2:	08 c0       	rjmp	.+16     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    19e4:	8d e3       	ldi	r24, 0x3D	; 61
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	05 c0       	rjmp	.+10     	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    19ea:	8b e2       	ldi	r24, 0x2B	; 43
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	2e 97       	sbiw	r28, 0x0e	; 14
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	61 e0       	ldi	r22, 0x01	; 1
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	62 e0       	ldi	r22, 0x02	; 2
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a0 ea       	ldi	r26, 0xA0	; 160
    1a32:	b1 e4       	ldi	r27, 0x41	; 65
    1a34:	8b 87       	std	Y+11, r24	; 0x0b
    1a36:	9c 87       	std	Y+12, r25	; 0x0c
    1a38:	ad 87       	std	Y+13, r26	; 0x0d
    1a3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	4a e7       	ldi	r20, 0x7A	; 122
    1a4a:	55 e4       	ldi	r21, 0x45	; 69
    1a4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	8f 83       	std	Y+7, r24	; 0x07
    1a56:	98 87       	std	Y+8, r25	; 0x08
    1a58:	a9 87       	std	Y+9, r26	; 0x09
    1a5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5e:	78 85       	ldd	r23, Y+8	; 0x08
    1a60:	89 85       	ldd	r24, Y+9	; 0x09
    1a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e8       	ldi	r20, 0x80	; 128
    1a6a:	5f e3       	ldi	r21, 0x3F	; 63
    1a6c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a70:	88 23       	and	r24, r24
    1a72:	2c f4       	brge	.+10     	; 0x1a7e <LCD_init+0x7a>
		__ticks = 1;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	9e 83       	std	Y+6, r25	; 0x06
    1a7a:	8d 83       	std	Y+5, r24	; 0x05
    1a7c:	3f c0       	rjmp	.+126    	; 0x1afc <LCD_init+0xf8>
	else if (__tmp > 65535)
    1a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a80:	78 85       	ldd	r23, Y+8	; 0x08
    1a82:	89 85       	ldd	r24, Y+9	; 0x09
    1a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	3f ef       	ldi	r19, 0xFF	; 255
    1a8a:	4f e7       	ldi	r20, 0x7F	; 127
    1a8c:	57 e4       	ldi	r21, 0x47	; 71
    1a8e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a92:	18 16       	cp	r1, r24
    1a94:	4c f5       	brge	.+82     	; 0x1ae8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e2       	ldi	r20, 0x20	; 32
    1aa4:	51 e4       	ldi	r21, 0x41	; 65
    1aa6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	bc 01       	movw	r22, r24
    1ab0:	cd 01       	movw	r24, r26
    1ab2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
    1abe:	0f c0       	rjmp	.+30     	; 0x1ade <LCD_init+0xda>
    1ac0:	80 e9       	ldi	r24, 0x90	; 144
    1ac2:	91 e0       	ldi	r25, 0x01	; 1
    1ac4:	9c 83       	std	Y+4, r25	; 0x04
    1ac6:	8b 83       	std	Y+3, r24	; 0x03
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <LCD_init+0xc8>
    1ad0:	9c 83       	std	Y+4, r25	; 0x04
    1ad2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	69 f7       	brne	.-38     	; 0x1ac0 <LCD_init+0xbc>
    1ae6:	14 c0       	rjmp	.+40     	; 0x1b10 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aea:	78 85       	ldd	r23, Y+8	; 0x08
    1aec:	89 85       	ldd	r24, Y+9	; 0x09
    1aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	9e 83       	std	Y+6, r25	; 0x06
    1afa:	8d 83       	std	Y+5, r24	; 0x05
    1afc:	8d 81       	ldd	r24, Y+5	; 0x05
    1afe:	9e 81       	ldd	r25, Y+6	; 0x06
    1b00:	9a 83       	std	Y+2, r25	; 0x02
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	9a 81       	ldd	r25, Y+2	; 0x02
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <LCD_init+0x104>
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	63 e0       	ldi	r22, 0x03	; 3
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	64 e0       	ldi	r22, 0x04	; 4
    1b1e:	41 e0       	ldi	r20, 0x01	; 1
    1b20:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	65 e0       	ldi	r22, 0x05	; 5
    1b28:	41 e0       	ldi	r20, 0x01	; 1
    1b2a:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	66 e0       	ldi	r22, 0x06	; 6
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1b38:	83 e3       	ldi	r24, 0x33	; 51
    1b3a:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1b3e:	82 e3       	ldi	r24, 0x32	; 50
    1b40:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1b44:	88 e2       	ldi	r24, 0x28	; 40
    1b46:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1b4a:	8c e0       	ldi	r24, 0x0C	; 12
    1b4c:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_sendCommand>
}
    1b56:	2e 96       	adiw	r28, 0x0e	; 14
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1b68:	0f 93       	push	r16
    1b6a:	1f 93       	push	r17
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	c3 56       	subi	r28, 0x63	; 99
    1b76:	d0 40       	sbci	r29, 0x00	; 0
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	fe 01       	movw	r30, r28
    1b84:	ed 59       	subi	r30, 0x9D	; 157
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
    1b94:	fe 01       	movw	r30, r28
    1b96:	e1 5a       	subi	r30, 0xA1	; 161
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	a0 e8       	ldi	r26, 0x80	; 128
    1ba0:	bf e3       	ldi	r27, 0x3F	; 63
    1ba2:	80 83       	st	Z, r24
    1ba4:	91 83       	std	Z+1, r25	; 0x01
    1ba6:	a2 83       	std	Z+2, r26	; 0x02
    1ba8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1baa:	8e 01       	movw	r16, r28
    1bac:	05 5a       	subi	r16, 0xA5	; 165
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	e1 5a       	subi	r30, 0xA1	; 161
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	60 81       	ld	r22, Z
    1bb8:	71 81       	ldd	r23, Z+1	; 0x01
    1bba:	82 81       	ldd	r24, Z+2	; 0x02
    1bbc:	93 81       	ldd	r25, Z+3	; 0x03
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	4a e7       	ldi	r20, 0x7A	; 122
    1bc4:	55 e4       	ldi	r21, 0x45	; 69
    1bc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	f8 01       	movw	r30, r16
    1bd0:	80 83       	st	Z, r24
    1bd2:	91 83       	std	Z+1, r25	; 0x01
    1bd4:	a2 83       	std	Z+2, r26	; 0x02
    1bd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e5 5a       	subi	r30, 0xA5	; 165
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	60 81       	ld	r22, Z
    1be0:	71 81       	ldd	r23, Z+1	; 0x01
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e8       	ldi	r20, 0x80	; 128
    1bec:	5f e3       	ldi	r21, 0x3F	; 63
    1bee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	44 f4       	brge	.+16     	; 0x1c06 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e7 5a       	subi	r30, 0xA7	; 167
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	91 83       	std	Z+1, r25	; 0x01
    1c02:	80 83       	st	Z, r24
    1c04:	64 c0       	rjmp	.+200    	; 0x1cce <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1c06:	fe 01       	movw	r30, r28
    1c08:	e5 5a       	subi	r30, 0xA5	; 165
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	60 81       	ld	r22, Z
    1c0e:	71 81       	ldd	r23, Z+1	; 0x01
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	93 81       	ldd	r25, Z+3	; 0x03
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	0c f0       	brlt	.+2      	; 0x1c26 <LCD_sendCommand+0xbe>
    1c24:	43 c0       	rjmp	.+134    	; 0x1cac <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	fe 01       	movw	r30, r28
    1c28:	e1 5a       	subi	r30, 0xA1	; 161
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	60 81       	ld	r22, Z
    1c2e:	71 81       	ldd	r23, Z+1	; 0x01
    1c30:	82 81       	ldd	r24, Z+2	; 0x02
    1c32:	93 81       	ldd	r25, Z+3	; 0x03
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	40 e2       	ldi	r20, 0x20	; 32
    1c3a:	51 e4       	ldi	r21, 0x41	; 65
    1c3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	8e 01       	movw	r16, r28
    1c46:	07 5a       	subi	r16, 0xA7	; 167
    1c48:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	cd 01       	movw	r24, r26
    1c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	f8 01       	movw	r30, r16
    1c58:	91 83       	std	Z+1, r25	; 0x01
    1c5a:	80 83       	st	Z, r24
    1c5c:	1f c0       	rjmp	.+62     	; 0x1c9c <LCD_sendCommand+0x134>
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e9 5a       	subi	r30, 0xA9	; 169
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	80 e9       	ldi	r24, 0x90	; 144
    1c66:	91 e0       	ldi	r25, 0x01	; 1
    1c68:	91 83       	std	Z+1, r25	; 0x01
    1c6a:	80 83       	st	Z, r24
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e9 5a       	subi	r30, 0xA9	; 169
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <LCD_sendCommand+0x10e>
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e9 5a       	subi	r30, 0xA9	; 169
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c84:	de 01       	movw	r26, r28
    1c86:	a7 5a       	subi	r26, 0xA7	; 167
    1c88:	bf 4f       	sbci	r27, 0xFF	; 255
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e7 5a       	subi	r30, 0xA7	; 167
    1c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c90:	80 81       	ld	r24, Z
    1c92:	91 81       	ldd	r25, Z+1	; 0x01
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	11 96       	adiw	r26, 0x01	; 1
    1c98:	9c 93       	st	X, r25
    1c9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e7 5a       	subi	r30, 0xA7	; 167
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	80 81       	ld	r24, Z
    1ca4:	91 81       	ldd	r25, Z+1	; 0x01
    1ca6:	00 97       	sbiw	r24, 0x00	; 0
    1ca8:	d1 f6       	brne	.-76     	; 0x1c5e <LCD_sendCommand+0xf6>
    1caa:	27 c0       	rjmp	.+78     	; 0x1cfa <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cac:	8e 01       	movw	r16, r28
    1cae:	07 5a       	subi	r16, 0xA7	; 167
    1cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	e5 5a       	subi	r30, 0xA5	; 165
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	60 81       	ld	r22, Z
    1cba:	71 81       	ldd	r23, Z+1	; 0x01
    1cbc:	82 81       	ldd	r24, Z+2	; 0x02
    1cbe:	93 81       	ldd	r25, Z+3	; 0x03
    1cc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	f8 01       	movw	r30, r16
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	80 83       	st	Z, r24
    1cce:	de 01       	movw	r26, r28
    1cd0:	ab 5a       	subi	r26, 0xAB	; 171
    1cd2:	bf 4f       	sbci	r27, 0xFF	; 255
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e7 5a       	subi	r30, 0xA7	; 167
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	91 81       	ldd	r25, Z+1	; 0x01
    1cde:	8d 93       	st	X+, r24
    1ce0:	9c 93       	st	X, r25
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	eb 5a       	subi	r30, 0xAB	; 171
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	80 81       	ld	r24, Z
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <LCD_sendCommand+0x184>
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	eb 5a       	subi	r30, 0xAB	; 171
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	91 83       	std	Z+1, r25	; 0x01
    1cf8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	62 e0       	ldi	r22, 0x02	; 2
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
    1d04:	fe 01       	movw	r30, r28
    1d06:	ef 5a       	subi	r30, 0xAF	; 175
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	a0 e8       	ldi	r26, 0x80	; 128
    1d10:	bf e3       	ldi	r27, 0x3F	; 63
    1d12:	80 83       	st	Z, r24
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	a2 83       	std	Z+2, r26	; 0x02
    1d18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1a:	8e 01       	movw	r16, r28
    1d1c:	03 5b       	subi	r16, 0xB3	; 179
    1d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d20:	fe 01       	movw	r30, r28
    1d22:	ef 5a       	subi	r30, 0xAF	; 175
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	60 81       	ld	r22, Z
    1d28:	71 81       	ldd	r23, Z+1	; 0x01
    1d2a:	82 81       	ldd	r24, Z+2	; 0x02
    1d2c:	93 81       	ldd	r25, Z+3	; 0x03
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a e7       	ldi	r20, 0x7A	; 122
    1d34:	55 e4       	ldi	r21, 0x45	; 69
    1d36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	f8 01       	movw	r30, r16
    1d40:	80 83       	st	Z, r24
    1d42:	91 83       	std	Z+1, r25	; 0x01
    1d44:	a2 83       	std	Z+2, r26	; 0x02
    1d46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d48:	fe 01       	movw	r30, r28
    1d4a:	e3 5b       	subi	r30, 0xB3	; 179
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	60 81       	ld	r22, Z
    1d50:	71 81       	ldd	r23, Z+1	; 0x01
    1d52:	82 81       	ldd	r24, Z+2	; 0x02
    1d54:	93 81       	ldd	r25, Z+3	; 0x03
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e8       	ldi	r20, 0x80	; 128
    1d5c:	5f e3       	ldi	r21, 0x3F	; 63
    1d5e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d62:	88 23       	and	r24, r24
    1d64:	44 f4       	brge	.+16     	; 0x1d76 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1d66:	fe 01       	movw	r30, r28
    1d68:	e5 5b       	subi	r30, 0xB5	; 181
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	80 83       	st	Z, r24
    1d74:	64 c0       	rjmp	.+200    	; 0x1e3e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1d76:	fe 01       	movw	r30, r28
    1d78:	e3 5b       	subi	r30, 0xB3	; 179
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	60 81       	ld	r22, Z
    1d7e:	71 81       	ldd	r23, Z+1	; 0x01
    1d80:	82 81       	ldd	r24, Z+2	; 0x02
    1d82:	93 81       	ldd	r25, Z+3	; 0x03
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	3f ef       	ldi	r19, 0xFF	; 255
    1d88:	4f e7       	ldi	r20, 0x7F	; 127
    1d8a:	57 e4       	ldi	r21, 0x47	; 71
    1d8c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d90:	18 16       	cp	r1, r24
    1d92:	0c f0       	brlt	.+2      	; 0x1d96 <LCD_sendCommand+0x22e>
    1d94:	43 c0       	rjmp	.+134    	; 0x1e1c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d96:	fe 01       	movw	r30, r28
    1d98:	ef 5a       	subi	r30, 0xAF	; 175
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	60 81       	ld	r22, Z
    1d9e:	71 81       	ldd	r23, Z+1	; 0x01
    1da0:	82 81       	ldd	r24, Z+2	; 0x02
    1da2:	93 81       	ldd	r25, Z+3	; 0x03
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e2       	ldi	r20, 0x20	; 32
    1daa:	51 e4       	ldi	r21, 0x41	; 65
    1dac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	8e 01       	movw	r16, r28
    1db6:	05 5b       	subi	r16, 0xB5	; 181
    1db8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	80 83       	st	Z, r24
    1dcc:	1f c0       	rjmp	.+62     	; 0x1e0c <LCD_sendCommand+0x2a4>
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e7 5b       	subi	r30, 0xB7	; 183
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 e9       	ldi	r24, 0x90	; 144
    1dd6:	91 e0       	ldi	r25, 0x01	; 1
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e7 5b       	subi	r30, 0xB7	; 183
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	80 81       	ld	r24, Z
    1de4:	91 81       	ldd	r25, Z+1	; 0x01
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <LCD_sendCommand+0x27e>
    1dea:	fe 01       	movw	r30, r28
    1dec:	e7 5b       	subi	r30, 0xB7	; 183
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	91 83       	std	Z+1, r25	; 0x01
    1df2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df4:	de 01       	movw	r26, r28
    1df6:	a5 5b       	subi	r26, 0xB5	; 181
    1df8:	bf 4f       	sbci	r27, 0xFF	; 255
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e5 5b       	subi	r30, 0xB5	; 181
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	80 81       	ld	r24, Z
    1e02:	91 81       	ldd	r25, Z+1	; 0x01
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	11 96       	adiw	r26, 0x01	; 1
    1e08:	9c 93       	st	X, r25
    1e0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e5 5b       	subi	r30, 0xB5	; 181
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 81       	ld	r24, Z
    1e14:	91 81       	ldd	r25, Z+1	; 0x01
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	d1 f6       	brne	.-76     	; 0x1dce <LCD_sendCommand+0x266>
    1e1a:	27 c0       	rjmp	.+78     	; 0x1e6a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1c:	8e 01       	movw	r16, r28
    1e1e:	05 5b       	subi	r16, 0xB5	; 181
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	fe 01       	movw	r30, r28
    1e24:	e3 5b       	subi	r30, 0xB3	; 179
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	f8 01       	movw	r30, r16
    1e3a:	91 83       	std	Z+1, r25	; 0x01
    1e3c:	80 83       	st	Z, r24
    1e3e:	de 01       	movw	r26, r28
    1e40:	a9 5b       	subi	r26, 0xB9	; 185
    1e42:	bf 4f       	sbci	r27, 0xFF	; 255
    1e44:	fe 01       	movw	r30, r28
    1e46:	e5 5b       	subi	r30, 0xB5	; 181
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	80 81       	ld	r24, Z
    1e4c:	91 81       	ldd	r25, Z+1	; 0x01
    1e4e:	8d 93       	st	X+, r24
    1e50:	9c 93       	st	X, r25
    1e52:	fe 01       	movw	r30, r28
    1e54:	e9 5b       	subi	r30, 0xB9	; 185
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	91 81       	ldd	r25, Z+1	; 0x01
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <LCD_sendCommand+0x2f4>
    1e60:	fe 01       	movw	r30, r28
    1e62:	e9 5b       	subi	r30, 0xB9	; 185
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	91 83       	std	Z+1, r25	; 0x01
    1e68:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	ed 59       	subi	r30, 0x9D	; 157
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	80 81       	ld	r24, Z
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	80 71       	andi	r24, 0x10	; 16
    1e78:	90 70       	andi	r25, 0x00	; 0
    1e7a:	95 95       	asr	r25
    1e7c:	87 95       	ror	r24
    1e7e:	95 95       	asr	r25
    1e80:	87 95       	ror	r24
    1e82:	95 95       	asr	r25
    1e84:	87 95       	ror	r24
    1e86:	95 95       	asr	r25
    1e88:	87 95       	ror	r24
    1e8a:	98 2f       	mov	r25, r24
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	63 e0       	ldi	r22, 0x03	; 3
    1e90:	49 2f       	mov	r20, r25
    1e92:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1e96:	fe 01       	movw	r30, r28
    1e98:	ed 59       	subi	r30, 0x9D	; 157
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	80 81       	ld	r24, Z
    1e9e:	88 2f       	mov	r24, r24
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	80 72       	andi	r24, 0x20	; 32
    1ea4:	90 70       	andi	r25, 0x00	; 0
    1ea6:	95 95       	asr	r25
    1ea8:	87 95       	ror	r24
    1eaa:	95 95       	asr	r25
    1eac:	87 95       	ror	r24
    1eae:	95 95       	asr	r25
    1eb0:	87 95       	ror	r24
    1eb2:	95 95       	asr	r25
    1eb4:	87 95       	ror	r24
    1eb6:	95 95       	asr	r25
    1eb8:	87 95       	ror	r24
    1eba:	98 2f       	mov	r25, r24
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	64 e0       	ldi	r22, 0x04	; 4
    1ec0:	49 2f       	mov	r20, r25
    1ec2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	ed 59       	subi	r30, 0x9D	; 157
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	80 81       	ld	r24, Z
    1ece:	88 2f       	mov	r24, r24
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	80 74       	andi	r24, 0x40	; 64
    1ed4:	90 70       	andi	r25, 0x00	; 0
    1ed6:	08 2e       	mov	r0, r24
    1ed8:	89 2f       	mov	r24, r25
    1eda:	00 0c       	add	r0, r0
    1edc:	88 1f       	adc	r24, r24
    1ede:	99 0b       	sbc	r25, r25
    1ee0:	00 0c       	add	r0, r0
    1ee2:	88 1f       	adc	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	98 2f       	mov	r25, r24
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	65 e0       	ldi	r22, 0x05	; 5
    1eec:	49 2f       	mov	r20, r25
    1eee:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	ed 59       	subi	r30, 0x9D	; 157
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	80 81       	ld	r24, Z
    1efa:	98 2f       	mov	r25, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	99 27       	eor	r25, r25
    1f00:	99 1f       	adc	r25, r25
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	66 e0       	ldi	r22, 0x06	; 6
    1f06:	49 2f       	mov	r20, r25
    1f08:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ed 5b       	subi	r30, 0xBD	; 189
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a0 e8       	ldi	r26, 0x80	; 128
    1f18:	bf e3       	ldi	r27, 0x3F	; 63
    1f1a:	80 83       	st	Z, r24
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	a2 83       	std	Z+2, r26	; 0x02
    1f20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f22:	8e 01       	movw	r16, r28
    1f24:	01 5c       	subi	r16, 0xC1	; 193
    1f26:	1f 4f       	sbci	r17, 0xFF	; 255
    1f28:	fe 01       	movw	r30, r28
    1f2a:	ed 5b       	subi	r30, 0xBD	; 189
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	60 81       	ld	r22, Z
    1f30:	71 81       	ldd	r23, Z+1	; 0x01
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	4a e7       	ldi	r20, 0x7A	; 122
    1f3c:	55 e4       	ldi	r21, 0x45	; 69
    1f3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	f8 01       	movw	r30, r16
    1f48:	80 83       	st	Z, r24
    1f4a:	91 83       	std	Z+1, r25	; 0x01
    1f4c:	a2 83       	std	Z+2, r26	; 0x02
    1f4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f50:	fe 01       	movw	r30, r28
    1f52:	ff 96       	adiw	r30, 0x3f	; 63
    1f54:	60 81       	ld	r22, Z
    1f56:	71 81       	ldd	r23, Z+1	; 0x01
    1f58:	82 81       	ldd	r24, Z+2	; 0x02
    1f5a:	93 81       	ldd	r25, Z+3	; 0x03
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f68:	88 23       	and	r24, r24
    1f6a:	2c f4       	brge	.+10     	; 0x1f76 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9e af       	std	Y+62, r25	; 0x3e
    1f72:	8d af       	std	Y+61, r24	; 0x3d
    1f74:	46 c0       	rjmp	.+140    	; 0x2002 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1f76:	fe 01       	movw	r30, r28
    1f78:	ff 96       	adiw	r30, 0x3f	; 63
    1f7a:	60 81       	ld	r22, Z
    1f7c:	71 81       	ldd	r23, Z+1	; 0x01
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	3f ef       	ldi	r19, 0xFF	; 255
    1f86:	4f e7       	ldi	r20, 0x7F	; 127
    1f88:	57 e4       	ldi	r21, 0x47	; 71
    1f8a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	64 f5       	brge	.+88     	; 0x1fea <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	fe 01       	movw	r30, r28
    1f94:	ed 5b       	subi	r30, 0xBD	; 189
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	82 81       	ldd	r24, Z+2	; 0x02
    1f9e:	93 81       	ldd	r25, Z+3	; 0x03
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e2       	ldi	r20, 0x20	; 32
    1fa6:	51 e4       	ldi	r21, 0x41	; 65
    1fa8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9e af       	std	Y+62, r25	; 0x3e
    1fbe:	8d af       	std	Y+61, r24	; 0x3d
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <LCD_sendCommand+0x478>
    1fc2:	80 e9       	ldi	r24, 0x90	; 144
    1fc4:	91 e0       	ldi	r25, 0x01	; 1
    1fc6:	9c af       	std	Y+60, r25	; 0x3c
    1fc8:	8b af       	std	Y+59, r24	; 0x3b
    1fca:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fcc:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <LCD_sendCommand+0x466>
    1fd2:	9c af       	std	Y+60, r25	; 0x3c
    1fd4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	9e af       	std	Y+62, r25	; 0x3e
    1fde:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fe2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	69 f7       	brne	.-38     	; 0x1fc2 <LCD_sendCommand+0x45a>
    1fe8:	16 c0       	rjmp	.+44     	; 0x2016 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fea:	fe 01       	movw	r30, r28
    1fec:	ff 96       	adiw	r30, 0x3f	; 63
    1fee:	60 81       	ld	r22, Z
    1ff0:	71 81       	ldd	r23, Z+1	; 0x01
    1ff2:	82 81       	ldd	r24, Z+2	; 0x02
    1ff4:	93 81       	ldd	r25, Z+3	; 0x03
    1ff6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9e af       	std	Y+62, r25	; 0x3e
    2000:	8d af       	std	Y+61, r24	; 0x3d
    2002:	8d ad       	ldd	r24, Y+61	; 0x3d
    2004:	9e ad       	ldd	r25, Y+62	; 0x3e
    2006:	9a af       	std	Y+58, r25	; 0x3a
    2008:	89 af       	std	Y+57, r24	; 0x39
    200a:	89 ad       	ldd	r24, Y+57	; 0x39
    200c:	9a ad       	ldd	r25, Y+58	; 0x3a
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <LCD_sendCommand+0x4a6>
    2012:	9a af       	std	Y+58, r25	; 0x3a
    2014:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	62 e0       	ldi	r22, 0x02	; 2
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 e8       	ldi	r26, 0x80	; 128
    2026:	bf e3       	ldi	r27, 0x3F	; 63
    2028:	8d ab       	std	Y+53, r24	; 0x35
    202a:	9e ab       	std	Y+54, r25	; 0x36
    202c:	af ab       	std	Y+55, r26	; 0x37
    202e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2030:	6d a9       	ldd	r22, Y+53	; 0x35
    2032:	7e a9       	ldd	r23, Y+54	; 0x36
    2034:	8f a9       	ldd	r24, Y+55	; 0x37
    2036:	98 ad       	ldd	r25, Y+56	; 0x38
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	4a e7       	ldi	r20, 0x7A	; 122
    203e:	55 e4       	ldi	r21, 0x45	; 69
    2040:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	89 ab       	std	Y+49, r24	; 0x31
    204a:	9a ab       	std	Y+50, r25	; 0x32
    204c:	ab ab       	std	Y+51, r26	; 0x33
    204e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2050:	69 a9       	ldd	r22, Y+49	; 0x31
    2052:	7a a9       	ldd	r23, Y+50	; 0x32
    2054:	8b a9       	ldd	r24, Y+51	; 0x33
    2056:	9c a9       	ldd	r25, Y+52	; 0x34
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e8       	ldi	r20, 0x80	; 128
    205e:	5f e3       	ldi	r21, 0x3F	; 63
    2060:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2064:	88 23       	and	r24, r24
    2066:	2c f4       	brge	.+10     	; 0x2072 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	98 ab       	std	Y+48, r25	; 0x30
    206e:	8f a7       	std	Y+47, r24	; 0x2f
    2070:	3f c0       	rjmp	.+126    	; 0x20f0 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2072:	69 a9       	ldd	r22, Y+49	; 0x31
    2074:	7a a9       	ldd	r23, Y+50	; 0x32
    2076:	8b a9       	ldd	r24, Y+51	; 0x33
    2078:	9c a9       	ldd	r25, Y+52	; 0x34
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	3f ef       	ldi	r19, 0xFF	; 255
    207e:	4f e7       	ldi	r20, 0x7F	; 127
    2080:	57 e4       	ldi	r21, 0x47	; 71
    2082:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2086:	18 16       	cp	r1, r24
    2088:	4c f5       	brge	.+82     	; 0x20dc <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208a:	6d a9       	ldd	r22, Y+53	; 0x35
    208c:	7e a9       	ldd	r23, Y+54	; 0x36
    208e:	8f a9       	ldd	r24, Y+55	; 0x37
    2090:	98 ad       	ldd	r25, Y+56	; 0x38
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e2       	ldi	r20, 0x20	; 32
    2098:	51 e4       	ldi	r21, 0x41	; 65
    209a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	98 ab       	std	Y+48, r25	; 0x30
    20b0:	8f a7       	std	Y+47, r24	; 0x2f
    20b2:	0f c0       	rjmp	.+30     	; 0x20d2 <LCD_sendCommand+0x56a>
    20b4:	80 e9       	ldi	r24, 0x90	; 144
    20b6:	91 e0       	ldi	r25, 0x01	; 1
    20b8:	9e a7       	std	Y+46, r25	; 0x2e
    20ba:	8d a7       	std	Y+45, r24	; 0x2d
    20bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    20be:	9e a5       	ldd	r25, Y+46	; 0x2e
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <LCD_sendCommand+0x558>
    20c4:	9e a7       	std	Y+46, r25	; 0x2e
    20c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ca:	98 a9       	ldd	r25, Y+48	; 0x30
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	98 ab       	std	Y+48, r25	; 0x30
    20d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d4:	98 a9       	ldd	r25, Y+48	; 0x30
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	69 f7       	brne	.-38     	; 0x20b4 <LCD_sendCommand+0x54c>
    20da:	14 c0       	rjmp	.+40     	; 0x2104 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20dc:	69 a9       	ldd	r22, Y+49	; 0x31
    20de:	7a a9       	ldd	r23, Y+50	; 0x32
    20e0:	8b a9       	ldd	r24, Y+51	; 0x33
    20e2:	9c a9       	ldd	r25, Y+52	; 0x34
    20e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	98 ab       	std	Y+48, r25	; 0x30
    20ee:	8f a7       	std	Y+47, r24	; 0x2f
    20f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20f2:	98 a9       	ldd	r25, Y+48	; 0x30
    20f4:	9c a7       	std	Y+44, r25	; 0x2c
    20f6:	8b a7       	std	Y+43, r24	; 0x2b
    20f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    20fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <LCD_sendCommand+0x594>
    2100:	9c a7       	std	Y+44, r25	; 0x2c
    2102:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	62 e0       	ldi	r22, 0x02	; 2
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	a0 e8       	ldi	r26, 0x80	; 128
    2114:	bf e3       	ldi	r27, 0x3F	; 63
    2116:	8f a3       	std	Y+39, r24	; 0x27
    2118:	98 a7       	std	Y+40, r25	; 0x28
    211a:	a9 a7       	std	Y+41, r26	; 0x29
    211c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211e:	6f a1       	ldd	r22, Y+39	; 0x27
    2120:	78 a5       	ldd	r23, Y+40	; 0x28
    2122:	89 a5       	ldd	r24, Y+41	; 0x29
    2124:	9a a5       	ldd	r25, Y+42	; 0x2a
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	4a e7       	ldi	r20, 0x7A	; 122
    212c:	55 e4       	ldi	r21, 0x45	; 69
    212e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	8b a3       	std	Y+35, r24	; 0x23
    2138:	9c a3       	std	Y+36, r25	; 0x24
    213a:	ad a3       	std	Y+37, r26	; 0x25
    213c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    213e:	6b a1       	ldd	r22, Y+35	; 0x23
    2140:	7c a1       	ldd	r23, Y+36	; 0x24
    2142:	8d a1       	ldd	r24, Y+37	; 0x25
    2144:	9e a1       	ldd	r25, Y+38	; 0x26
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e8       	ldi	r20, 0x80	; 128
    214c:	5f e3       	ldi	r21, 0x3F	; 63
    214e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2152:	88 23       	and	r24, r24
    2154:	2c f4       	brge	.+10     	; 0x2160 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	9a a3       	std	Y+34, r25	; 0x22
    215c:	89 a3       	std	Y+33, r24	; 0x21
    215e:	3f c0       	rjmp	.+126    	; 0x21de <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2160:	6b a1       	ldd	r22, Y+35	; 0x23
    2162:	7c a1       	ldd	r23, Y+36	; 0x24
    2164:	8d a1       	ldd	r24, Y+37	; 0x25
    2166:	9e a1       	ldd	r25, Y+38	; 0x26
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	3f ef       	ldi	r19, 0xFF	; 255
    216c:	4f e7       	ldi	r20, 0x7F	; 127
    216e:	57 e4       	ldi	r21, 0x47	; 71
    2170:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2174:	18 16       	cp	r1, r24
    2176:	4c f5       	brge	.+82     	; 0x21ca <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2178:	6f a1       	ldd	r22, Y+39	; 0x27
    217a:	78 a5       	ldd	r23, Y+40	; 0x28
    217c:	89 a5       	ldd	r24, Y+41	; 0x29
    217e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e2       	ldi	r20, 0x20	; 32
    2186:	51 e4       	ldi	r21, 0x41	; 65
    2188:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	bc 01       	movw	r22, r24
    2192:	cd 01       	movw	r24, r26
    2194:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	9a a3       	std	Y+34, r25	; 0x22
    219e:	89 a3       	std	Y+33, r24	; 0x21
    21a0:	0f c0       	rjmp	.+30     	; 0x21c0 <LCD_sendCommand+0x658>
    21a2:	80 e9       	ldi	r24, 0x90	; 144
    21a4:	91 e0       	ldi	r25, 0x01	; 1
    21a6:	98 a3       	std	Y+32, r25	; 0x20
    21a8:	8f 8f       	std	Y+31, r24	; 0x1f
    21aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21ac:	98 a1       	ldd	r25, Y+32	; 0x20
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	f1 f7       	brne	.-4      	; 0x21ae <LCD_sendCommand+0x646>
    21b2:	98 a3       	std	Y+32, r25	; 0x20
    21b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b6:	89 a1       	ldd	r24, Y+33	; 0x21
    21b8:	9a a1       	ldd	r25, Y+34	; 0x22
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	9a a3       	std	Y+34, r25	; 0x22
    21be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c0:	89 a1       	ldd	r24, Y+33	; 0x21
    21c2:	9a a1       	ldd	r25, Y+34	; 0x22
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	69 f7       	brne	.-38     	; 0x21a2 <LCD_sendCommand+0x63a>
    21c8:	14 c0       	rjmp	.+40     	; 0x21f2 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ca:	6b a1       	ldd	r22, Y+35	; 0x23
    21cc:	7c a1       	ldd	r23, Y+36	; 0x24
    21ce:	8d a1       	ldd	r24, Y+37	; 0x25
    21d0:	9e a1       	ldd	r25, Y+38	; 0x26
    21d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	9a a3       	std	Y+34, r25	; 0x22
    21dc:	89 a3       	std	Y+33, r24	; 0x21
    21de:	89 a1       	ldd	r24, Y+33	; 0x21
    21e0:	9a a1       	ldd	r25, Y+34	; 0x22
    21e2:	9e 8f       	std	Y+30, r25	; 0x1e
    21e4:	8d 8f       	std	Y+29, r24	; 0x1d
    21e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <LCD_sendCommand+0x682>
    21ee:	9e 8f       	std	Y+30, r25	; 0x1e
    21f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    21f2:	fe 01       	movw	r30, r28
    21f4:	ed 59       	subi	r30, 0x9D	; 157
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	80 81       	ld	r24, Z
    21fa:	98 2f       	mov	r25, r24
    21fc:	91 70       	andi	r25, 0x01	; 1
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	63 e0       	ldi	r22, 0x03	; 3
    2202:	49 2f       	mov	r20, r25
    2204:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2208:	fe 01       	movw	r30, r28
    220a:	ed 59       	subi	r30, 0x9D	; 157
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 81       	ld	r24, Z
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	82 70       	andi	r24, 0x02	; 2
    2216:	90 70       	andi	r25, 0x00	; 0
    2218:	95 95       	asr	r25
    221a:	87 95       	ror	r24
    221c:	98 2f       	mov	r25, r24
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	64 e0       	ldi	r22, 0x04	; 4
    2222:	49 2f       	mov	r20, r25
    2224:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2228:	fe 01       	movw	r30, r28
    222a:	ed 59       	subi	r30, 0x9D	; 157
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	80 81       	ld	r24, Z
    2230:	88 2f       	mov	r24, r24
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	84 70       	andi	r24, 0x04	; 4
    2236:	90 70       	andi	r25, 0x00	; 0
    2238:	95 95       	asr	r25
    223a:	87 95       	ror	r24
    223c:	95 95       	asr	r25
    223e:	87 95       	ror	r24
    2240:	98 2f       	mov	r25, r24
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	65 e0       	ldi	r22, 0x05	; 5
    2246:	49 2f       	mov	r20, r25
    2248:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    224c:	fe 01       	movw	r30, r28
    224e:	ed 59       	subi	r30, 0x9D	; 157
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	80 81       	ld	r24, Z
    2254:	88 2f       	mov	r24, r24
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	88 70       	andi	r24, 0x08	; 8
    225a:	90 70       	andi	r25, 0x00	; 0
    225c:	95 95       	asr	r25
    225e:	87 95       	ror	r24
    2260:	95 95       	asr	r25
    2262:	87 95       	ror	r24
    2264:	95 95       	asr	r25
    2266:	87 95       	ror	r24
    2268:	98 2f       	mov	r25, r24
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	66 e0       	ldi	r22, 0x06	; 6
    226e:	49 2f       	mov	r20, r25
    2270:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	a0 e8       	ldi	r26, 0x80	; 128
    227a:	bf e3       	ldi	r27, 0x3F	; 63
    227c:	89 8f       	std	Y+25, r24	; 0x19
    227e:	9a 8f       	std	Y+26, r25	; 0x1a
    2280:	ab 8f       	std	Y+27, r26	; 0x1b
    2282:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2284:	69 8d       	ldd	r22, Y+25	; 0x19
    2286:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2288:	8b 8d       	ldd	r24, Y+27	; 0x1b
    228a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4a e7       	ldi	r20, 0x7A	; 122
    2292:	55 e4       	ldi	r21, 0x45	; 69
    2294:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	8d 8b       	std	Y+21, r24	; 0x15
    229e:	9e 8b       	std	Y+22, r25	; 0x16
    22a0:	af 8b       	std	Y+23, r26	; 0x17
    22a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22a4:	6d 89       	ldd	r22, Y+21	; 0x15
    22a6:	7e 89       	ldd	r23, Y+22	; 0x16
    22a8:	8f 89       	ldd	r24, Y+23	; 0x17
    22aa:	98 8d       	ldd	r25, Y+24	; 0x18
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e8       	ldi	r20, 0x80	; 128
    22b2:	5f e3       	ldi	r21, 0x3F	; 63
    22b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22b8:	88 23       	and	r24, r24
    22ba:	2c f4       	brge	.+10     	; 0x22c6 <LCD_sendCommand+0x75e>
		__ticks = 1;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9c 8b       	std	Y+20, r25	; 0x14
    22c2:	8b 8b       	std	Y+19, r24	; 0x13
    22c4:	3f c0       	rjmp	.+126    	; 0x2344 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    22c6:	6d 89       	ldd	r22, Y+21	; 0x15
    22c8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ca:	8f 89       	ldd	r24, Y+23	; 0x17
    22cc:	98 8d       	ldd	r25, Y+24	; 0x18
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	3f ef       	ldi	r19, 0xFF	; 255
    22d2:	4f e7       	ldi	r20, 0x7F	; 127
    22d4:	57 e4       	ldi	r21, 0x47	; 71
    22d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22da:	18 16       	cp	r1, r24
    22dc:	4c f5       	brge	.+82     	; 0x2330 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22de:	69 8d       	ldd	r22, Y+25	; 0x19
    22e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e2       	ldi	r20, 0x20	; 32
    22ec:	51 e4       	ldi	r21, 0x41	; 65
    22ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9c 8b       	std	Y+20, r25	; 0x14
    2304:	8b 8b       	std	Y+19, r24	; 0x13
    2306:	0f c0       	rjmp	.+30     	; 0x2326 <LCD_sendCommand+0x7be>
    2308:	80 e9       	ldi	r24, 0x90	; 144
    230a:	91 e0       	ldi	r25, 0x01	; 1
    230c:	9a 8b       	std	Y+18, r25	; 0x12
    230e:	89 8b       	std	Y+17, r24	; 0x11
    2310:	89 89       	ldd	r24, Y+17	; 0x11
    2312:	9a 89       	ldd	r25, Y+18	; 0x12
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <LCD_sendCommand+0x7ac>
    2318:	9a 8b       	std	Y+18, r25	; 0x12
    231a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231c:	8b 89       	ldd	r24, Y+19	; 0x13
    231e:	9c 89       	ldd	r25, Y+20	; 0x14
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	9c 8b       	std	Y+20, r25	; 0x14
    2324:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2326:	8b 89       	ldd	r24, Y+19	; 0x13
    2328:	9c 89       	ldd	r25, Y+20	; 0x14
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	69 f7       	brne	.-38     	; 0x2308 <LCD_sendCommand+0x7a0>
    232e:	14 c0       	rjmp	.+40     	; 0x2358 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2330:	6d 89       	ldd	r22, Y+21	; 0x15
    2332:	7e 89       	ldd	r23, Y+22	; 0x16
    2334:	8f 89       	ldd	r24, Y+23	; 0x17
    2336:	98 8d       	ldd	r25, Y+24	; 0x18
    2338:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	9c 8b       	std	Y+20, r25	; 0x14
    2342:	8b 8b       	std	Y+19, r24	; 0x13
    2344:	8b 89       	ldd	r24, Y+19	; 0x13
    2346:	9c 89       	ldd	r25, Y+20	; 0x14
    2348:	98 8b       	std	Y+16, r25	; 0x10
    234a:	8f 87       	std	Y+15, r24	; 0x0f
    234c:	8f 85       	ldd	r24, Y+15	; 0x0f
    234e:	98 89       	ldd	r25, Y+16	; 0x10
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <LCD_sendCommand+0x7e8>
    2354:	98 8b       	std	Y+16, r25	; 0x10
    2356:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	62 e0       	ldi	r22, 0x02	; 2
    235c:	40 e0       	ldi	r20, 0x00	; 0
    235e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	a0 e8       	ldi	r26, 0x80	; 128
    2368:	bf e3       	ldi	r27, 0x3F	; 63
    236a:	8b 87       	std	Y+11, r24	; 0x0b
    236c:	9c 87       	std	Y+12, r25	; 0x0c
    236e:	ad 87       	std	Y+13, r26	; 0x0d
    2370:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2372:	6b 85       	ldd	r22, Y+11	; 0x0b
    2374:	7c 85       	ldd	r23, Y+12	; 0x0c
    2376:	8d 85       	ldd	r24, Y+13	; 0x0d
    2378:	9e 85       	ldd	r25, Y+14	; 0x0e
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	4a e7       	ldi	r20, 0x7A	; 122
    2380:	55 e4       	ldi	r21, 0x45	; 69
    2382:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	8f 83       	std	Y+7, r24	; 0x07
    238c:	98 87       	std	Y+8, r25	; 0x08
    238e:	a9 87       	std	Y+9, r26	; 0x09
    2390:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2392:	6f 81       	ldd	r22, Y+7	; 0x07
    2394:	78 85       	ldd	r23, Y+8	; 0x08
    2396:	89 85       	ldd	r24, Y+9	; 0x09
    2398:	9a 85       	ldd	r25, Y+10	; 0x0a
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	40 e8       	ldi	r20, 0x80	; 128
    23a0:	5f e3       	ldi	r21, 0x3F	; 63
    23a2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23a6:	88 23       	and	r24, r24
    23a8:	2c f4       	brge	.+10     	; 0x23b4 <LCD_sendCommand+0x84c>
		__ticks = 1;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9e 83       	std	Y+6, r25	; 0x06
    23b0:	8d 83       	std	Y+5, r24	; 0x05
    23b2:	3f c0       	rjmp	.+126    	; 0x2432 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    23b4:	6f 81       	ldd	r22, Y+7	; 0x07
    23b6:	78 85       	ldd	r23, Y+8	; 0x08
    23b8:	89 85       	ldd	r24, Y+9	; 0x09
    23ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	3f ef       	ldi	r19, 0xFF	; 255
    23c0:	4f e7       	ldi	r20, 0x7F	; 127
    23c2:	57 e4       	ldi	r21, 0x47	; 71
    23c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23c8:	18 16       	cp	r1, r24
    23ca:	4c f5       	brge	.+82     	; 0x241e <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e2       	ldi	r20, 0x20	; 32
    23da:	51 e4       	ldi	r21, 0x41	; 65
    23dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	0f c0       	rjmp	.+30     	; 0x2414 <LCD_sendCommand+0x8ac>
    23f6:	80 e9       	ldi	r24, 0x90	; 144
    23f8:	91 e0       	ldi	r25, 0x01	; 1
    23fa:	9c 83       	std	Y+4, r25	; 0x04
    23fc:	8b 83       	std	Y+3, r24	; 0x03
    23fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2400:	9c 81       	ldd	r25, Y+4	; 0x04
    2402:	01 97       	sbiw	r24, 0x01	; 1
    2404:	f1 f7       	brne	.-4      	; 0x2402 <LCD_sendCommand+0x89a>
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	9e 81       	ldd	r25, Y+6	; 0x06
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	9e 83       	std	Y+6, r25	; 0x06
    2412:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2414:	8d 81       	ldd	r24, Y+5	; 0x05
    2416:	9e 81       	ldd	r25, Y+6	; 0x06
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	69 f7       	brne	.-38     	; 0x23f6 <LCD_sendCommand+0x88e>
    241c:	14 c0       	rjmp	.+40     	; 0x2446 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241e:	6f 81       	ldd	r22, Y+7	; 0x07
    2420:	78 85       	ldd	r23, Y+8	; 0x08
    2422:	89 85       	ldd	r24, Y+9	; 0x09
    2424:	9a 85       	ldd	r25, Y+10	; 0x0a
    2426:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	9e 83       	std	Y+6, r25	; 0x06
    2430:	8d 83       	std	Y+5, r24	; 0x05
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	89 83       	std	Y+1, r24	; 0x01
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	9a 81       	ldd	r25, Y+2	; 0x02
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <LCD_sendCommand+0x8d6>
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2446:	cd 59       	subi	r28, 0x9D	; 157
    2448:	df 4f       	sbci	r29, 0xFF	; 255
    244a:	0f b6       	in	r0, 0x3f	; 63
    244c:	f8 94       	cli
    244e:	de bf       	out	0x3e, r29	; 62
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	cf 91       	pop	r28
    2456:	df 91       	pop	r29
    2458:	1f 91       	pop	r17
    245a:	0f 91       	pop	r16
    245c:	08 95       	ret

0000245e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	c3 56       	subi	r28, 0x63	; 99
    246c:	d0 40       	sbci	r29, 0x00	; 0
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	fe 01       	movw	r30, r28
    247a:	ed 59       	subi	r30, 0x9D	; 157
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	61 e0       	ldi	r22, 0x01	; 1
    2484:	41 e0       	ldi	r20, 0x01	; 1
    2486:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
    248a:	fe 01       	movw	r30, r28
    248c:	e1 5a       	subi	r30, 0xA1	; 161
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a0 e8       	ldi	r26, 0x80	; 128
    2496:	bf e3       	ldi	r27, 0x3F	; 63
    2498:	80 83       	st	Z, r24
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	a2 83       	std	Z+2, r26	; 0x02
    249e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	8e 01       	movw	r16, r28
    24a2:	05 5a       	subi	r16, 0xA5	; 165
    24a4:	1f 4f       	sbci	r17, 0xFF	; 255
    24a6:	fe 01       	movw	r30, r28
    24a8:	e1 5a       	subi	r30, 0xA1	; 161
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	60 81       	ld	r22, Z
    24ae:	71 81       	ldd	r23, Z+1	; 0x01
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	93 81       	ldd	r25, Z+3	; 0x03
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	4a e7       	ldi	r20, 0x7A	; 122
    24ba:	55 e4       	ldi	r21, 0x45	; 69
    24bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	f8 01       	movw	r30, r16
    24c6:	80 83       	st	Z, r24
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	a2 83       	std	Z+2, r26	; 0x02
    24cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ce:	fe 01       	movw	r30, r28
    24d0:	e5 5a       	subi	r30, 0xA5	; 165
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	60 81       	ld	r22, Z
    24d6:	71 81       	ldd	r23, Z+1	; 0x01
    24d8:	82 81       	ldd	r24, Z+2	; 0x02
    24da:	93 81       	ldd	r25, Z+3	; 0x03
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	40 e8       	ldi	r20, 0x80	; 128
    24e2:	5f e3       	ldi	r21, 0x3F	; 63
    24e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24e8:	88 23       	and	r24, r24
    24ea:	44 f4       	brge	.+16     	; 0x24fc <LCD_displayCharacter+0x9e>
		__ticks = 1;
    24ec:	fe 01       	movw	r30, r28
    24ee:	e7 5a       	subi	r30, 0xA7	; 167
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	91 83       	std	Z+1, r25	; 0x01
    24f8:	80 83       	st	Z, r24
    24fa:	64 c0       	rjmp	.+200    	; 0x25c4 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    24fc:	fe 01       	movw	r30, r28
    24fe:	e5 5a       	subi	r30, 0xA5	; 165
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	60 81       	ld	r22, Z
    2504:	71 81       	ldd	r23, Z+1	; 0x01
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	3f ef       	ldi	r19, 0xFF	; 255
    250e:	4f e7       	ldi	r20, 0x7F	; 127
    2510:	57 e4       	ldi	r21, 0x47	; 71
    2512:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2516:	18 16       	cp	r1, r24
    2518:	0c f0       	brlt	.+2      	; 0x251c <LCD_displayCharacter+0xbe>
    251a:	43 c0       	rjmp	.+134    	; 0x25a2 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251c:	fe 01       	movw	r30, r28
    251e:	e1 5a       	subi	r30, 0xA1	; 161
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e2       	ldi	r20, 0x20	; 32
    2530:	51 e4       	ldi	r21, 0x41	; 65
    2532:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	8e 01       	movw	r16, r28
    253c:	07 5a       	subi	r16, 0xA7	; 167
    253e:	1f 4f       	sbci	r17, 0xFF	; 255
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	f8 01       	movw	r30, r16
    254e:	91 83       	std	Z+1, r25	; 0x01
    2550:	80 83       	st	Z, r24
    2552:	1f c0       	rjmp	.+62     	; 0x2592 <LCD_displayCharacter+0x134>
    2554:	fe 01       	movw	r30, r28
    2556:	e9 5a       	subi	r30, 0xA9	; 169
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	80 e9       	ldi	r24, 0x90	; 144
    255c:	91 e0       	ldi	r25, 0x01	; 1
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
    2562:	fe 01       	movw	r30, r28
    2564:	e9 5a       	subi	r30, 0xA9	; 169
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	f1 f7       	brne	.-4      	; 0x256c <LCD_displayCharacter+0x10e>
    2570:	fe 01       	movw	r30, r28
    2572:	e9 5a       	subi	r30, 0xA9	; 169
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257a:	de 01       	movw	r26, r28
    257c:	a7 5a       	subi	r26, 0xA7	; 167
    257e:	bf 4f       	sbci	r27, 0xFF	; 255
    2580:	fe 01       	movw	r30, r28
    2582:	e7 5a       	subi	r30, 0xA7	; 167
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	80 81       	ld	r24, Z
    2588:	91 81       	ldd	r25, Z+1	; 0x01
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	11 96       	adiw	r26, 0x01	; 1
    258e:	9c 93       	st	X, r25
    2590:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2592:	fe 01       	movw	r30, r28
    2594:	e7 5a       	subi	r30, 0xA7	; 167
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	80 81       	ld	r24, Z
    259a:	91 81       	ldd	r25, Z+1	; 0x01
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	d1 f6       	brne	.-76     	; 0x2554 <LCD_displayCharacter+0xf6>
    25a0:	27 c0       	rjmp	.+78     	; 0x25f0 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a2:	8e 01       	movw	r16, r28
    25a4:	07 5a       	subi	r16, 0xA7	; 167
    25a6:	1f 4f       	sbci	r17, 0xFF	; 255
    25a8:	fe 01       	movw	r30, r28
    25aa:	e5 5a       	subi	r30, 0xA5	; 165
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	60 81       	ld	r22, Z
    25b0:	71 81       	ldd	r23, Z+1	; 0x01
    25b2:	82 81       	ldd	r24, Z+2	; 0x02
    25b4:	93 81       	ldd	r25, Z+3	; 0x03
    25b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	f8 01       	movw	r30, r16
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	80 83       	st	Z, r24
    25c4:	de 01       	movw	r26, r28
    25c6:	ab 5a       	subi	r26, 0xAB	; 171
    25c8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ca:	fe 01       	movw	r30, r28
    25cc:	e7 5a       	subi	r30, 0xA7	; 167
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	8d 93       	st	X+, r24
    25d6:	9c 93       	st	X, r25
    25d8:	fe 01       	movw	r30, r28
    25da:	eb 5a       	subi	r30, 0xAB	; 171
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <LCD_displayCharacter+0x184>
    25e6:	fe 01       	movw	r30, r28
    25e8:	eb 5a       	subi	r30, 0xAB	; 171
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	62 e0       	ldi	r22, 0x02	; 2
    25f4:	41 e0       	ldi	r20, 0x01	; 1
    25f6:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
    25fa:	fe 01       	movw	r30, r28
    25fc:	ef 5a       	subi	r30, 0xAF	; 175
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	a0 e8       	ldi	r26, 0x80	; 128
    2606:	bf e3       	ldi	r27, 0x3F	; 63
    2608:	80 83       	st	Z, r24
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	a2 83       	std	Z+2, r26	; 0x02
    260e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2610:	8e 01       	movw	r16, r28
    2612:	03 5b       	subi	r16, 0xB3	; 179
    2614:	1f 4f       	sbci	r17, 0xFF	; 255
    2616:	fe 01       	movw	r30, r28
    2618:	ef 5a       	subi	r30, 0xAF	; 175
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	60 81       	ld	r22, Z
    261e:	71 81       	ldd	r23, Z+1	; 0x01
    2620:	82 81       	ldd	r24, Z+2	; 0x02
    2622:	93 81       	ldd	r25, Z+3	; 0x03
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	4a e7       	ldi	r20, 0x7A	; 122
    262a:	55 e4       	ldi	r21, 0x45	; 69
    262c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	f8 01       	movw	r30, r16
    2636:	80 83       	st	Z, r24
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	a2 83       	std	Z+2, r26	; 0x02
    263c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    263e:	fe 01       	movw	r30, r28
    2640:	e3 5b       	subi	r30, 0xB3	; 179
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	60 81       	ld	r22, Z
    2646:	71 81       	ldd	r23, Z+1	; 0x01
    2648:	82 81       	ldd	r24, Z+2	; 0x02
    264a:	93 81       	ldd	r25, Z+3	; 0x03
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e8       	ldi	r20, 0x80	; 128
    2652:	5f e3       	ldi	r21, 0x3F	; 63
    2654:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2658:	88 23       	and	r24, r24
    265a:	44 f4       	brge	.+16     	; 0x266c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    265c:	fe 01       	movw	r30, r28
    265e:	e5 5b       	subi	r30, 0xB5	; 181
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	91 83       	std	Z+1, r25	; 0x01
    2668:	80 83       	st	Z, r24
    266a:	64 c0       	rjmp	.+200    	; 0x2734 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    266c:	fe 01       	movw	r30, r28
    266e:	e3 5b       	subi	r30, 0xB3	; 179
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	60 81       	ld	r22, Z
    2674:	71 81       	ldd	r23, Z+1	; 0x01
    2676:	82 81       	ldd	r24, Z+2	; 0x02
    2678:	93 81       	ldd	r25, Z+3	; 0x03
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	3f ef       	ldi	r19, 0xFF	; 255
    267e:	4f e7       	ldi	r20, 0x7F	; 127
    2680:	57 e4       	ldi	r21, 0x47	; 71
    2682:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2686:	18 16       	cp	r1, r24
    2688:	0c f0       	brlt	.+2      	; 0x268c <LCD_displayCharacter+0x22e>
    268a:	43 c0       	rjmp	.+134    	; 0x2712 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268c:	fe 01       	movw	r30, r28
    268e:	ef 5a       	subi	r30, 0xAF	; 175
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	60 81       	ld	r22, Z
    2694:	71 81       	ldd	r23, Z+1	; 0x01
    2696:	82 81       	ldd	r24, Z+2	; 0x02
    2698:	93 81       	ldd	r25, Z+3	; 0x03
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e2       	ldi	r20, 0x20	; 32
    26a0:	51 e4       	ldi	r21, 0x41	; 65
    26a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	8e 01       	movw	r16, r28
    26ac:	05 5b       	subi	r16, 0xB5	; 181
    26ae:	1f 4f       	sbci	r17, 0xFF	; 255
    26b0:	bc 01       	movw	r22, r24
    26b2:	cd 01       	movw	r24, r26
    26b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	f8 01       	movw	r30, r16
    26be:	91 83       	std	Z+1, r25	; 0x01
    26c0:	80 83       	st	Z, r24
    26c2:	1f c0       	rjmp	.+62     	; 0x2702 <LCD_displayCharacter+0x2a4>
    26c4:	fe 01       	movw	r30, r28
    26c6:	e7 5b       	subi	r30, 0xB7	; 183
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 e9       	ldi	r24, 0x90	; 144
    26cc:	91 e0       	ldi	r25, 0x01	; 1
    26ce:	91 83       	std	Z+1, r25	; 0x01
    26d0:	80 83       	st	Z, r24
    26d2:	fe 01       	movw	r30, r28
    26d4:	e7 5b       	subi	r30, 0xB7	; 183
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	80 81       	ld	r24, Z
    26da:	91 81       	ldd	r25, Z+1	; 0x01
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_displayCharacter+0x27e>
    26e0:	fe 01       	movw	r30, r28
    26e2:	e7 5b       	subi	r30, 0xB7	; 183
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ea:	de 01       	movw	r26, r28
    26ec:	a5 5b       	subi	r26, 0xB5	; 181
    26ee:	bf 4f       	sbci	r27, 0xFF	; 255
    26f0:	fe 01       	movw	r30, r28
    26f2:	e5 5b       	subi	r30, 0xB5	; 181
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	11 96       	adiw	r26, 0x01	; 1
    26fe:	9c 93       	st	X, r25
    2700:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2702:	fe 01       	movw	r30, r28
    2704:	e5 5b       	subi	r30, 0xB5	; 181
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	80 81       	ld	r24, Z
    270a:	91 81       	ldd	r25, Z+1	; 0x01
    270c:	00 97       	sbiw	r24, 0x00	; 0
    270e:	d1 f6       	brne	.-76     	; 0x26c4 <LCD_displayCharacter+0x266>
    2710:	27 c0       	rjmp	.+78     	; 0x2760 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2712:	8e 01       	movw	r16, r28
    2714:	05 5b       	subi	r16, 0xB5	; 181
    2716:	1f 4f       	sbci	r17, 0xFF	; 255
    2718:	fe 01       	movw	r30, r28
    271a:	e3 5b       	subi	r30, 0xB3	; 179
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	f8 01       	movw	r30, r16
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	80 83       	st	Z, r24
    2734:	de 01       	movw	r26, r28
    2736:	a9 5b       	subi	r26, 0xB9	; 185
    2738:	bf 4f       	sbci	r27, 0xFF	; 255
    273a:	fe 01       	movw	r30, r28
    273c:	e5 5b       	subi	r30, 0xB5	; 181
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	80 81       	ld	r24, Z
    2742:	91 81       	ldd	r25, Z+1	; 0x01
    2744:	8d 93       	st	X+, r24
    2746:	9c 93       	st	X, r25
    2748:	fe 01       	movw	r30, r28
    274a:	e9 5b       	subi	r30, 0xB9	; 185
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	80 81       	ld	r24, Z
    2750:	91 81       	ldd	r25, Z+1	; 0x01
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <LCD_displayCharacter+0x2f4>
    2756:	fe 01       	movw	r30, r28
    2758:	e9 5b       	subi	r30, 0xB9	; 185
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2760:	fe 01       	movw	r30, r28
    2762:	ed 59       	subi	r30, 0x9D	; 157
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	80 81       	ld	r24, Z
    2768:	88 2f       	mov	r24, r24
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	80 71       	andi	r24, 0x10	; 16
    276e:	90 70       	andi	r25, 0x00	; 0
    2770:	95 95       	asr	r25
    2772:	87 95       	ror	r24
    2774:	95 95       	asr	r25
    2776:	87 95       	ror	r24
    2778:	95 95       	asr	r25
    277a:	87 95       	ror	r24
    277c:	95 95       	asr	r25
    277e:	87 95       	ror	r24
    2780:	98 2f       	mov	r25, r24
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	63 e0       	ldi	r22, 0x03	; 3
    2786:	49 2f       	mov	r20, r25
    2788:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    278c:	fe 01       	movw	r30, r28
    278e:	ed 59       	subi	r30, 0x9D	; 157
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	80 81       	ld	r24, Z
    2794:	88 2f       	mov	r24, r24
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	80 72       	andi	r24, 0x20	; 32
    279a:	90 70       	andi	r25, 0x00	; 0
    279c:	95 95       	asr	r25
    279e:	87 95       	ror	r24
    27a0:	95 95       	asr	r25
    27a2:	87 95       	ror	r24
    27a4:	95 95       	asr	r25
    27a6:	87 95       	ror	r24
    27a8:	95 95       	asr	r25
    27aa:	87 95       	ror	r24
    27ac:	95 95       	asr	r25
    27ae:	87 95       	ror	r24
    27b0:	98 2f       	mov	r25, r24
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	64 e0       	ldi	r22, 0x04	; 4
    27b6:	49 2f       	mov	r20, r25
    27b8:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    27bc:	fe 01       	movw	r30, r28
    27be:	ed 59       	subi	r30, 0x9D	; 157
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	88 2f       	mov	r24, r24
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	80 74       	andi	r24, 0x40	; 64
    27ca:	90 70       	andi	r25, 0x00	; 0
    27cc:	08 2e       	mov	r0, r24
    27ce:	89 2f       	mov	r24, r25
    27d0:	00 0c       	add	r0, r0
    27d2:	88 1f       	adc	r24, r24
    27d4:	99 0b       	sbc	r25, r25
    27d6:	00 0c       	add	r0, r0
    27d8:	88 1f       	adc	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	98 2f       	mov	r25, r24
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	65 e0       	ldi	r22, 0x05	; 5
    27e2:	49 2f       	mov	r20, r25
    27e4:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    27e8:	fe 01       	movw	r30, r28
    27ea:	ed 59       	subi	r30, 0x9D	; 157
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 81       	ld	r24, Z
    27f0:	98 2f       	mov	r25, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	99 27       	eor	r25, r25
    27f6:	99 1f       	adc	r25, r25
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	66 e0       	ldi	r22, 0x06	; 6
    27fc:	49 2f       	mov	r20, r25
    27fe:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
    2802:	fe 01       	movw	r30, r28
    2804:	ed 5b       	subi	r30, 0xBD	; 189
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	a0 e8       	ldi	r26, 0x80	; 128
    280e:	bf e3       	ldi	r27, 0x3F	; 63
    2810:	80 83       	st	Z, r24
    2812:	91 83       	std	Z+1, r25	; 0x01
    2814:	a2 83       	std	Z+2, r26	; 0x02
    2816:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2818:	8e 01       	movw	r16, r28
    281a:	01 5c       	subi	r16, 0xC1	; 193
    281c:	1f 4f       	sbci	r17, 0xFF	; 255
    281e:	fe 01       	movw	r30, r28
    2820:	ed 5b       	subi	r30, 0xBD	; 189
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	60 81       	ld	r22, Z
    2826:	71 81       	ldd	r23, Z+1	; 0x01
    2828:	82 81       	ldd	r24, Z+2	; 0x02
    282a:	93 81       	ldd	r25, Z+3	; 0x03
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4a e7       	ldi	r20, 0x7A	; 122
    2832:	55 e4       	ldi	r21, 0x45	; 69
    2834:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	f8 01       	movw	r30, r16
    283e:	80 83       	st	Z, r24
    2840:	91 83       	std	Z+1, r25	; 0x01
    2842:	a2 83       	std	Z+2, r26	; 0x02
    2844:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2846:	fe 01       	movw	r30, r28
    2848:	ff 96       	adiw	r30, 0x3f	; 63
    284a:	60 81       	ld	r22, Z
    284c:	71 81       	ldd	r23, Z+1	; 0x01
    284e:	82 81       	ldd	r24, Z+2	; 0x02
    2850:	93 81       	ldd	r25, Z+3	; 0x03
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e8       	ldi	r20, 0x80	; 128
    2858:	5f e3       	ldi	r21, 0x3F	; 63
    285a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    285e:	88 23       	and	r24, r24
    2860:	2c f4       	brge	.+10     	; 0x286c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	9e af       	std	Y+62, r25	; 0x3e
    2868:	8d af       	std	Y+61, r24	; 0x3d
    286a:	46 c0       	rjmp	.+140    	; 0x28f8 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    286c:	fe 01       	movw	r30, r28
    286e:	ff 96       	adiw	r30, 0x3f	; 63
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	3f ef       	ldi	r19, 0xFF	; 255
    287c:	4f e7       	ldi	r20, 0x7F	; 127
    287e:	57 e4       	ldi	r21, 0x47	; 71
    2880:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2884:	18 16       	cp	r1, r24
    2886:	64 f5       	brge	.+88     	; 0x28e0 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2888:	fe 01       	movw	r30, r28
    288a:	ed 5b       	subi	r30, 0xBD	; 189
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	60 81       	ld	r22, Z
    2890:	71 81       	ldd	r23, Z+1	; 0x01
    2892:	82 81       	ldd	r24, Z+2	; 0x02
    2894:	93 81       	ldd	r25, Z+3	; 0x03
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e2       	ldi	r20, 0x20	; 32
    289c:	51 e4       	ldi	r21, 0x41	; 65
    289e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	bc 01       	movw	r22, r24
    28a8:	cd 01       	movw	r24, r26
    28aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	9e af       	std	Y+62, r25	; 0x3e
    28b4:	8d af       	std	Y+61, r24	; 0x3d
    28b6:	0f c0       	rjmp	.+30     	; 0x28d6 <LCD_displayCharacter+0x478>
    28b8:	80 e9       	ldi	r24, 0x90	; 144
    28ba:	91 e0       	ldi	r25, 0x01	; 1
    28bc:	9c af       	std	Y+60, r25	; 0x3c
    28be:	8b af       	std	Y+59, r24	; 0x3b
    28c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    28c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <LCD_displayCharacter+0x466>
    28c8:	9c af       	std	Y+60, r25	; 0x3c
    28ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    28ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	9e af       	std	Y+62, r25	; 0x3e
    28d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    28d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	69 f7       	brne	.-38     	; 0x28b8 <LCD_displayCharacter+0x45a>
    28de:	16 c0       	rjmp	.+44     	; 0x290c <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e0:	fe 01       	movw	r30, r28
    28e2:	ff 96       	adiw	r30, 0x3f	; 63
    28e4:	60 81       	ld	r22, Z
    28e6:	71 81       	ldd	r23, Z+1	; 0x01
    28e8:	82 81       	ldd	r24, Z+2	; 0x02
    28ea:	93 81       	ldd	r25, Z+3	; 0x03
    28ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9e af       	std	Y+62, r25	; 0x3e
    28f6:	8d af       	std	Y+61, r24	; 0x3d
    28f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    28fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    28fc:	9a af       	std	Y+58, r25	; 0x3a
    28fe:	89 af       	std	Y+57, r24	; 0x39
    2900:	89 ad       	ldd	r24, Y+57	; 0x39
    2902:	9a ad       	ldd	r25, Y+58	; 0x3a
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <LCD_displayCharacter+0x4a6>
    2908:	9a af       	std	Y+58, r25	; 0x3a
    290a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	62 e0       	ldi	r22, 0x02	; 2
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	a0 e8       	ldi	r26, 0x80	; 128
    291c:	bf e3       	ldi	r27, 0x3F	; 63
    291e:	8d ab       	std	Y+53, r24	; 0x35
    2920:	9e ab       	std	Y+54, r25	; 0x36
    2922:	af ab       	std	Y+55, r26	; 0x37
    2924:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2926:	6d a9       	ldd	r22, Y+53	; 0x35
    2928:	7e a9       	ldd	r23, Y+54	; 0x36
    292a:	8f a9       	ldd	r24, Y+55	; 0x37
    292c:	98 ad       	ldd	r25, Y+56	; 0x38
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	4a e7       	ldi	r20, 0x7A	; 122
    2934:	55 e4       	ldi	r21, 0x45	; 69
    2936:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	89 ab       	std	Y+49, r24	; 0x31
    2940:	9a ab       	std	Y+50, r25	; 0x32
    2942:	ab ab       	std	Y+51, r26	; 0x33
    2944:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2946:	69 a9       	ldd	r22, Y+49	; 0x31
    2948:	7a a9       	ldd	r23, Y+50	; 0x32
    294a:	8b a9       	ldd	r24, Y+51	; 0x33
    294c:	9c a9       	ldd	r25, Y+52	; 0x34
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e8       	ldi	r20, 0x80	; 128
    2954:	5f e3       	ldi	r21, 0x3F	; 63
    2956:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    295a:	88 23       	and	r24, r24
    295c:	2c f4       	brge	.+10     	; 0x2968 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	98 ab       	std	Y+48, r25	; 0x30
    2964:	8f a7       	std	Y+47, r24	; 0x2f
    2966:	3f c0       	rjmp	.+126    	; 0x29e6 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2968:	69 a9       	ldd	r22, Y+49	; 0x31
    296a:	7a a9       	ldd	r23, Y+50	; 0x32
    296c:	8b a9       	ldd	r24, Y+51	; 0x33
    296e:	9c a9       	ldd	r25, Y+52	; 0x34
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	3f ef       	ldi	r19, 0xFF	; 255
    2974:	4f e7       	ldi	r20, 0x7F	; 127
    2976:	57 e4       	ldi	r21, 0x47	; 71
    2978:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    297c:	18 16       	cp	r1, r24
    297e:	4c f5       	brge	.+82     	; 0x29d2 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2980:	6d a9       	ldd	r22, Y+53	; 0x35
    2982:	7e a9       	ldd	r23, Y+54	; 0x36
    2984:	8f a9       	ldd	r24, Y+55	; 0x37
    2986:	98 ad       	ldd	r25, Y+56	; 0x38
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e2       	ldi	r20, 0x20	; 32
    298e:	51 e4       	ldi	r21, 0x41	; 65
    2990:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	bc 01       	movw	r22, r24
    299a:	cd 01       	movw	r24, r26
    299c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	98 ab       	std	Y+48, r25	; 0x30
    29a6:	8f a7       	std	Y+47, r24	; 0x2f
    29a8:	0f c0       	rjmp	.+30     	; 0x29c8 <LCD_displayCharacter+0x56a>
    29aa:	80 e9       	ldi	r24, 0x90	; 144
    29ac:	91 e0       	ldi	r25, 0x01	; 1
    29ae:	9e a7       	std	Y+46, r25	; 0x2e
    29b0:	8d a7       	std	Y+45, r24	; 0x2d
    29b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    29b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <LCD_displayCharacter+0x558>
    29ba:	9e a7       	std	Y+46, r25	; 0x2e
    29bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29be:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c0:	98 a9       	ldd	r25, Y+48	; 0x30
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	98 ab       	std	Y+48, r25	; 0x30
    29c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ca:	98 a9       	ldd	r25, Y+48	; 0x30
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	69 f7       	brne	.-38     	; 0x29aa <LCD_displayCharacter+0x54c>
    29d0:	14 c0       	rjmp	.+40     	; 0x29fa <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d2:	69 a9       	ldd	r22, Y+49	; 0x31
    29d4:	7a a9       	ldd	r23, Y+50	; 0x32
    29d6:	8b a9       	ldd	r24, Y+51	; 0x33
    29d8:	9c a9       	ldd	r25, Y+52	; 0x34
    29da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	98 ab       	std	Y+48, r25	; 0x30
    29e4:	8f a7       	std	Y+47, r24	; 0x2f
    29e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    29e8:	98 a9       	ldd	r25, Y+48	; 0x30
    29ea:	9c a7       	std	Y+44, r25	; 0x2c
    29ec:	8b a7       	std	Y+43, r24	; 0x2b
    29ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    29f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	f1 f7       	brne	.-4      	; 0x29f2 <LCD_displayCharacter+0x594>
    29f6:	9c a7       	std	Y+44, r25	; 0x2c
    29f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	62 e0       	ldi	r22, 0x02	; 2
    29fe:	41 e0       	ldi	r20, 0x01	; 1
    2a00:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	a0 e8       	ldi	r26, 0x80	; 128
    2a0a:	bf e3       	ldi	r27, 0x3F	; 63
    2a0c:	8f a3       	std	Y+39, r24	; 0x27
    2a0e:	98 a7       	std	Y+40, r25	; 0x28
    2a10:	a9 a7       	std	Y+41, r26	; 0x29
    2a12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a14:	6f a1       	ldd	r22, Y+39	; 0x27
    2a16:	78 a5       	ldd	r23, Y+40	; 0x28
    2a18:	89 a5       	ldd	r24, Y+41	; 0x29
    2a1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	4a e7       	ldi	r20, 0x7A	; 122
    2a22:	55 e4       	ldi	r21, 0x45	; 69
    2a24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	8b a3       	std	Y+35, r24	; 0x23
    2a2e:	9c a3       	std	Y+36, r25	; 0x24
    2a30:	ad a3       	std	Y+37, r26	; 0x25
    2a32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a34:	6b a1       	ldd	r22, Y+35	; 0x23
    2a36:	7c a1       	ldd	r23, Y+36	; 0x24
    2a38:	8d a1       	ldd	r24, Y+37	; 0x25
    2a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e8       	ldi	r20, 0x80	; 128
    2a42:	5f e3       	ldi	r21, 0x3F	; 63
    2a44:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a48:	88 23       	and	r24, r24
    2a4a:	2c f4       	brge	.+10     	; 0x2a56 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	9a a3       	std	Y+34, r25	; 0x22
    2a52:	89 a3       	std	Y+33, r24	; 0x21
    2a54:	3f c0       	rjmp	.+126    	; 0x2ad4 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2a56:	6b a1       	ldd	r22, Y+35	; 0x23
    2a58:	7c a1       	ldd	r23, Y+36	; 0x24
    2a5a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a5c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	3f ef       	ldi	r19, 0xFF	; 255
    2a62:	4f e7       	ldi	r20, 0x7F	; 127
    2a64:	57 e4       	ldi	r21, 0x47	; 71
    2a66:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a6a:	18 16       	cp	r1, r24
    2a6c:	4c f5       	brge	.+82     	; 0x2ac0 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6e:	6f a1       	ldd	r22, Y+39	; 0x27
    2a70:	78 a5       	ldd	r23, Y+40	; 0x28
    2a72:	89 a5       	ldd	r24, Y+41	; 0x29
    2a74:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e2       	ldi	r20, 0x20	; 32
    2a7c:	51 e4       	ldi	r21, 0x41	; 65
    2a7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	bc 01       	movw	r22, r24
    2a88:	cd 01       	movw	r24, r26
    2a8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	9a a3       	std	Y+34, r25	; 0x22
    2a94:	89 a3       	std	Y+33, r24	; 0x21
    2a96:	0f c0       	rjmp	.+30     	; 0x2ab6 <LCD_displayCharacter+0x658>
    2a98:	80 e9       	ldi	r24, 0x90	; 144
    2a9a:	91 e0       	ldi	r25, 0x01	; 1
    2a9c:	98 a3       	std	Y+32, r25	; 0x20
    2a9e:	8f 8f       	std	Y+31, r24	; 0x1f
    2aa0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aa2:	98 a1       	ldd	r25, Y+32	; 0x20
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	f1 f7       	brne	.-4      	; 0x2aa4 <LCD_displayCharacter+0x646>
    2aa8:	98 a3       	std	Y+32, r25	; 0x20
    2aaa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aac:	89 a1       	ldd	r24, Y+33	; 0x21
    2aae:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab0:	01 97       	sbiw	r24, 0x01	; 1
    2ab2:	9a a3       	std	Y+34, r25	; 0x22
    2ab4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	69 f7       	brne	.-38     	; 0x2a98 <LCD_displayCharacter+0x63a>
    2abe:	14 c0       	rjmp	.+40     	; 0x2ae8 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ac2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	9a a3       	std	Y+34, r25	; 0x22
    2ad2:	89 a3       	std	Y+33, r24	; 0x21
    2ad4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ad8:	9e 8f       	std	Y+30, r25	; 0x1e
    2ada:	8d 8f       	std	Y+29, r24	; 0x1d
    2adc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ade:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	f1 f7       	brne	.-4      	; 0x2ae0 <LCD_displayCharacter+0x682>
    2ae4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ae6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2ae8:	fe 01       	movw	r30, r28
    2aea:	ed 59       	subi	r30, 0x9D	; 157
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	80 81       	ld	r24, Z
    2af0:	98 2f       	mov	r25, r24
    2af2:	91 70       	andi	r25, 0x01	; 1
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	63 e0       	ldi	r22, 0x03	; 3
    2af8:	49 2f       	mov	r20, r25
    2afa:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2afe:	fe 01       	movw	r30, r28
    2b00:	ed 59       	subi	r30, 0x9D	; 157
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	80 81       	ld	r24, Z
    2b06:	88 2f       	mov	r24, r24
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	82 70       	andi	r24, 0x02	; 2
    2b0c:	90 70       	andi	r25, 0x00	; 0
    2b0e:	95 95       	asr	r25
    2b10:	87 95       	ror	r24
    2b12:	98 2f       	mov	r25, r24
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	64 e0       	ldi	r22, 0x04	; 4
    2b18:	49 2f       	mov	r20, r25
    2b1a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2b1e:	fe 01       	movw	r30, r28
    2b20:	ed 59       	subi	r30, 0x9D	; 157
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	80 81       	ld	r24, Z
    2b26:	88 2f       	mov	r24, r24
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	84 70       	andi	r24, 0x04	; 4
    2b2c:	90 70       	andi	r25, 0x00	; 0
    2b2e:	95 95       	asr	r25
    2b30:	87 95       	ror	r24
    2b32:	95 95       	asr	r25
    2b34:	87 95       	ror	r24
    2b36:	98 2f       	mov	r25, r24
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	65 e0       	ldi	r22, 0x05	; 5
    2b3c:	49 2f       	mov	r20, r25
    2b3e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2b42:	fe 01       	movw	r30, r28
    2b44:	ed 59       	subi	r30, 0x9D	; 157
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	80 81       	ld	r24, Z
    2b4a:	88 2f       	mov	r24, r24
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	88 70       	andi	r24, 0x08	; 8
    2b50:	90 70       	andi	r25, 0x00	; 0
    2b52:	95 95       	asr	r25
    2b54:	87 95       	ror	r24
    2b56:	95 95       	asr	r25
    2b58:	87 95       	ror	r24
    2b5a:	95 95       	asr	r25
    2b5c:	87 95       	ror	r24
    2b5e:	98 2f       	mov	r25, r24
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	66 e0       	ldi	r22, 0x06	; 6
    2b64:	49 2f       	mov	r20, r25
    2b66:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	a0 e8       	ldi	r26, 0x80	; 128
    2b70:	bf e3       	ldi	r27, 0x3F	; 63
    2b72:	89 8f       	std	Y+25, r24	; 0x19
    2b74:	9a 8f       	std	Y+26, r25	; 0x1a
    2b76:	ab 8f       	std	Y+27, r26	; 0x1b
    2b78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	4a e7       	ldi	r20, 0x7A	; 122
    2b88:	55 e4       	ldi	r21, 0x45	; 69
    2b8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	8d 8b       	std	Y+21, r24	; 0x15
    2b94:	9e 8b       	std	Y+22, r25	; 0x16
    2b96:	af 8b       	std	Y+23, r26	; 0x17
    2b98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e8       	ldi	r20, 0x80	; 128
    2ba8:	5f e3       	ldi	r21, 0x3F	; 63
    2baa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bae:	88 23       	and	r24, r24
    2bb0:	2c f4       	brge	.+10     	; 0x2bbc <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	9c 8b       	std	Y+20, r25	; 0x14
    2bb8:	8b 8b       	std	Y+19, r24	; 0x13
    2bba:	3f c0       	rjmp	.+126    	; 0x2c3a <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2bbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	3f ef       	ldi	r19, 0xFF	; 255
    2bc8:	4f e7       	ldi	r20, 0x7F	; 127
    2bca:	57 e4       	ldi	r21, 0x47	; 71
    2bcc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bd0:	18 16       	cp	r1, r24
    2bd2:	4c f5       	brge	.+82     	; 0x2c26 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd4:	69 8d       	ldd	r22, Y+25	; 0x19
    2bd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e2       	ldi	r20, 0x20	; 32
    2be2:	51 e4       	ldi	r21, 0x41	; 65
    2be4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	bc 01       	movw	r22, r24
    2bee:	cd 01       	movw	r24, r26
    2bf0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	9c 8b       	std	Y+20, r25	; 0x14
    2bfa:	8b 8b       	std	Y+19, r24	; 0x13
    2bfc:	0f c0       	rjmp	.+30     	; 0x2c1c <LCD_displayCharacter+0x7be>
    2bfe:	80 e9       	ldi	r24, 0x90	; 144
    2c00:	91 e0       	ldi	r25, 0x01	; 1
    2c02:	9a 8b       	std	Y+18, r25	; 0x12
    2c04:	89 8b       	std	Y+17, r24	; 0x11
    2c06:	89 89       	ldd	r24, Y+17	; 0x11
    2c08:	9a 89       	ldd	r25, Y+18	; 0x12
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <LCD_displayCharacter+0x7ac>
    2c0e:	9a 8b       	std	Y+18, r25	; 0x12
    2c10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c12:	8b 89       	ldd	r24, Y+19	; 0x13
    2c14:	9c 89       	ldd	r25, Y+20	; 0x14
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	9c 8b       	std	Y+20, r25	; 0x14
    2c1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c20:	00 97       	sbiw	r24, 0x00	; 0
    2c22:	69 f7       	brne	.-38     	; 0x2bfe <LCD_displayCharacter+0x7a0>
    2c24:	14 c0       	rjmp	.+40     	; 0x2c4e <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c26:	6d 89       	ldd	r22, Y+21	; 0x15
    2c28:	7e 89       	ldd	r23, Y+22	; 0x16
    2c2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	9c 8b       	std	Y+20, r25	; 0x14
    2c38:	8b 8b       	std	Y+19, r24	; 0x13
    2c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c3e:	98 8b       	std	Y+16, r25	; 0x10
    2c40:	8f 87       	std	Y+15, r24	; 0x0f
    2c42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c44:	98 89       	ldd	r25, Y+16	; 0x10
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	f1 f7       	brne	.-4      	; 0x2c46 <LCD_displayCharacter+0x7e8>
    2c4a:	98 8b       	std	Y+16, r25	; 0x10
    2c4c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	62 e0       	ldi	r22, 0x02	; 2
    2c52:	40 e0       	ldi	r20, 0x00	; 0
    2c54:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	a0 e8       	ldi	r26, 0x80	; 128
    2c5e:	bf e3       	ldi	r27, 0x3F	; 63
    2c60:	8b 87       	std	Y+11, r24	; 0x0b
    2c62:	9c 87       	std	Y+12, r25	; 0x0c
    2c64:	ad 87       	std	Y+13, r26	; 0x0d
    2c66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	4a e7       	ldi	r20, 0x7A	; 122
    2c76:	55 e4       	ldi	r21, 0x45	; 69
    2c78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c7c:	dc 01       	movw	r26, r24
    2c7e:	cb 01       	movw	r24, r22
    2c80:	8f 83       	std	Y+7, r24	; 0x07
    2c82:	98 87       	std	Y+8, r25	; 0x08
    2c84:	a9 87       	std	Y+9, r26	; 0x09
    2c86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c88:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8a:	78 85       	ldd	r23, Y+8	; 0x08
    2c8c:	89 85       	ldd	r24, Y+9	; 0x09
    2c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e8       	ldi	r20, 0x80	; 128
    2c96:	5f e3       	ldi	r21, 0x3F	; 63
    2c98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c9c:	88 23       	and	r24, r24
    2c9e:	2c f4       	brge	.+10     	; 0x2caa <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	9e 83       	std	Y+6, r25	; 0x06
    2ca6:	8d 83       	std	Y+5, r24	; 0x05
    2ca8:	3f c0       	rjmp	.+126    	; 0x2d28 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2caa:	6f 81       	ldd	r22, Y+7	; 0x07
    2cac:	78 85       	ldd	r23, Y+8	; 0x08
    2cae:	89 85       	ldd	r24, Y+9	; 0x09
    2cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	3f ef       	ldi	r19, 0xFF	; 255
    2cb6:	4f e7       	ldi	r20, 0x7F	; 127
    2cb8:	57 e4       	ldi	r21, 0x47	; 71
    2cba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2cbe:	18 16       	cp	r1, r24
    2cc0:	4c f5       	brge	.+82     	; 0x2d14 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e2       	ldi	r20, 0x20	; 32
    2cd0:	51 e4       	ldi	r21, 0x41	; 65
    2cd2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	bc 01       	movw	r22, r24
    2cdc:	cd 01       	movw	r24, r26
    2cde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	9e 83       	std	Y+6, r25	; 0x06
    2ce8:	8d 83       	std	Y+5, r24	; 0x05
    2cea:	0f c0       	rjmp	.+30     	; 0x2d0a <LCD_displayCharacter+0x8ac>
    2cec:	80 e9       	ldi	r24, 0x90	; 144
    2cee:	91 e0       	ldi	r25, 0x01	; 1
    2cf0:	9c 83       	std	Y+4, r25	; 0x04
    2cf2:	8b 83       	std	Y+3, r24	; 0x03
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	f1 f7       	brne	.-4      	; 0x2cf8 <LCD_displayCharacter+0x89a>
    2cfc:	9c 83       	std	Y+4, r25	; 0x04
    2cfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d00:	8d 81       	ldd	r24, Y+5	; 0x05
    2d02:	9e 81       	ldd	r25, Y+6	; 0x06
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	9e 83       	std	Y+6, r25	; 0x06
    2d08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0e:	00 97       	sbiw	r24, 0x00	; 0
    2d10:	69 f7       	brne	.-38     	; 0x2cec <LCD_displayCharacter+0x88e>
    2d12:	14 c0       	rjmp	.+40     	; 0x2d3c <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d14:	6f 81       	ldd	r22, Y+7	; 0x07
    2d16:	78 85       	ldd	r23, Y+8	; 0x08
    2d18:	89 85       	ldd	r24, Y+9	; 0x09
    2d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	9e 83       	std	Y+6, r25	; 0x06
    2d26:	8d 83       	std	Y+5, r24	; 0x05
    2d28:	8d 81       	ldd	r24, Y+5	; 0x05
    2d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2c:	9a 83       	std	Y+2, r25	; 0x02
    2d2e:	89 83       	std	Y+1, r24	; 0x01
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	9a 81       	ldd	r25, Y+2	; 0x02
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	f1 f7       	brne	.-4      	; 0x2d34 <LCD_displayCharacter+0x8d6>
    2d38:	9a 83       	std	Y+2, r25	; 0x02
    2d3a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2d3c:	cd 59       	subi	r28, 0x9D	; 157
    2d3e:	df 4f       	sbci	r29, 0xFF	; 255
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	de bf       	out	0x3e, r29	; 62
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	1f 91       	pop	r17
    2d50:	0f 91       	pop	r16
    2d52:	08 95       	ret

00002d54 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <LCD_displayString+0x6>
    2d5a:	0f 92       	push	r0
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    2d60:	9b 83       	std	Y+3, r25	; 0x03
    2d62:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d64:	19 82       	std	Y+1, r1	; 0x01
    2d66:	0e c0       	rjmp	.+28     	; 0x2d84 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	28 2f       	mov	r18, r24
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	9b 81       	ldd	r25, Y+3	; 0x03
    2d72:	fc 01       	movw	r30, r24
    2d74:	e2 0f       	add	r30, r18
    2d76:	f3 1f       	adc	r31, r19
    2d78:	80 81       	ld	r24, Z
    2d7a:	0e 94 2f 12 	call	0x245e	; 0x245e <LCD_displayCharacter>
		i++;
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	8f 5f       	subi	r24, 0xFF	; 255
    2d82:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	28 2f       	mov	r18, r24
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8e:	fc 01       	movw	r30, r24
    2d90:	e2 0f       	add	r30, r18
    2d92:	f3 1f       	adc	r31, r19
    2d94:	80 81       	ld	r24, Z
    2d96:	88 23       	and	r24, r24
    2d98:	39 f7       	brne	.-50     	; 0x2d68 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	00 d0       	rcall	.+0      	; 0x2dac <LCD_moveCursor+0x6>
    2dac:	00 d0       	rcall	.+0      	; 0x2dae <LCD_moveCursor+0x8>
    2dae:	0f 92       	push	r0
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	8a 83       	std	Y+2, r24	; 0x02
    2db6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2db8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dba:	28 2f       	mov	r18, r24
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	3d 83       	std	Y+5, r19	; 0x05
    2dc0:	2c 83       	std	Y+4, r18	; 0x04
    2dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc4:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc6:	81 30       	cpi	r24, 0x01	; 1
    2dc8:	91 05       	cpc	r25, r1
    2dca:	c1 f0       	breq	.+48     	; 0x2dfc <LCD_moveCursor+0x56>
    2dcc:	2c 81       	ldd	r18, Y+4	; 0x04
    2dce:	3d 81       	ldd	r19, Y+5	; 0x05
    2dd0:	22 30       	cpi	r18, 0x02	; 2
    2dd2:	31 05       	cpc	r19, r1
    2dd4:	2c f4       	brge	.+10     	; 0x2de0 <LCD_moveCursor+0x3a>
    2dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    2dda:	00 97       	sbiw	r24, 0x00	; 0
    2ddc:	61 f0       	breq	.+24     	; 0x2df6 <LCD_moveCursor+0x50>
    2dde:	19 c0       	rjmp	.+50     	; 0x2e12 <LCD_moveCursor+0x6c>
    2de0:	2c 81       	ldd	r18, Y+4	; 0x04
    2de2:	3d 81       	ldd	r19, Y+5	; 0x05
    2de4:	22 30       	cpi	r18, 0x02	; 2
    2de6:	31 05       	cpc	r19, r1
    2de8:	69 f0       	breq	.+26     	; 0x2e04 <LCD_moveCursor+0x5e>
    2dea:	8c 81       	ldd	r24, Y+4	; 0x04
    2dec:	9d 81       	ldd	r25, Y+5	; 0x05
    2dee:	83 30       	cpi	r24, 0x03	; 3
    2df0:	91 05       	cpc	r25, r1
    2df2:	61 f0       	breq	.+24     	; 0x2e0c <LCD_moveCursor+0x66>
    2df4:	0e c0       	rjmp	.+28     	; 0x2e12 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2df6:	8b 81       	ldd	r24, Y+3	; 0x03
    2df8:	89 83       	std	Y+1, r24	; 0x01
    2dfa:	0b c0       	rjmp	.+22     	; 0x2e12 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	80 5c       	subi	r24, 0xC0	; 192
    2e00:	89 83       	std	Y+1, r24	; 0x01
    2e02:	07 c0       	rjmp	.+14     	; 0x2e12 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	80 5f       	subi	r24, 0xF0	; 240
    2e08:	89 83       	std	Y+1, r24	; 0x01
    2e0a:	03 c0       	rjmp	.+6      	; 0x2e12 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0e:	80 5b       	subi	r24, 0xB0	; 176
    2e10:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	80 68       	ori	r24, 0x80	; 128
    2e16:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_sendCommand>
}
    2e1a:	0f 90       	pop	r0
    2e1c:	0f 90       	pop	r0
    2e1e:	0f 90       	pop	r0
    2e20:	0f 90       	pop	r0
    2e22:	0f 90       	pop	r0
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	08 95       	ret

00002e2a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <LCD_displayStringRowColumn+0x6>
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <LCD_displayStringRowColumn+0x8>
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	89 83       	std	Y+1, r24	; 0x01
    2e38:	6a 83       	std	Y+2, r22	; 0x02
    2e3a:	5c 83       	std	Y+4, r21	; 0x04
    2e3c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	6a 81       	ldd	r22, Y+2	; 0x02
    2e42:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2e46:	8b 81       	ldd	r24, Y+3	; 0x03
    2e48:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4a:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_displayString>
}
    2e4e:	0f 90       	pop	r0
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	08 95       	ret

00002e5c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
    2e64:	62 97       	sbiw	r28, 0x12	; 18
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	de bf       	out	0x3e, r29	; 62
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	cd bf       	out	0x3d, r28	; 61
    2e70:	9a 8b       	std	Y+18, r25	; 0x12
    2e72:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e74:	89 89       	ldd	r24, Y+17	; 0x11
    2e76:	9a 89       	ldd	r25, Y+18	; 0x12
    2e78:	9e 01       	movw	r18, r28
    2e7a:	2f 5f       	subi	r18, 0xFF	; 255
    2e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e7e:	b9 01       	movw	r22, r18
    2e80:	4a e0       	ldi	r20, 0x0A	; 10
    2e82:	50 e0       	ldi	r21, 0x00	; 0
    2e84:	0e 94 9a 21 	call	0x4334	; 0x4334 <itoa>
   LCD_displayString(buff); /* Display the string */
    2e88:	ce 01       	movw	r24, r28
    2e8a:	01 96       	adiw	r24, 0x01	; 1
    2e8c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <LCD_displayString>
}
    2e90:	62 96       	adiw	r28, 0x12	; 18
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	f8 94       	cli
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	cd bf       	out	0x3d, r28	; 61
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	08 95       	ret

00002ea2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2ea2:	df 93       	push	r29
    2ea4:	cf 93       	push	r28
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <LCD_sendCommand>
}
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	08 95       	ret

00002eb6 <LEDS_init>:
#include "led.h"


/*Initializes all Leds (red, green, blue) pins direction.
  Turn off all the Leds*/
void LEDS_init(void){
    2eb6:	df 93       	push	r29
    2eb8:	cf 93       	push	r28
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LEDPORT_ID, LEDPIN1_ID, PIN_OUTPUT);
    2ebe:	82 e0       	ldi	r24, 0x02	; 2
    2ec0:	60 e0       	ldi	r22, 0x00	; 0
    2ec2:	41 e0       	ldi	r20, 0x01	; 1
    2ec4:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LEDPORT_ID, LEDPIN2_ID, PIN_OUTPUT);
    2ec8:	82 e0       	ldi	r24, 0x02	; 2
    2eca:	61 e0       	ldi	r22, 0x01	; 1
    2ecc:	41 e0       	ldi	r20, 0x01	; 1
    2ece:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LEDPORT_ID, LEDPIN3_ID, PIN_OUTPUT);
    2ed2:	82 e0       	ldi	r24, 0x02	; 2
    2ed4:	62 e0       	ldi	r22, 0x02	; 2
    2ed6:	41 e0       	ldi	r20, 0x01	; 1
    2ed8:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>

#if (LOGIC==POSITIVE_LOGIC)
	GPIO_writePin(LEDPORT_ID , LEDPIN1_ID, LOGIC_LOW);
    2edc:	82 e0       	ldi	r24, 0x02	; 2
    2ede:	60 e0       	ldi	r22, 0x00	; 0
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
	GPIO_writePin(LEDPORT_ID , LEDPIN2_ID, LOGIC_LOW);
    2ee6:	82 e0       	ldi	r24, 0x02	; 2
    2ee8:	61 e0       	ldi	r22, 0x01	; 1
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
	GPIO_writePin(LEDPORT_ID , LEDPIN3_ID, LOGIC_LOW);
    2ef0:	82 e0       	ldi	r24, 0x02	; 2
    2ef2:	62 e0       	ldi	r22, 0x02	; 2
    2ef4:	40 e0       	ldi	r20, 0x00	; 0
    2ef6:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
 #else
	GPIO_writePin(LEDPORT_ID , LEDPIN1_ID, LOGIC_HIGH);
	GPIO_writePin(LEDPORT_ID , LEDPIN2_ID, LOGIC_HIGH);
	GPIO_writePin(LEDPORT_ID , LEDPIN3_ID, LOGIC_HIGH);
 #endif
}
    2efa:	cf 91       	pop	r28
    2efc:	df 91       	pop	r29
    2efe:	08 95       	ret

00002f00 <LED_on>:

/*Turns on the specified LED.*/
void LED_on(LED_ID id){
    2f00:	df 93       	push	r29
    2f02:	cf 93       	push	r28
    2f04:	0f 92       	push	r0
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	89 83       	std	Y+1, r24	; 0x01
#if (LOGIC==POSITIVE_LOGIC)
	GPIO_writePin(LEDPORT_ID , id, LOGIC_HIGH);
    2f0c:	82 e0       	ldi	r24, 0x02	; 2
    2f0e:	69 81       	ldd	r22, Y+1	; 0x01
    2f10:	41 e0       	ldi	r20, 0x01	; 1
    2f12:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
 #else
	GPIO_writePin(LEDPORT_ID , id, LOGIC_LOW);
 #endif
}
    2f16:	0f 90       	pop	r0
    2f18:	cf 91       	pop	r28
    2f1a:	df 91       	pop	r29
    2f1c:	08 95       	ret

00002f1e <LED_off>:


/*Turns off the specified LED*/
void LED_off(LED_ID id){
    2f1e:	df 93       	push	r29
    2f20:	cf 93       	push	r28
    2f22:	0f 92       	push	r0
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	89 83       	std	Y+1, r24	; 0x01
#if (LOGIC==POSITIVE_LOGIC)
	GPIO_writePin(LEDPORT_ID , id, LOGIC_LOW);
    2f2a:	82 e0       	ldi	r24, 0x02	; 2
    2f2c:	69 81       	ldd	r22, Y+1	; 0x01
    2f2e:	40 e0       	ldi	r20, 0x00	; 0
    2f30:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <GPIO_writePin>
 #else
	GPIO_writePin(LEDPORT_ID , id, LOGIC_HIGH);
 #endif
}
    2f34:	0f 90       	pop	r0
    2f36:	cf 91       	pop	r28
    2f38:	df 91       	pop	r29
    2f3a:	08 95       	ret

00002f3c <main>:
#include "gpio.h"

void showingHighTempKeyPressed(uint8 key, uint8 cursor);
void showingLowTempKeyPressed(uint8 key, uint8 cursor);
int main(void)
{
    2f3c:	0f 93       	push	r16
    2f3e:	1f 93       	push	r17
    2f40:	df 93       	push	r29
    2f42:	cf 93       	push	r28
    2f44:	cd b7       	in	r28, 0x3d	; 61
    2f46:	de b7       	in	r29, 0x3e	; 62
    2f48:	c3 59       	subi	r28, 0x93	; 147
    2f4a:	d0 40       	sbci	r29, 0x00	; 0
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	de bf       	out	0x3e, r29	; 62
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	cd bf       	out	0x3d, r28	; 61
    uint8 sensorTemp;

    /* Display a welcome message */

    /* Initialization */
    LCD_init();
    2f56:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <LCD_init>
   /* ADC_ConfigType ADC_Configurations = {INTERNAL_VOLT,F_CPU_128};
    	 Enable interrupts by setting I-bit
    	SREG|=(1<<7);
*/
    	/* Initialize ADC driver */
    	ADC_init();
    2f5a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_init>
    DcMotor_Init();
    2f5e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <DcMotor_Init>
    Heater_init();
    2f62:	0e 94 45 0b 	call	0x168a	; 0x168a <Heater_init>
    LEDS_init();
    2f66:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LEDS_init>
    Buzzer_init();
    2f6a:	0e 94 7e 07 	call	0xefc	; 0xefc <Buzzer_init>

    LCD_displayStringRowColumn(0 ,0,"Hello Hello");
    2f6e:	20 e6       	ldi	r18, 0x60	; 96
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	60 e0       	ldi	r22, 0x00	; 0
    2f76:	a9 01       	movw	r20, r18
    2f78:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
       	 LCD_displayStringRowColumn(1 ,0,"Eng. Ziad");
    2f7c:	2c e6       	ldi	r18, 0x6C	; 108
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	60 e0       	ldi	r22, 0x00	; 0
    2f84:	a9 01       	movw	r20, r18
    2f86:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	e7 57       	subi	r30, 0x77	; 119
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	90 e4       	ldi	r25, 0x40	; 64
    2f94:	ac e1       	ldi	r26, 0x1C	; 28
    2f96:	b5 e4       	ldi	r27, 0x45	; 69
    2f98:	80 83       	st	Z, r24
    2f9a:	91 83       	std	Z+1, r25	; 0x01
    2f9c:	a2 83       	std	Z+2, r26	; 0x02
    2f9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa0:	8e 01       	movw	r16, r28
    2fa2:	0b 57       	subi	r16, 0x7B	; 123
    2fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	e7 57       	subi	r30, 0x77	; 119
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	60 81       	ld	r22, Z
    2fae:	71 81       	ldd	r23, Z+1	; 0x01
    2fb0:	82 81       	ldd	r24, Z+2	; 0x02
    2fb2:	93 81       	ldd	r25, Z+3	; 0x03
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	4a e7       	ldi	r20, 0x7A	; 122
    2fba:	55 e4       	ldi	r21, 0x45	; 69
    2fbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	f8 01       	movw	r30, r16
    2fc6:	80 83       	st	Z, r24
    2fc8:	91 83       	std	Z+1, r25	; 0x01
    2fca:	a2 83       	std	Z+2, r26	; 0x02
    2fcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fce:	fe 01       	movw	r30, r28
    2fd0:	eb 57       	subi	r30, 0x7B	; 123
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	60 81       	ld	r22, Z
    2fd6:	71 81       	ldd	r23, Z+1	; 0x01
    2fd8:	82 81       	ldd	r24, Z+2	; 0x02
    2fda:	93 81       	ldd	r25, Z+3	; 0x03
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	40 e8       	ldi	r20, 0x80	; 128
    2fe2:	5f e3       	ldi	r21, 0x3F	; 63
    2fe4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2fe8:	88 23       	and	r24, r24
    2fea:	44 f4       	brge	.+16     	; 0x2ffc <main+0xc0>
		__ticks = 1;
    2fec:	fe 01       	movw	r30, r28
    2fee:	ed 57       	subi	r30, 0x7D	; 125
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	91 83       	std	Z+1, r25	; 0x01
    2ff8:	80 83       	st	Z, r24
    2ffa:	64 c0       	rjmp	.+200    	; 0x30c4 <main+0x188>
	else if (__tmp > 65535)
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	eb 57       	subi	r30, 0x7B	; 123
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	60 81       	ld	r22, Z
    3004:	71 81       	ldd	r23, Z+1	; 0x01
    3006:	82 81       	ldd	r24, Z+2	; 0x02
    3008:	93 81       	ldd	r25, Z+3	; 0x03
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	3f ef       	ldi	r19, 0xFF	; 255
    300e:	4f e7       	ldi	r20, 0x7F	; 127
    3010:	57 e4       	ldi	r21, 0x47	; 71
    3012:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3016:	18 16       	cp	r1, r24
    3018:	0c f0       	brlt	.+2      	; 0x301c <main+0xe0>
    301a:	43 c0       	rjmp	.+134    	; 0x30a2 <main+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301c:	fe 01       	movw	r30, r28
    301e:	e7 57       	subi	r30, 0x77	; 119
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	60 81       	ld	r22, Z
    3024:	71 81       	ldd	r23, Z+1	; 0x01
    3026:	82 81       	ldd	r24, Z+2	; 0x02
    3028:	93 81       	ldd	r25, Z+3	; 0x03
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	40 e2       	ldi	r20, 0x20	; 32
    3030:	51 e4       	ldi	r21, 0x41	; 65
    3032:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	8e 01       	movw	r16, r28
    303c:	0d 57       	subi	r16, 0x7D	; 125
    303e:	1f 4f       	sbci	r17, 0xFF	; 255
    3040:	bc 01       	movw	r22, r24
    3042:	cd 01       	movw	r24, r26
    3044:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	f8 01       	movw	r30, r16
    304e:	91 83       	std	Z+1, r25	; 0x01
    3050:	80 83       	st	Z, r24
    3052:	1f c0       	rjmp	.+62     	; 0x3092 <main+0x156>
    3054:	fe 01       	movw	r30, r28
    3056:	ef 57       	subi	r30, 0x7F	; 127
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	80 e9       	ldi	r24, 0x90	; 144
    305c:	91 e0       	ldi	r25, 0x01	; 1
    305e:	91 83       	std	Z+1, r25	; 0x01
    3060:	80 83       	st	Z, r24
    3062:	fe 01       	movw	r30, r28
    3064:	ef 57       	subi	r30, 0x7F	; 127
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	80 81       	ld	r24, Z
    306a:	91 81       	ldd	r25, Z+1	; 0x01
    306c:	01 97       	sbiw	r24, 0x01	; 1
    306e:	f1 f7       	brne	.-4      	; 0x306c <main+0x130>
    3070:	fe 01       	movw	r30, r28
    3072:	ef 57       	subi	r30, 0x7F	; 127
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	91 83       	std	Z+1, r25	; 0x01
    3078:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    307a:	de 01       	movw	r26, r28
    307c:	ad 57       	subi	r26, 0x7D	; 125
    307e:	bf 4f       	sbci	r27, 0xFF	; 255
    3080:	fe 01       	movw	r30, r28
    3082:	ed 57       	subi	r30, 0x7D	; 125
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	80 81       	ld	r24, Z
    3088:	91 81       	ldd	r25, Z+1	; 0x01
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	11 96       	adiw	r26, 0x01	; 1
    308e:	9c 93       	st	X, r25
    3090:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3092:	fe 01       	movw	r30, r28
    3094:	ed 57       	subi	r30, 0x7D	; 125
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	80 81       	ld	r24, Z
    309a:	91 81       	ldd	r25, Z+1	; 0x01
    309c:	00 97       	sbiw	r24, 0x00	; 0
    309e:	d1 f6       	brne	.-76     	; 0x3054 <main+0x118>
    30a0:	27 c0       	rjmp	.+78     	; 0x30f0 <main+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a2:	8e 01       	movw	r16, r28
    30a4:	0d 57       	subi	r16, 0x7D	; 125
    30a6:	1f 4f       	sbci	r17, 0xFF	; 255
    30a8:	fe 01       	movw	r30, r28
    30aa:	eb 57       	subi	r30, 0x7B	; 123
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	60 81       	ld	r22, Z
    30b0:	71 81       	ldd	r23, Z+1	; 0x01
    30b2:	82 81       	ldd	r24, Z+2	; 0x02
    30b4:	93 81       	ldd	r25, Z+3	; 0x03
    30b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	f8 01       	movw	r30, r16
    30c0:	91 83       	std	Z+1, r25	; 0x01
    30c2:	80 83       	st	Z, r24
    30c4:	de 01       	movw	r26, r28
    30c6:	a1 58       	subi	r26, 0x81	; 129
    30c8:	bf 4f       	sbci	r27, 0xFF	; 255
    30ca:	fe 01       	movw	r30, r28
    30cc:	ed 57       	subi	r30, 0x7D	; 125
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	80 81       	ld	r24, Z
    30d2:	91 81       	ldd	r25, Z+1	; 0x01
    30d4:	8d 93       	st	X+, r24
    30d6:	9c 93       	st	X, r25
    30d8:	fe 01       	movw	r30, r28
    30da:	e1 58       	subi	r30, 0x81	; 129
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	80 81       	ld	r24, Z
    30e0:	91 81       	ldd	r25, Z+1	; 0x01
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	f1 f7       	brne	.-4      	; 0x30e2 <main+0x1a6>
    30e6:	fe 01       	movw	r30, r28
    30e8:	e1 58       	subi	r30, 0x81	; 129
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	91 83       	std	Z+1, r25	; 0x01
    30ee:	80 83       	st	Z, r24
       	 _delay_ms(2500);
       	 LCD_clearScreen();
    30f0:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_clearScreen>

       	 LCD_displayStringRowColumn(0 ,0,"Project 4");
    30f4:	26 e7       	ldi	r18, 0x76	; 118
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	60 e0       	ldi	r22, 0x00	; 0
    30fc:	a9 01       	movw	r20, r18
    30fe:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    3102:	fe 01       	movw	r30, r28
    3104:	e5 58       	subi	r30, 0x85	; 133
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	90 e8       	ldi	r25, 0x80	; 128
    310c:	ab eb       	ldi	r26, 0xBB	; 187
    310e:	b4 e4       	ldi	r27, 0x44	; 68
    3110:	80 83       	st	Z, r24
    3112:	91 83       	std	Z+1, r25	; 0x01
    3114:	a2 83       	std	Z+2, r26	; 0x02
    3116:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3118:	8e 01       	movw	r16, r28
    311a:	09 58       	subi	r16, 0x89	; 137
    311c:	1f 4f       	sbci	r17, 0xFF	; 255
    311e:	fe 01       	movw	r30, r28
    3120:	e5 58       	subi	r30, 0x85	; 133
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	60 81       	ld	r22, Z
    3126:	71 81       	ldd	r23, Z+1	; 0x01
    3128:	82 81       	ldd	r24, Z+2	; 0x02
    312a:	93 81       	ldd	r25, Z+3	; 0x03
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	4a e7       	ldi	r20, 0x7A	; 122
    3132:	55 e4       	ldi	r21, 0x45	; 69
    3134:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	f8 01       	movw	r30, r16
    313e:	80 83       	st	Z, r24
    3140:	91 83       	std	Z+1, r25	; 0x01
    3142:	a2 83       	std	Z+2, r26	; 0x02
    3144:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3146:	fe 01       	movw	r30, r28
    3148:	e9 58       	subi	r30, 0x89	; 137
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	60 81       	ld	r22, Z
    314e:	71 81       	ldd	r23, Z+1	; 0x01
    3150:	82 81       	ldd	r24, Z+2	; 0x02
    3152:	93 81       	ldd	r25, Z+3	; 0x03
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	40 e8       	ldi	r20, 0x80	; 128
    315a:	5f e3       	ldi	r21, 0x3F	; 63
    315c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3160:	88 23       	and	r24, r24
    3162:	44 f4       	brge	.+16     	; 0x3174 <main+0x238>
		__ticks = 1;
    3164:	fe 01       	movw	r30, r28
    3166:	eb 58       	subi	r30, 0x8B	; 139
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	91 83       	std	Z+1, r25	; 0x01
    3170:	80 83       	st	Z, r24
    3172:	64 c0       	rjmp	.+200    	; 0x323c <main+0x300>
	else if (__tmp > 65535)
    3174:	fe 01       	movw	r30, r28
    3176:	e9 58       	subi	r30, 0x89	; 137
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	60 81       	ld	r22, Z
    317c:	71 81       	ldd	r23, Z+1	; 0x01
    317e:	82 81       	ldd	r24, Z+2	; 0x02
    3180:	93 81       	ldd	r25, Z+3	; 0x03
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	3f ef       	ldi	r19, 0xFF	; 255
    3186:	4f e7       	ldi	r20, 0x7F	; 127
    3188:	57 e4       	ldi	r21, 0x47	; 71
    318a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    318e:	18 16       	cp	r1, r24
    3190:	0c f0       	brlt	.+2      	; 0x3194 <main+0x258>
    3192:	43 c0       	rjmp	.+134    	; 0x321a <main+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3194:	fe 01       	movw	r30, r28
    3196:	e5 58       	subi	r30, 0x85	; 133
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	60 81       	ld	r22, Z
    319c:	71 81       	ldd	r23, Z+1	; 0x01
    319e:	82 81       	ldd	r24, Z+2	; 0x02
    31a0:	93 81       	ldd	r25, Z+3	; 0x03
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	40 e2       	ldi	r20, 0x20	; 32
    31a8:	51 e4       	ldi	r21, 0x41	; 65
    31aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	8e 01       	movw	r16, r28
    31b4:	0b 58       	subi	r16, 0x8B	; 139
    31b6:	1f 4f       	sbci	r17, 0xFF	; 255
    31b8:	bc 01       	movw	r22, r24
    31ba:	cd 01       	movw	r24, r26
    31bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	f8 01       	movw	r30, r16
    31c6:	91 83       	std	Z+1, r25	; 0x01
    31c8:	80 83       	st	Z, r24
    31ca:	1f c0       	rjmp	.+62     	; 0x320a <main+0x2ce>
    31cc:	fe 01       	movw	r30, r28
    31ce:	ed 58       	subi	r30, 0x8D	; 141
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	80 e9       	ldi	r24, 0x90	; 144
    31d4:	91 e0       	ldi	r25, 0x01	; 1
    31d6:	91 83       	std	Z+1, r25	; 0x01
    31d8:	80 83       	st	Z, r24
    31da:	fe 01       	movw	r30, r28
    31dc:	ed 58       	subi	r30, 0x8D	; 141
    31de:	ff 4f       	sbci	r31, 0xFF	; 255
    31e0:	80 81       	ld	r24, Z
    31e2:	91 81       	ldd	r25, Z+1	; 0x01
    31e4:	01 97       	sbiw	r24, 0x01	; 1
    31e6:	f1 f7       	brne	.-4      	; 0x31e4 <main+0x2a8>
    31e8:	fe 01       	movw	r30, r28
    31ea:	ed 58       	subi	r30, 0x8D	; 141
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	91 83       	std	Z+1, r25	; 0x01
    31f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f2:	de 01       	movw	r26, r28
    31f4:	ab 58       	subi	r26, 0x8B	; 139
    31f6:	bf 4f       	sbci	r27, 0xFF	; 255
    31f8:	fe 01       	movw	r30, r28
    31fa:	eb 58       	subi	r30, 0x8B	; 139
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	80 81       	ld	r24, Z
    3200:	91 81       	ldd	r25, Z+1	; 0x01
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	11 96       	adiw	r26, 0x01	; 1
    3206:	9c 93       	st	X, r25
    3208:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320a:	fe 01       	movw	r30, r28
    320c:	eb 58       	subi	r30, 0x8B	; 139
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	80 81       	ld	r24, Z
    3212:	91 81       	ldd	r25, Z+1	; 0x01
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	d1 f6       	brne	.-76     	; 0x31cc <main+0x290>
    3218:	27 c0       	rjmp	.+78     	; 0x3268 <main+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321a:	8e 01       	movw	r16, r28
    321c:	0b 58       	subi	r16, 0x8B	; 139
    321e:	1f 4f       	sbci	r17, 0xFF	; 255
    3220:	fe 01       	movw	r30, r28
    3222:	e9 58       	subi	r30, 0x89	; 137
    3224:	ff 4f       	sbci	r31, 0xFF	; 255
    3226:	60 81       	ld	r22, Z
    3228:	71 81       	ldd	r23, Z+1	; 0x01
    322a:	82 81       	ldd	r24, Z+2	; 0x02
    322c:	93 81       	ldd	r25, Z+3	; 0x03
    322e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	f8 01       	movw	r30, r16
    3238:	91 83       	std	Z+1, r25	; 0x01
    323a:	80 83       	st	Z, r24
    323c:	de 01       	movw	r26, r28
    323e:	af 58       	subi	r26, 0x8F	; 143
    3240:	bf 4f       	sbci	r27, 0xFF	; 255
    3242:	fe 01       	movw	r30, r28
    3244:	eb 58       	subi	r30, 0x8B	; 139
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	80 81       	ld	r24, Z
    324a:	91 81       	ldd	r25, Z+1	; 0x01
    324c:	8d 93       	st	X+, r24
    324e:	9c 93       	st	X, r25
    3250:	fe 01       	movw	r30, r28
    3252:	ef 58       	subi	r30, 0x8F	; 143
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	80 81       	ld	r24, Z
    3258:	91 81       	ldd	r25, Z+1	; 0x01
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	f1 f7       	brne	.-4      	; 0x325a <main+0x31e>
    325e:	fe 01       	movw	r30, r28
    3260:	ef 58       	subi	r30, 0x8F	; 143
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	91 83       	std	Z+1, r25	; 0x01
    3266:	80 83       	st	Z, r24

       	       	 _delay_ms(1500);
       	       	 LCD_clearScreen();
    3268:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <LCD_clearScreen>

    /* Display a welcome message */
	 LCD_displayStringRowColumn(0 ,0,"HT:");
    326c:	20 e8       	ldi	r18, 0x80	; 128
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	60 e0       	ldi	r22, 0x00	; 0
    3274:	a9 01       	movw	r20, r18
    3276:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>

    /* Move the cursor to the second row */
	 LCD_displayStringRowColumn(0 ,5,"LT:");
    327a:	24 e8       	ldi	r18, 0x84	; 132
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	65 e0       	ldi	r22, 0x05	; 5
    3282:	a9 01       	movw	r20, r18
    3284:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    /* Get the pressed key from the keypad */
           key1 = KEYPAD_getPressedKey();
    3288:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <KEYPAD_getPressedKey>
    328c:	fe 01       	movw	r30, r28
    328e:	ed 56       	subi	r30, 0x6D	; 109
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	80 83       	st	Z, r24

           showingHighTempKeyPressed(key1,3);
    3294:	fe 01       	movw	r30, r28
    3296:	ed 56       	subi	r30, 0x6D	; 109
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	80 81       	ld	r24, Z
    329c:	63 e0       	ldi	r22, 0x03	; 3
    329e:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <showingHighTempKeyPressed>
           highTemp = key1*10;
    32a2:	fe 01       	movw	r30, r28
    32a4:	ed 56       	subi	r30, 0x6D	; 109
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	80 81       	ld	r24, Z
    32aa:	88 2f       	mov	r24, r24
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	9c 01       	movw	r18, r24
    32b0:	22 0f       	add	r18, r18
    32b2:	33 1f       	adc	r19, r19
    32b4:	c9 01       	movw	r24, r18
    32b6:	88 0f       	add	r24, r24
    32b8:	99 1f       	adc	r25, r25
    32ba:	88 0f       	add	r24, r24
    32bc:	99 1f       	adc	r25, r25
    32be:	82 0f       	add	r24, r18
    32c0:	93 1f       	adc	r25, r19
    32c2:	fe 01       	movw	r30, r28
    32c4:	e1 57       	subi	r30, 0x71	; 113
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	80 83       	st	Z, r24
    32ca:	fe 01       	movw	r30, r28
    32cc:	e3 59       	subi	r30, 0x93	; 147
    32ce:	ff 4f       	sbci	r31, 0xFF	; 255
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	aa ef       	ldi	r26, 0xFA	; 250
    32d6:	b3 e4       	ldi	r27, 0x43	; 67
    32d8:	80 83       	st	Z, r24
    32da:	91 83       	std	Z+1, r25	; 0x01
    32dc:	a2 83       	std	Z+2, r26	; 0x02
    32de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e0:	8e 01       	movw	r16, r28
    32e2:	07 59       	subi	r16, 0x97	; 151
    32e4:	1f 4f       	sbci	r17, 0xFF	; 255
    32e6:	fe 01       	movw	r30, r28
    32e8:	e3 59       	subi	r30, 0x93	; 147
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	60 81       	ld	r22, Z
    32ee:	71 81       	ldd	r23, Z+1	; 0x01
    32f0:	82 81       	ldd	r24, Z+2	; 0x02
    32f2:	93 81       	ldd	r25, Z+3	; 0x03
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	4a e7       	ldi	r20, 0x7A	; 122
    32fa:	55 e4       	ldi	r21, 0x45	; 69
    32fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	f8 01       	movw	r30, r16
    3306:	80 83       	st	Z, r24
    3308:	91 83       	std	Z+1, r25	; 0x01
    330a:	a2 83       	std	Z+2, r26	; 0x02
    330c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    330e:	fe 01       	movw	r30, r28
    3310:	e7 59       	subi	r30, 0x97	; 151
    3312:	ff 4f       	sbci	r31, 0xFF	; 255
    3314:	60 81       	ld	r22, Z
    3316:	71 81       	ldd	r23, Z+1	; 0x01
    3318:	82 81       	ldd	r24, Z+2	; 0x02
    331a:	93 81       	ldd	r25, Z+3	; 0x03
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	40 e8       	ldi	r20, 0x80	; 128
    3322:	5f e3       	ldi	r21, 0x3F	; 63
    3324:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3328:	88 23       	and	r24, r24
    332a:	44 f4       	brge	.+16     	; 0x333c <main+0x400>
		__ticks = 1;
    332c:	fe 01       	movw	r30, r28
    332e:	e9 59       	subi	r30, 0x99	; 153
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	91 83       	std	Z+1, r25	; 0x01
    3338:	80 83       	st	Z, r24
    333a:	64 c0       	rjmp	.+200    	; 0x3404 <main+0x4c8>
	else if (__tmp > 65535)
    333c:	fe 01       	movw	r30, r28
    333e:	e7 59       	subi	r30, 0x97	; 151
    3340:	ff 4f       	sbci	r31, 0xFF	; 255
    3342:	60 81       	ld	r22, Z
    3344:	71 81       	ldd	r23, Z+1	; 0x01
    3346:	82 81       	ldd	r24, Z+2	; 0x02
    3348:	93 81       	ldd	r25, Z+3	; 0x03
    334a:	20 e0       	ldi	r18, 0x00	; 0
    334c:	3f ef       	ldi	r19, 0xFF	; 255
    334e:	4f e7       	ldi	r20, 0x7F	; 127
    3350:	57 e4       	ldi	r21, 0x47	; 71
    3352:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3356:	18 16       	cp	r1, r24
    3358:	0c f0       	brlt	.+2      	; 0x335c <main+0x420>
    335a:	43 c0       	rjmp	.+134    	; 0x33e2 <main+0x4a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    335c:	fe 01       	movw	r30, r28
    335e:	e3 59       	subi	r30, 0x93	; 147
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	60 81       	ld	r22, Z
    3364:	71 81       	ldd	r23, Z+1	; 0x01
    3366:	82 81       	ldd	r24, Z+2	; 0x02
    3368:	93 81       	ldd	r25, Z+3	; 0x03
    336a:	20 e0       	ldi	r18, 0x00	; 0
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	40 e2       	ldi	r20, 0x20	; 32
    3370:	51 e4       	ldi	r21, 0x41	; 65
    3372:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	8e 01       	movw	r16, r28
    337c:	09 59       	subi	r16, 0x99	; 153
    337e:	1f 4f       	sbci	r17, 0xFF	; 255
    3380:	bc 01       	movw	r22, r24
    3382:	cd 01       	movw	r24, r26
    3384:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	f8 01       	movw	r30, r16
    338e:	91 83       	std	Z+1, r25	; 0x01
    3390:	80 83       	st	Z, r24
    3392:	1f c0       	rjmp	.+62     	; 0x33d2 <main+0x496>
    3394:	fe 01       	movw	r30, r28
    3396:	eb 59       	subi	r30, 0x9B	; 155
    3398:	ff 4f       	sbci	r31, 0xFF	; 255
    339a:	80 e9       	ldi	r24, 0x90	; 144
    339c:	91 e0       	ldi	r25, 0x01	; 1
    339e:	91 83       	std	Z+1, r25	; 0x01
    33a0:	80 83       	st	Z, r24
    33a2:	fe 01       	movw	r30, r28
    33a4:	eb 59       	subi	r30, 0x9B	; 155
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	80 81       	ld	r24, Z
    33aa:	91 81       	ldd	r25, Z+1	; 0x01
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	f1 f7       	brne	.-4      	; 0x33ac <main+0x470>
    33b0:	fe 01       	movw	r30, r28
    33b2:	eb 59       	subi	r30, 0x9B	; 155
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	91 83       	std	Z+1, r25	; 0x01
    33b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ba:	de 01       	movw	r26, r28
    33bc:	a9 59       	subi	r26, 0x99	; 153
    33be:	bf 4f       	sbci	r27, 0xFF	; 255
    33c0:	fe 01       	movw	r30, r28
    33c2:	e9 59       	subi	r30, 0x99	; 153
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	80 81       	ld	r24, Z
    33c8:	91 81       	ldd	r25, Z+1	; 0x01
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	11 96       	adiw	r26, 0x01	; 1
    33ce:	9c 93       	st	X, r25
    33d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d2:	fe 01       	movw	r30, r28
    33d4:	e9 59       	subi	r30, 0x99	; 153
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	80 81       	ld	r24, Z
    33da:	91 81       	ldd	r25, Z+1	; 0x01
    33dc:	00 97       	sbiw	r24, 0x00	; 0
    33de:	d1 f6       	brne	.-76     	; 0x3394 <main+0x458>
    33e0:	27 c0       	rjmp	.+78     	; 0x3430 <main+0x4f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e2:	8e 01       	movw	r16, r28
    33e4:	09 59       	subi	r16, 0x99	; 153
    33e6:	1f 4f       	sbci	r17, 0xFF	; 255
    33e8:	fe 01       	movw	r30, r28
    33ea:	e7 59       	subi	r30, 0x97	; 151
    33ec:	ff 4f       	sbci	r31, 0xFF	; 255
    33ee:	60 81       	ld	r22, Z
    33f0:	71 81       	ldd	r23, Z+1	; 0x01
    33f2:	82 81       	ldd	r24, Z+2	; 0x02
    33f4:	93 81       	ldd	r25, Z+3	; 0x03
    33f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	f8 01       	movw	r30, r16
    3400:	91 83       	std	Z+1, r25	; 0x01
    3402:	80 83       	st	Z, r24
    3404:	de 01       	movw	r26, r28
    3406:	ad 59       	subi	r26, 0x9D	; 157
    3408:	bf 4f       	sbci	r27, 0xFF	; 255
    340a:	fe 01       	movw	r30, r28
    340c:	e9 59       	subi	r30, 0x99	; 153
    340e:	ff 4f       	sbci	r31, 0xFF	; 255
    3410:	80 81       	ld	r24, Z
    3412:	91 81       	ldd	r25, Z+1	; 0x01
    3414:	8d 93       	st	X+, r24
    3416:	9c 93       	st	X, r25
    3418:	fe 01       	movw	r30, r28
    341a:	ed 59       	subi	r30, 0x9D	; 157
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	80 81       	ld	r24, Z
    3420:	91 81       	ldd	r25, Z+1	; 0x01
    3422:	01 97       	sbiw	r24, 0x01	; 1
    3424:	f1 f7       	brne	.-4      	; 0x3422 <main+0x4e6>
    3426:	fe 01       	movw	r30, r28
    3428:	ed 59       	subi	r30, 0x9D	; 157
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	91 83       	std	Z+1, r25	; 0x01
    342e:	80 83       	st	Z, r24
           _delay_ms(500);
           key2 = KEYPAD_getPressedKey();
    3430:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <KEYPAD_getPressedKey>
    3434:	fe 01       	movw	r30, r28
    3436:	ee 56       	subi	r30, 0x6E	; 110
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	80 83       	st	Z, r24

           showingHighTempKeyPressed(key2,4);
    343c:	fe 01       	movw	r30, r28
    343e:	ee 56       	subi	r30, 0x6E	; 110
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	80 81       	ld	r24, Z
    3444:	64 e0       	ldi	r22, 0x04	; 4
    3446:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <showingHighTempKeyPressed>
           highTemp+= key2;
    344a:	9e 01       	movw	r18, r28
    344c:	21 57       	subi	r18, 0x71	; 113
    344e:	3f 4f       	sbci	r19, 0xFF	; 255
    3450:	fe 01       	movw	r30, r28
    3452:	e1 57       	subi	r30, 0x71	; 113
    3454:	ff 4f       	sbci	r31, 0xFF	; 255
    3456:	de 01       	movw	r26, r28
    3458:	ae 56       	subi	r26, 0x6E	; 110
    345a:	bf 4f       	sbci	r27, 0xFF	; 255
    345c:	90 81       	ld	r25, Z
    345e:	8c 91       	ld	r24, X
    3460:	89 0f       	add	r24, r25
    3462:	f9 01       	movw	r30, r18
    3464:	80 83       	st	Z, r24
    3466:	fe 01       	movw	r30, r28
    3468:	e1 5a       	subi	r30, 0xA1	; 161
    346a:	ff 4f       	sbci	r31, 0xFF	; 255
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	aa ef       	ldi	r26, 0xFA	; 250
    3472:	b3 e4       	ldi	r27, 0x43	; 67
    3474:	80 83       	st	Z, r24
    3476:	91 83       	std	Z+1, r25	; 0x01
    3478:	a2 83       	std	Z+2, r26	; 0x02
    347a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347c:	8e 01       	movw	r16, r28
    347e:	05 5a       	subi	r16, 0xA5	; 165
    3480:	1f 4f       	sbci	r17, 0xFF	; 255
    3482:	fe 01       	movw	r30, r28
    3484:	e1 5a       	subi	r30, 0xA1	; 161
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	60 81       	ld	r22, Z
    348a:	71 81       	ldd	r23, Z+1	; 0x01
    348c:	82 81       	ldd	r24, Z+2	; 0x02
    348e:	93 81       	ldd	r25, Z+3	; 0x03
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	4a e7       	ldi	r20, 0x7A	; 122
    3496:	55 e4       	ldi	r21, 0x45	; 69
    3498:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	f8 01       	movw	r30, r16
    34a2:	80 83       	st	Z, r24
    34a4:	91 83       	std	Z+1, r25	; 0x01
    34a6:	a2 83       	std	Z+2, r26	; 0x02
    34a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34aa:	fe 01       	movw	r30, r28
    34ac:	e5 5a       	subi	r30, 0xA5	; 165
    34ae:	ff 4f       	sbci	r31, 0xFF	; 255
    34b0:	60 81       	ld	r22, Z
    34b2:	71 81       	ldd	r23, Z+1	; 0x01
    34b4:	82 81       	ldd	r24, Z+2	; 0x02
    34b6:	93 81       	ldd	r25, Z+3	; 0x03
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e8       	ldi	r20, 0x80	; 128
    34be:	5f e3       	ldi	r21, 0x3F	; 63
    34c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    34c4:	88 23       	and	r24, r24
    34c6:	44 f4       	brge	.+16     	; 0x34d8 <main+0x59c>
		__ticks = 1;
    34c8:	fe 01       	movw	r30, r28
    34ca:	e7 5a       	subi	r30, 0xA7	; 167
    34cc:	ff 4f       	sbci	r31, 0xFF	; 255
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	91 83       	std	Z+1, r25	; 0x01
    34d4:	80 83       	st	Z, r24
    34d6:	64 c0       	rjmp	.+200    	; 0x35a0 <main+0x664>
	else if (__tmp > 65535)
    34d8:	fe 01       	movw	r30, r28
    34da:	e5 5a       	subi	r30, 0xA5	; 165
    34dc:	ff 4f       	sbci	r31, 0xFF	; 255
    34de:	60 81       	ld	r22, Z
    34e0:	71 81       	ldd	r23, Z+1	; 0x01
    34e2:	82 81       	ldd	r24, Z+2	; 0x02
    34e4:	93 81       	ldd	r25, Z+3	; 0x03
    34e6:	20 e0       	ldi	r18, 0x00	; 0
    34e8:	3f ef       	ldi	r19, 0xFF	; 255
    34ea:	4f e7       	ldi	r20, 0x7F	; 127
    34ec:	57 e4       	ldi	r21, 0x47	; 71
    34ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    34f2:	18 16       	cp	r1, r24
    34f4:	0c f0       	brlt	.+2      	; 0x34f8 <main+0x5bc>
    34f6:	43 c0       	rjmp	.+134    	; 0x357e <main+0x642>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34f8:	fe 01       	movw	r30, r28
    34fa:	e1 5a       	subi	r30, 0xA1	; 161
    34fc:	ff 4f       	sbci	r31, 0xFF	; 255
    34fe:	60 81       	ld	r22, Z
    3500:	71 81       	ldd	r23, Z+1	; 0x01
    3502:	82 81       	ldd	r24, Z+2	; 0x02
    3504:	93 81       	ldd	r25, Z+3	; 0x03
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	40 e2       	ldi	r20, 0x20	; 32
    350c:	51 e4       	ldi	r21, 0x41	; 65
    350e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	8e 01       	movw	r16, r28
    3518:	07 5a       	subi	r16, 0xA7	; 167
    351a:	1f 4f       	sbci	r17, 0xFF	; 255
    351c:	bc 01       	movw	r22, r24
    351e:	cd 01       	movw	r24, r26
    3520:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	f8 01       	movw	r30, r16
    352a:	91 83       	std	Z+1, r25	; 0x01
    352c:	80 83       	st	Z, r24
    352e:	1f c0       	rjmp	.+62     	; 0x356e <main+0x632>
    3530:	fe 01       	movw	r30, r28
    3532:	e9 5a       	subi	r30, 0xA9	; 169
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	80 e9       	ldi	r24, 0x90	; 144
    3538:	91 e0       	ldi	r25, 0x01	; 1
    353a:	91 83       	std	Z+1, r25	; 0x01
    353c:	80 83       	st	Z, r24
    353e:	fe 01       	movw	r30, r28
    3540:	e9 5a       	subi	r30, 0xA9	; 169
    3542:	ff 4f       	sbci	r31, 0xFF	; 255
    3544:	80 81       	ld	r24, Z
    3546:	91 81       	ldd	r25, Z+1	; 0x01
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	f1 f7       	brne	.-4      	; 0x3548 <main+0x60c>
    354c:	fe 01       	movw	r30, r28
    354e:	e9 5a       	subi	r30, 0xA9	; 169
    3550:	ff 4f       	sbci	r31, 0xFF	; 255
    3552:	91 83       	std	Z+1, r25	; 0x01
    3554:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3556:	de 01       	movw	r26, r28
    3558:	a7 5a       	subi	r26, 0xA7	; 167
    355a:	bf 4f       	sbci	r27, 0xFF	; 255
    355c:	fe 01       	movw	r30, r28
    355e:	e7 5a       	subi	r30, 0xA7	; 167
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	80 81       	ld	r24, Z
    3564:	91 81       	ldd	r25, Z+1	; 0x01
    3566:	01 97       	sbiw	r24, 0x01	; 1
    3568:	11 96       	adiw	r26, 0x01	; 1
    356a:	9c 93       	st	X, r25
    356c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    356e:	fe 01       	movw	r30, r28
    3570:	e7 5a       	subi	r30, 0xA7	; 167
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	80 81       	ld	r24, Z
    3576:	91 81       	ldd	r25, Z+1	; 0x01
    3578:	00 97       	sbiw	r24, 0x00	; 0
    357a:	d1 f6       	brne	.-76     	; 0x3530 <main+0x5f4>
    357c:	27 c0       	rjmp	.+78     	; 0x35cc <main+0x690>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    357e:	8e 01       	movw	r16, r28
    3580:	07 5a       	subi	r16, 0xA7	; 167
    3582:	1f 4f       	sbci	r17, 0xFF	; 255
    3584:	fe 01       	movw	r30, r28
    3586:	e5 5a       	subi	r30, 0xA5	; 165
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	60 81       	ld	r22, Z
    358c:	71 81       	ldd	r23, Z+1	; 0x01
    358e:	82 81       	ldd	r24, Z+2	; 0x02
    3590:	93 81       	ldd	r25, Z+3	; 0x03
    3592:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	f8 01       	movw	r30, r16
    359c:	91 83       	std	Z+1, r25	; 0x01
    359e:	80 83       	st	Z, r24
    35a0:	de 01       	movw	r26, r28
    35a2:	ab 5a       	subi	r26, 0xAB	; 171
    35a4:	bf 4f       	sbci	r27, 0xFF	; 255
    35a6:	fe 01       	movw	r30, r28
    35a8:	e7 5a       	subi	r30, 0xA7	; 167
    35aa:	ff 4f       	sbci	r31, 0xFF	; 255
    35ac:	80 81       	ld	r24, Z
    35ae:	91 81       	ldd	r25, Z+1	; 0x01
    35b0:	8d 93       	st	X+, r24
    35b2:	9c 93       	st	X, r25
    35b4:	fe 01       	movw	r30, r28
    35b6:	eb 5a       	subi	r30, 0xAB	; 171
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	80 81       	ld	r24, Z
    35bc:	91 81       	ldd	r25, Z+1	; 0x01
    35be:	01 97       	sbiw	r24, 0x01	; 1
    35c0:	f1 f7       	brne	.-4      	; 0x35be <main+0x682>
    35c2:	fe 01       	movw	r30, r28
    35c4:	eb 5a       	subi	r30, 0xAB	; 171
    35c6:	ff 4f       	sbci	r31, 0xFF	; 255
    35c8:	91 83       	std	Z+1, r25	; 0x01
    35ca:	80 83       	st	Z, r24

           _delay_ms(500);
           key3 = KEYPAD_getPressedKey();
    35cc:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <KEYPAD_getPressedKey>
    35d0:	fe 01       	movw	r30, r28
    35d2:	ef 56       	subi	r30, 0x6F	; 111
    35d4:	ff 4f       	sbci	r31, 0xFF	; 255
    35d6:	80 83       	st	Z, r24
           showingLowTempKeyPressed(key3,8);
    35d8:	fe 01       	movw	r30, r28
    35da:	ef 56       	subi	r30, 0x6F	; 111
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	80 81       	ld	r24, Z
    35e0:	68 e0       	ldi	r22, 0x08	; 8
    35e2:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <showingLowTempKeyPressed>
           lowTemp = key3*10;
    35e6:	fe 01       	movw	r30, r28
    35e8:	ef 56       	subi	r30, 0x6F	; 111
    35ea:	ff 4f       	sbci	r31, 0xFF	; 255
    35ec:	80 81       	ld	r24, Z
    35ee:	88 2f       	mov	r24, r24
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	9c 01       	movw	r18, r24
    35f4:	22 0f       	add	r18, r18
    35f6:	33 1f       	adc	r19, r19
    35f8:	c9 01       	movw	r24, r18
    35fa:	88 0f       	add	r24, r24
    35fc:	99 1f       	adc	r25, r25
    35fe:	88 0f       	add	r24, r24
    3600:	99 1f       	adc	r25, r25
    3602:	82 0f       	add	r24, r18
    3604:	93 1f       	adc	r25, r19
    3606:	fe 01       	movw	r30, r28
    3608:	e2 57       	subi	r30, 0x72	; 114
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	80 83       	st	Z, r24
    360e:	fe 01       	movw	r30, r28
    3610:	ef 5a       	subi	r30, 0xAF	; 175
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	80 e0       	ldi	r24, 0x00	; 0
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	aa ef       	ldi	r26, 0xFA	; 250
    361a:	b3 e4       	ldi	r27, 0x43	; 67
    361c:	80 83       	st	Z, r24
    361e:	91 83       	std	Z+1, r25	; 0x01
    3620:	a2 83       	std	Z+2, r26	; 0x02
    3622:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3624:	8e 01       	movw	r16, r28
    3626:	03 5b       	subi	r16, 0xB3	; 179
    3628:	1f 4f       	sbci	r17, 0xFF	; 255
    362a:	fe 01       	movw	r30, r28
    362c:	ef 5a       	subi	r30, 0xAF	; 175
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	60 81       	ld	r22, Z
    3632:	71 81       	ldd	r23, Z+1	; 0x01
    3634:	82 81       	ldd	r24, Z+2	; 0x02
    3636:	93 81       	ldd	r25, Z+3	; 0x03
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	4a e7       	ldi	r20, 0x7A	; 122
    363e:	55 e4       	ldi	r21, 0x45	; 69
    3640:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	f8 01       	movw	r30, r16
    364a:	80 83       	st	Z, r24
    364c:	91 83       	std	Z+1, r25	; 0x01
    364e:	a2 83       	std	Z+2, r26	; 0x02
    3650:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3652:	fe 01       	movw	r30, r28
    3654:	e3 5b       	subi	r30, 0xB3	; 179
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	60 81       	ld	r22, Z
    365a:	71 81       	ldd	r23, Z+1	; 0x01
    365c:	82 81       	ldd	r24, Z+2	; 0x02
    365e:	93 81       	ldd	r25, Z+3	; 0x03
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	40 e8       	ldi	r20, 0x80	; 128
    3666:	5f e3       	ldi	r21, 0x3F	; 63
    3668:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    366c:	88 23       	and	r24, r24
    366e:	44 f4       	brge	.+16     	; 0x3680 <main+0x744>
		__ticks = 1;
    3670:	fe 01       	movw	r30, r28
    3672:	e5 5b       	subi	r30, 0xB5	; 181
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	81 e0       	ldi	r24, 0x01	; 1
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	91 83       	std	Z+1, r25	; 0x01
    367c:	80 83       	st	Z, r24
    367e:	64 c0       	rjmp	.+200    	; 0x3748 <main+0x80c>
	else if (__tmp > 65535)
    3680:	fe 01       	movw	r30, r28
    3682:	e3 5b       	subi	r30, 0xB3	; 179
    3684:	ff 4f       	sbci	r31, 0xFF	; 255
    3686:	60 81       	ld	r22, Z
    3688:	71 81       	ldd	r23, Z+1	; 0x01
    368a:	82 81       	ldd	r24, Z+2	; 0x02
    368c:	93 81       	ldd	r25, Z+3	; 0x03
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	3f ef       	ldi	r19, 0xFF	; 255
    3692:	4f e7       	ldi	r20, 0x7F	; 127
    3694:	57 e4       	ldi	r21, 0x47	; 71
    3696:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    369a:	18 16       	cp	r1, r24
    369c:	0c f0       	brlt	.+2      	; 0x36a0 <main+0x764>
    369e:	43 c0       	rjmp	.+134    	; 0x3726 <main+0x7ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36a0:	fe 01       	movw	r30, r28
    36a2:	ef 5a       	subi	r30, 0xAF	; 175
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	60 81       	ld	r22, Z
    36a8:	71 81       	ldd	r23, Z+1	; 0x01
    36aa:	82 81       	ldd	r24, Z+2	; 0x02
    36ac:	93 81       	ldd	r25, Z+3	; 0x03
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	40 e2       	ldi	r20, 0x20	; 32
    36b4:	51 e4       	ldi	r21, 0x41	; 65
    36b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	8e 01       	movw	r16, r28
    36c0:	05 5b       	subi	r16, 0xB5	; 181
    36c2:	1f 4f       	sbci	r17, 0xFF	; 255
    36c4:	bc 01       	movw	r22, r24
    36c6:	cd 01       	movw	r24, r26
    36c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	f8 01       	movw	r30, r16
    36d2:	91 83       	std	Z+1, r25	; 0x01
    36d4:	80 83       	st	Z, r24
    36d6:	1f c0       	rjmp	.+62     	; 0x3716 <main+0x7da>
    36d8:	fe 01       	movw	r30, r28
    36da:	e7 5b       	subi	r30, 0xB7	; 183
    36dc:	ff 4f       	sbci	r31, 0xFF	; 255
    36de:	80 e9       	ldi	r24, 0x90	; 144
    36e0:	91 e0       	ldi	r25, 0x01	; 1
    36e2:	91 83       	std	Z+1, r25	; 0x01
    36e4:	80 83       	st	Z, r24
    36e6:	fe 01       	movw	r30, r28
    36e8:	e7 5b       	subi	r30, 0xB7	; 183
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	80 81       	ld	r24, Z
    36ee:	91 81       	ldd	r25, Z+1	; 0x01
    36f0:	01 97       	sbiw	r24, 0x01	; 1
    36f2:	f1 f7       	brne	.-4      	; 0x36f0 <main+0x7b4>
    36f4:	fe 01       	movw	r30, r28
    36f6:	e7 5b       	subi	r30, 0xB7	; 183
    36f8:	ff 4f       	sbci	r31, 0xFF	; 255
    36fa:	91 83       	std	Z+1, r25	; 0x01
    36fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fe:	de 01       	movw	r26, r28
    3700:	a5 5b       	subi	r26, 0xB5	; 181
    3702:	bf 4f       	sbci	r27, 0xFF	; 255
    3704:	fe 01       	movw	r30, r28
    3706:	e5 5b       	subi	r30, 0xB5	; 181
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	80 81       	ld	r24, Z
    370c:	91 81       	ldd	r25, Z+1	; 0x01
    370e:	01 97       	sbiw	r24, 0x01	; 1
    3710:	11 96       	adiw	r26, 0x01	; 1
    3712:	9c 93       	st	X, r25
    3714:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3716:	fe 01       	movw	r30, r28
    3718:	e5 5b       	subi	r30, 0xB5	; 181
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	80 81       	ld	r24, Z
    371e:	91 81       	ldd	r25, Z+1	; 0x01
    3720:	00 97       	sbiw	r24, 0x00	; 0
    3722:	d1 f6       	brne	.-76     	; 0x36d8 <main+0x79c>
    3724:	27 c0       	rjmp	.+78     	; 0x3774 <main+0x838>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3726:	8e 01       	movw	r16, r28
    3728:	05 5b       	subi	r16, 0xB5	; 181
    372a:	1f 4f       	sbci	r17, 0xFF	; 255
    372c:	fe 01       	movw	r30, r28
    372e:	e3 5b       	subi	r30, 0xB3	; 179
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	60 81       	ld	r22, Z
    3734:	71 81       	ldd	r23, Z+1	; 0x01
    3736:	82 81       	ldd	r24, Z+2	; 0x02
    3738:	93 81       	ldd	r25, Z+3	; 0x03
    373a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	f8 01       	movw	r30, r16
    3744:	91 83       	std	Z+1, r25	; 0x01
    3746:	80 83       	st	Z, r24
    3748:	de 01       	movw	r26, r28
    374a:	a9 5b       	subi	r26, 0xB9	; 185
    374c:	bf 4f       	sbci	r27, 0xFF	; 255
    374e:	fe 01       	movw	r30, r28
    3750:	e5 5b       	subi	r30, 0xB5	; 181
    3752:	ff 4f       	sbci	r31, 0xFF	; 255
    3754:	80 81       	ld	r24, Z
    3756:	91 81       	ldd	r25, Z+1	; 0x01
    3758:	8d 93       	st	X+, r24
    375a:	9c 93       	st	X, r25
    375c:	fe 01       	movw	r30, r28
    375e:	e9 5b       	subi	r30, 0xB9	; 185
    3760:	ff 4f       	sbci	r31, 0xFF	; 255
    3762:	80 81       	ld	r24, Z
    3764:	91 81       	ldd	r25, Z+1	; 0x01
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	f1 f7       	brne	.-4      	; 0x3766 <main+0x82a>
    376a:	fe 01       	movw	r30, r28
    376c:	e9 5b       	subi	r30, 0xB9	; 185
    376e:	ff 4f       	sbci	r31, 0xFF	; 255
    3770:	91 83       	std	Z+1, r25	; 0x01
    3772:	80 83       	st	Z, r24
           _delay_ms(500);
           key4 = KEYPAD_getPressedKey();
    3774:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <KEYPAD_getPressedKey>
    3778:	fe 01       	movw	r30, r28
    377a:	e0 57       	subi	r30, 0x70	; 112
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	80 83       	st	Z, r24
           showingLowTempKeyPressed(key4,9);
    3780:	fe 01       	movw	r30, r28
    3782:	e0 57       	subi	r30, 0x70	; 112
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	80 81       	ld	r24, Z
    3788:	69 e0       	ldi	r22, 0x09	; 9
    378a:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <showingLowTempKeyPressed>
           lowTemp += key4;
    378e:	9e 01       	movw	r18, r28
    3790:	22 57       	subi	r18, 0x72	; 114
    3792:	3f 4f       	sbci	r19, 0xFF	; 255
    3794:	fe 01       	movw	r30, r28
    3796:	e2 57       	subi	r30, 0x72	; 114
    3798:	ff 4f       	sbci	r31, 0xFF	; 255
    379a:	de 01       	movw	r26, r28
    379c:	a0 57       	subi	r26, 0x70	; 112
    379e:	bf 4f       	sbci	r27, 0xFF	; 255
    37a0:	90 81       	ld	r25, Z
    37a2:	8c 91       	ld	r24, X
    37a4:	89 0f       	add	r24, r25
    37a6:	f9 01       	movw	r30, r18
    37a8:	80 83       	st	Z, r24
    37aa:	fe 01       	movw	r30, r28
    37ac:	ed 5b       	subi	r30, 0xBD	; 189
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	aa ef       	ldi	r26, 0xFA	; 250
    37b6:	b3 e4       	ldi	r27, 0x43	; 67
    37b8:	80 83       	st	Z, r24
    37ba:	91 83       	std	Z+1, r25	; 0x01
    37bc:	a2 83       	std	Z+2, r26	; 0x02
    37be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c0:	8e 01       	movw	r16, r28
    37c2:	01 5c       	subi	r16, 0xC1	; 193
    37c4:	1f 4f       	sbci	r17, 0xFF	; 255
    37c6:	fe 01       	movw	r30, r28
    37c8:	ed 5b       	subi	r30, 0xBD	; 189
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	60 81       	ld	r22, Z
    37ce:	71 81       	ldd	r23, Z+1	; 0x01
    37d0:	82 81       	ldd	r24, Z+2	; 0x02
    37d2:	93 81       	ldd	r25, Z+3	; 0x03
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	4a e7       	ldi	r20, 0x7A	; 122
    37da:	55 e4       	ldi	r21, 0x45	; 69
    37dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	f8 01       	movw	r30, r16
    37e6:	80 83       	st	Z, r24
    37e8:	91 83       	std	Z+1, r25	; 0x01
    37ea:	a2 83       	std	Z+2, r26	; 0x02
    37ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37ee:	fe 01       	movw	r30, r28
    37f0:	ff 96       	adiw	r30, 0x3f	; 63
    37f2:	60 81       	ld	r22, Z
    37f4:	71 81       	ldd	r23, Z+1	; 0x01
    37f6:	82 81       	ldd	r24, Z+2	; 0x02
    37f8:	93 81       	ldd	r25, Z+3	; 0x03
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	40 e8       	ldi	r20, 0x80	; 128
    3800:	5f e3       	ldi	r21, 0x3F	; 63
    3802:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3806:	88 23       	and	r24, r24
    3808:	2c f4       	brge	.+10     	; 0x3814 <main+0x8d8>
		__ticks = 1;
    380a:	81 e0       	ldi	r24, 0x01	; 1
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	9e af       	std	Y+62, r25	; 0x3e
    3810:	8d af       	std	Y+61, r24	; 0x3d
    3812:	46 c0       	rjmp	.+140    	; 0x38a0 <main+0x964>
	else if (__tmp > 65535)
    3814:	fe 01       	movw	r30, r28
    3816:	ff 96       	adiw	r30, 0x3f	; 63
    3818:	60 81       	ld	r22, Z
    381a:	71 81       	ldd	r23, Z+1	; 0x01
    381c:	82 81       	ldd	r24, Z+2	; 0x02
    381e:	93 81       	ldd	r25, Z+3	; 0x03
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	3f ef       	ldi	r19, 0xFF	; 255
    3824:	4f e7       	ldi	r20, 0x7F	; 127
    3826:	57 e4       	ldi	r21, 0x47	; 71
    3828:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    382c:	18 16       	cp	r1, r24
    382e:	64 f5       	brge	.+88     	; 0x3888 <main+0x94c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3830:	fe 01       	movw	r30, r28
    3832:	ed 5b       	subi	r30, 0xBD	; 189
    3834:	ff 4f       	sbci	r31, 0xFF	; 255
    3836:	60 81       	ld	r22, Z
    3838:	71 81       	ldd	r23, Z+1	; 0x01
    383a:	82 81       	ldd	r24, Z+2	; 0x02
    383c:	93 81       	ldd	r25, Z+3	; 0x03
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	40 e2       	ldi	r20, 0x20	; 32
    3844:	51 e4       	ldi	r21, 0x41	; 65
    3846:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	bc 01       	movw	r22, r24
    3850:	cd 01       	movw	r24, r26
    3852:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	9e af       	std	Y+62, r25	; 0x3e
    385c:	8d af       	std	Y+61, r24	; 0x3d
    385e:	0f c0       	rjmp	.+30     	; 0x387e <main+0x942>
    3860:	80 e9       	ldi	r24, 0x90	; 144
    3862:	91 e0       	ldi	r25, 0x01	; 1
    3864:	9c af       	std	Y+60, r25	; 0x3c
    3866:	8b af       	std	Y+59, r24	; 0x3b
    3868:	8b ad       	ldd	r24, Y+59	; 0x3b
    386a:	9c ad       	ldd	r25, Y+60	; 0x3c
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	f1 f7       	brne	.-4      	; 0x386c <main+0x930>
    3870:	9c af       	std	Y+60, r25	; 0x3c
    3872:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3874:	8d ad       	ldd	r24, Y+61	; 0x3d
    3876:	9e ad       	ldd	r25, Y+62	; 0x3e
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	9e af       	std	Y+62, r25	; 0x3e
    387c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3880:	9e ad       	ldd	r25, Y+62	; 0x3e
    3882:	00 97       	sbiw	r24, 0x00	; 0
    3884:	69 f7       	brne	.-38     	; 0x3860 <main+0x924>
    3886:	16 c0       	rjmp	.+44     	; 0x38b4 <main+0x978>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3888:	fe 01       	movw	r30, r28
    388a:	ff 96       	adiw	r30, 0x3f	; 63
    388c:	60 81       	ld	r22, Z
    388e:	71 81       	ldd	r23, Z+1	; 0x01
    3890:	82 81       	ldd	r24, Z+2	; 0x02
    3892:	93 81       	ldd	r25, Z+3	; 0x03
    3894:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	9e af       	std	Y+62, r25	; 0x3e
    389e:	8d af       	std	Y+61, r24	; 0x3d
    38a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    38a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    38a4:	9a af       	std	Y+58, r25	; 0x3a
    38a6:	89 af       	std	Y+57, r24	; 0x39
    38a8:	89 ad       	ldd	r24, Y+57	; 0x39
    38aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    38ac:	01 97       	sbiw	r24, 0x01	; 1
    38ae:	f1 f7       	brne	.-4      	; 0x38ac <main+0x970>
    38b0:	9a af       	std	Y+58, r25	; 0x3a
    38b2:	89 af       	std	Y+57, r24	; 0x39
           _delay_ms(500);


    while(1)
    {
    	if (lowTemp<highTemp){
    38b4:	fe 01       	movw	r30, r28
    38b6:	e2 57       	subi	r30, 0x72	; 114
    38b8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ba:	de 01       	movw	r26, r28
    38bc:	a1 57       	subi	r26, 0x71	; 113
    38be:	bf 4f       	sbci	r27, 0xFF	; 255
    38c0:	90 81       	ld	r25, Z
    38c2:	8c 91       	ld	r24, X
    38c4:	98 17       	cp	r25, r24
    38c6:	08 f0       	brcs	.+2      	; 0x38ca <main+0x98e>
    38c8:	78 c0       	rjmp	.+240    	; 0x39ba <main+0xa7e>
        	sensorTemp = LM35_getTemperature();
    38ca:	0e 94 ff 20 	call	0x41fe	; 0x41fe <LM35_getTemperature>
    38ce:	fe 01       	movw	r30, r28
    38d0:	e3 57       	subi	r30, 0x73	; 115
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	80 83       	st	Z, r24
            LCD_displayStringRowColumn(1 ,6,"T:   ");
    38d6:	28 e8       	ldi	r18, 0x88	; 136
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	66 e0       	ldi	r22, 0x06	; 6
    38de:	a9 01       	movw	r20, r18
    38e0:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
        	LCD_moveCursor(1, 8);              /* Move Cursor to (ROW 1 , COLUMN 9) on LCD */
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	68 e0       	ldi	r22, 0x08	; 8
    38e8:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LCD_moveCursor>
        	LCD_intgerToString(sensorTemp);
    38ec:	fe 01       	movw	r30, r28
    38ee:	e3 57       	subi	r30, 0x73	; 115
    38f0:	ff 4f       	sbci	r31, 0xFF	; 255
    38f2:	80 81       	ld	r24, Z
    38f4:	88 2f       	mov	r24, r24
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <LCD_intgerToString>
        if (sensorTemp >= highTemp){
    38fc:	fe 01       	movw	r30, r28
    38fe:	e3 57       	subi	r30, 0x73	; 115
    3900:	ff 4f       	sbci	r31, 0xFF	; 255
    3902:	de 01       	movw	r26, r28
    3904:	a1 57       	subi	r26, 0x71	; 113
    3906:	bf 4f       	sbci	r27, 0xFF	; 255
    3908:	90 81       	ld	r25, Z
    390a:	8c 91       	ld	r24, X
    390c:	98 17       	cp	r25, r24
    390e:	c8 f0       	brcs	.+50     	; 0x3942 <main+0xa06>
        	DcMotor_Rotate(ClockWise, 255);
    3910:	82 e0       	ldi	r24, 0x02	; 2
    3912:	6f ef       	ldi	r22, 0xFF	; 255
    3914:	0e 94 c2 07 	call	0xf84	; 0xf84 <DcMotor_Rotate>
        	Heater_off();
    3918:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <Heater_off>
        	Buzzer_off();
    391c:	0e 94 9b 07 	call	0xf36	; 0xf36 <Buzzer_off>
        	LED_on(LEDPIN1_ID);
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	0e 94 80 17 	call	0x2f00	; 0x2f00 <LED_on>
        	LED_off(LEDPIN2_ID);
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <LED_off>
        	LED_off(LEDPIN3_ID);
    392c:	82 e0       	ldi	r24, 0x02	; 2
    392e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <LED_off>
        	LCD_displayStringRowColumn(1,0,"Hot ");
    3932:	2e e8       	ldi	r18, 0x8E	; 142
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	81 e0       	ldi	r24, 0x01	; 1
    3938:	60 e0       	ldi	r22, 0x00	; 0
    393a:	a9 01       	movw	r20, r18
    393c:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    3940:	0a c2       	rjmp	.+1044   	; 0x3d56 <main+0xe1a>
        }  else if (sensorTemp <= lowTemp){
    3942:	fe 01       	movw	r30, r28
    3944:	e3 57       	subi	r30, 0x73	; 115
    3946:	ff 4f       	sbci	r31, 0xFF	; 255
    3948:	de 01       	movw	r26, r28
    394a:	a2 57       	subi	r26, 0x72	; 114
    394c:	bf 4f       	sbci	r27, 0xFF	; 255
    394e:	90 81       	ld	r25, Z
    3950:	8c 91       	ld	r24, X
    3952:	89 17       	cp	r24, r25
    3954:	c8 f0       	brcs	.+50     	; 0x3988 <main+0xa4c>
        	Heater_on();
    3956:	0e 94 56 0b 	call	0x16ac	; 0x16ac <Heater_on>
        	Buzzer_on();
    395a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <Buzzer_on>
        	DcMotor_Rotate(ClockWise, 0);
    395e:	82 e0       	ldi	r24, 0x02	; 2
    3960:	60 e0       	ldi	r22, 0x00	; 0
    3962:	0e 94 c2 07 	call	0xf84	; 0xf84 <DcMotor_Rotate>
        	LED_off(LEDPIN1_ID);
    3966:	80 e0       	ldi	r24, 0x00	; 0
    3968:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <LED_off>
        	LED_off(LEDPIN2_ID);
    396c:	81 e0       	ldi	r24, 0x01	; 1
    396e:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <LED_off>
        	LED_on(LEDPIN3_ID);
    3972:	82 e0       	ldi	r24, 0x02	; 2
    3974:	0e 94 80 17 	call	0x2f00	; 0x2f00 <LED_on>
        	LCD_displayStringRowColumn(1,0,"Cold ");
    3978:	23 e9       	ldi	r18, 0x93	; 147
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	60 e0       	ldi	r22, 0x00	; 0
    3980:	a9 01       	movw	r20, r18
    3982:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    3986:	e7 c1       	rjmp	.+974    	; 0x3d56 <main+0xe1a>
        }
        else {
        	DcMotor_Rotate(ClockWise, 0);
    3988:	82 e0       	ldi	r24, 0x02	; 2
    398a:	60 e0       	ldi	r22, 0x00	; 0
    398c:	0e 94 c2 07 	call	0xf84	; 0xf84 <DcMotor_Rotate>
        	Heater_off();
    3990:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <Heater_off>
        	Buzzer_off();
    3994:	0e 94 9b 07 	call	0xf36	; 0xf36 <Buzzer_off>
        	LED_off(LEDPIN1_ID);
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <LED_off>
        	LED_on(LEDPIN2_ID);
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	0e 94 80 17 	call	0x2f00	; 0x2f00 <LED_on>
        	LED_off(LEDPIN3_ID);
    39a4:	82 e0       	ldi	r24, 0x02	; 2
    39a6:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <LED_off>
        	LCD_displayStringRowColumn(1,0,"Norm");
    39aa:	29 e9       	ldi	r18, 0x99	; 153
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	81 e0       	ldi	r24, 0x01	; 1
    39b0:	60 e0       	ldi	r22, 0x00	; 0
    39b2:	a9 01       	movw	r20, r18
    39b4:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    39b8:	ce c1       	rjmp	.+924    	; 0x3d56 <main+0xe1a>
        }
    	} else {
    		  key1 = KEYPAD_getPressedKey();
    39ba:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <KEYPAD_getPressedKey>
    39be:	fe 01       	movw	r30, r28
    39c0:	ed 56       	subi	r30, 0x6D	; 109
    39c2:	ff 4f       	sbci	r31, 0xFF	; 255
    39c4:	80 83       	st	Z, r24

    		           showingHighTempKeyPressed(key1,3);
    39c6:	fe 01       	movw	r30, r28
    39c8:	ed 56       	subi	r30, 0x6D	; 109
    39ca:	ff 4f       	sbci	r31, 0xFF	; 255
    39cc:	80 81       	ld	r24, Z
    39ce:	63 e0       	ldi	r22, 0x03	; 3
    39d0:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <showingHighTempKeyPressed>
    		           highTemp = key1*10;
    39d4:	fe 01       	movw	r30, r28
    39d6:	ed 56       	subi	r30, 0x6D	; 109
    39d8:	ff 4f       	sbci	r31, 0xFF	; 255
    39da:	80 81       	ld	r24, Z
    39dc:	88 2f       	mov	r24, r24
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	9c 01       	movw	r18, r24
    39e2:	22 0f       	add	r18, r18
    39e4:	33 1f       	adc	r19, r19
    39e6:	c9 01       	movw	r24, r18
    39e8:	88 0f       	add	r24, r24
    39ea:	99 1f       	adc	r25, r25
    39ec:	88 0f       	add	r24, r24
    39ee:	99 1f       	adc	r25, r25
    39f0:	82 0f       	add	r24, r18
    39f2:	93 1f       	adc	r25, r19
    39f4:	fe 01       	movw	r30, r28
    39f6:	e1 57       	subi	r30, 0x71	; 113
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	80 83       	st	Z, r24
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	a8 e4       	ldi	r26, 0x48	; 72
    3a02:	b3 e4       	ldi	r27, 0x43	; 67
    3a04:	8d ab       	std	Y+53, r24	; 0x35
    3a06:	9e ab       	std	Y+54, r25	; 0x36
    3a08:	af ab       	std	Y+55, r26	; 0x37
    3a0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a0c:	6d a9       	ldd	r22, Y+53	; 0x35
    3a0e:	7e a9       	ldd	r23, Y+54	; 0x36
    3a10:	8f a9       	ldd	r24, Y+55	; 0x37
    3a12:	98 ad       	ldd	r25, Y+56	; 0x38
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	4a e7       	ldi	r20, 0x7A	; 122
    3a1a:	55 e4       	ldi	r21, 0x45	; 69
    3a1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a20:	dc 01       	movw	r26, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	89 ab       	std	Y+49, r24	; 0x31
    3a26:	9a ab       	std	Y+50, r25	; 0x32
    3a28:	ab ab       	std	Y+51, r26	; 0x33
    3a2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a2c:	69 a9       	ldd	r22, Y+49	; 0x31
    3a2e:	7a a9       	ldd	r23, Y+50	; 0x32
    3a30:	8b a9       	ldd	r24, Y+51	; 0x33
    3a32:	9c a9       	ldd	r25, Y+52	; 0x34
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	30 e0       	ldi	r19, 0x00	; 0
    3a38:	40 e8       	ldi	r20, 0x80	; 128
    3a3a:	5f e3       	ldi	r21, 0x3F	; 63
    3a3c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3a40:	88 23       	and	r24, r24
    3a42:	2c f4       	brge	.+10     	; 0x3a4e <main+0xb12>
		__ticks = 1;
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	98 ab       	std	Y+48, r25	; 0x30
    3a4a:	8f a7       	std	Y+47, r24	; 0x2f
    3a4c:	3f c0       	rjmp	.+126    	; 0x3acc <main+0xb90>
	else if (__tmp > 65535)
    3a4e:	69 a9       	ldd	r22, Y+49	; 0x31
    3a50:	7a a9       	ldd	r23, Y+50	; 0x32
    3a52:	8b a9       	ldd	r24, Y+51	; 0x33
    3a54:	9c a9       	ldd	r25, Y+52	; 0x34
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	3f ef       	ldi	r19, 0xFF	; 255
    3a5a:	4f e7       	ldi	r20, 0x7F	; 127
    3a5c:	57 e4       	ldi	r21, 0x47	; 71
    3a5e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3a62:	18 16       	cp	r1, r24
    3a64:	4c f5       	brge	.+82     	; 0x3ab8 <main+0xb7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a66:	6d a9       	ldd	r22, Y+53	; 0x35
    3a68:	7e a9       	ldd	r23, Y+54	; 0x36
    3a6a:	8f a9       	ldd	r24, Y+55	; 0x37
    3a6c:	98 ad       	ldd	r25, Y+56	; 0x38
    3a6e:	20 e0       	ldi	r18, 0x00	; 0
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	40 e2       	ldi	r20, 0x20	; 32
    3a74:	51 e4       	ldi	r21, 0x41	; 65
    3a76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	cb 01       	movw	r24, r22
    3a7e:	bc 01       	movw	r22, r24
    3a80:	cd 01       	movw	r24, r26
    3a82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	98 ab       	std	Y+48, r25	; 0x30
    3a8c:	8f a7       	std	Y+47, r24	; 0x2f
    3a8e:	0f c0       	rjmp	.+30     	; 0x3aae <main+0xb72>
    3a90:	80 e9       	ldi	r24, 0x90	; 144
    3a92:	91 e0       	ldi	r25, 0x01	; 1
    3a94:	9e a7       	std	Y+46, r25	; 0x2e
    3a96:	8d a7       	std	Y+45, r24	; 0x2d
    3a98:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a9a:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	f1 f7       	brne	.-4      	; 0x3a9c <main+0xb60>
    3aa0:	9e a7       	std	Y+46, r25	; 0x2e
    3aa2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aa6:	98 a9       	ldd	r25, Y+48	; 0x30
    3aa8:	01 97       	sbiw	r24, 0x01	; 1
    3aaa:	98 ab       	std	Y+48, r25	; 0x30
    3aac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aae:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ab0:	98 a9       	ldd	r25, Y+48	; 0x30
    3ab2:	00 97       	sbiw	r24, 0x00	; 0
    3ab4:	69 f7       	brne	.-38     	; 0x3a90 <main+0xb54>
    3ab6:	14 c0       	rjmp	.+40     	; 0x3ae0 <main+0xba4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab8:	69 a9       	ldd	r22, Y+49	; 0x31
    3aba:	7a a9       	ldd	r23, Y+50	; 0x32
    3abc:	8b a9       	ldd	r24, Y+51	; 0x33
    3abe:	9c a9       	ldd	r25, Y+52	; 0x34
    3ac0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	98 ab       	std	Y+48, r25	; 0x30
    3aca:	8f a7       	std	Y+47, r24	; 0x2f
    3acc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ace:	98 a9       	ldd	r25, Y+48	; 0x30
    3ad0:	9c a7       	std	Y+44, r25	; 0x2c
    3ad2:	8b a7       	std	Y+43, r24	; 0x2b
    3ad4:	8b a5       	ldd	r24, Y+43	; 0x2b
    3ad6:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ad8:	01 97       	sbiw	r24, 0x01	; 1
    3ada:	f1 f7       	brne	.-4      	; 0x3ad8 <main+0xb9c>
    3adc:	9c a7       	std	Y+44, r25	; 0x2c
    3ade:	8b a7       	std	Y+43, r24	; 0x2b
    		           _delay_ms(200);
    		           key2 = KEYPAD_getPressedKey();
    3ae0:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <KEYPAD_getPressedKey>
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	ee 56       	subi	r30, 0x6E	; 110
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	80 83       	st	Z, r24

    		           showingHighTempKeyPressed(key2,4);
    3aec:	fe 01       	movw	r30, r28
    3aee:	ee 56       	subi	r30, 0x6E	; 110
    3af0:	ff 4f       	sbci	r31, 0xFF	; 255
    3af2:	80 81       	ld	r24, Z
    3af4:	64 e0       	ldi	r22, 0x04	; 4
    3af6:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <showingHighTempKeyPressed>
    		           highTemp+= key2;
    3afa:	9e 01       	movw	r18, r28
    3afc:	21 57       	subi	r18, 0x71	; 113
    3afe:	3f 4f       	sbci	r19, 0xFF	; 255
    3b00:	fe 01       	movw	r30, r28
    3b02:	e1 57       	subi	r30, 0x71	; 113
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	de 01       	movw	r26, r28
    3b08:	ae 56       	subi	r26, 0x6E	; 110
    3b0a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b0c:	90 81       	ld	r25, Z
    3b0e:	8c 91       	ld	r24, X
    3b10:	89 0f       	add	r24, r25
    3b12:	f9 01       	movw	r30, r18
    3b14:	80 83       	st	Z, r24
    3b16:	80 e0       	ldi	r24, 0x00	; 0
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	a8 e4       	ldi	r26, 0x48	; 72
    3b1c:	b3 e4       	ldi	r27, 0x43	; 67
    3b1e:	8f a3       	std	Y+39, r24	; 0x27
    3b20:	98 a7       	std	Y+40, r25	; 0x28
    3b22:	a9 a7       	std	Y+41, r26	; 0x29
    3b24:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b26:	6f a1       	ldd	r22, Y+39	; 0x27
    3b28:	78 a5       	ldd	r23, Y+40	; 0x28
    3b2a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b2e:	20 e0       	ldi	r18, 0x00	; 0
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	4a e7       	ldi	r20, 0x7A	; 122
    3b34:	55 e4       	ldi	r21, 0x45	; 69
    3b36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	8b a3       	std	Y+35, r24	; 0x23
    3b40:	9c a3       	std	Y+36, r25	; 0x24
    3b42:	ad a3       	std	Y+37, r26	; 0x25
    3b44:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b46:	6b a1       	ldd	r22, Y+35	; 0x23
    3b48:	7c a1       	ldd	r23, Y+36	; 0x24
    3b4a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b4c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	40 e8       	ldi	r20, 0x80	; 128
    3b54:	5f e3       	ldi	r21, 0x3F	; 63
    3b56:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3b5a:	88 23       	and	r24, r24
    3b5c:	2c f4       	brge	.+10     	; 0x3b68 <main+0xc2c>
		__ticks = 1;
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	9a a3       	std	Y+34, r25	; 0x22
    3b64:	89 a3       	std	Y+33, r24	; 0x21
    3b66:	3f c0       	rjmp	.+126    	; 0x3be6 <main+0xcaa>
	else if (__tmp > 65535)
    3b68:	6b a1       	ldd	r22, Y+35	; 0x23
    3b6a:	7c a1       	ldd	r23, Y+36	; 0x24
    3b6c:	8d a1       	ldd	r24, Y+37	; 0x25
    3b6e:	9e a1       	ldd	r25, Y+38	; 0x26
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	3f ef       	ldi	r19, 0xFF	; 255
    3b74:	4f e7       	ldi	r20, 0x7F	; 127
    3b76:	57 e4       	ldi	r21, 0x47	; 71
    3b78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3b7c:	18 16       	cp	r1, r24
    3b7e:	4c f5       	brge	.+82     	; 0x3bd2 <main+0xc96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b80:	6f a1       	ldd	r22, Y+39	; 0x27
    3b82:	78 a5       	ldd	r23, Y+40	; 0x28
    3b84:	89 a5       	ldd	r24, Y+41	; 0x29
    3b86:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	40 e2       	ldi	r20, 0x20	; 32
    3b8e:	51 e4       	ldi	r21, 0x41	; 65
    3b90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	bc 01       	movw	r22, r24
    3b9a:	cd 01       	movw	r24, r26
    3b9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	9a a3       	std	Y+34, r25	; 0x22
    3ba6:	89 a3       	std	Y+33, r24	; 0x21
    3ba8:	0f c0       	rjmp	.+30     	; 0x3bc8 <main+0xc8c>
    3baa:	80 e9       	ldi	r24, 0x90	; 144
    3bac:	91 e0       	ldi	r25, 0x01	; 1
    3bae:	98 a3       	std	Y+32, r25	; 0x20
    3bb0:	8f 8f       	std	Y+31, r24	; 0x1f
    3bb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bb4:	98 a1       	ldd	r25, Y+32	; 0x20
    3bb6:	01 97       	sbiw	r24, 0x01	; 1
    3bb8:	f1 f7       	brne	.-4      	; 0x3bb6 <main+0xc7a>
    3bba:	98 a3       	std	Y+32, r25	; 0x20
    3bbc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bbe:	89 a1       	ldd	r24, Y+33	; 0x21
    3bc0:	9a a1       	ldd	r25, Y+34	; 0x22
    3bc2:	01 97       	sbiw	r24, 0x01	; 1
    3bc4:	9a a3       	std	Y+34, r25	; 0x22
    3bc6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc8:	89 a1       	ldd	r24, Y+33	; 0x21
    3bca:	9a a1       	ldd	r25, Y+34	; 0x22
    3bcc:	00 97       	sbiw	r24, 0x00	; 0
    3bce:	69 f7       	brne	.-38     	; 0x3baa <main+0xc6e>
    3bd0:	14 c0       	rjmp	.+40     	; 0x3bfa <main+0xcbe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd2:	6b a1       	ldd	r22, Y+35	; 0x23
    3bd4:	7c a1       	ldd	r23, Y+36	; 0x24
    3bd6:	8d a1       	ldd	r24, Y+37	; 0x25
    3bd8:	9e a1       	ldd	r25, Y+38	; 0x26
    3bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bde:	dc 01       	movw	r26, r24
    3be0:	cb 01       	movw	r24, r22
    3be2:	9a a3       	std	Y+34, r25	; 0x22
    3be4:	89 a3       	std	Y+33, r24	; 0x21
    3be6:	89 a1       	ldd	r24, Y+33	; 0x21
    3be8:	9a a1       	ldd	r25, Y+34	; 0x22
    3bea:	9e 8f       	std	Y+30, r25	; 0x1e
    3bec:	8d 8f       	std	Y+29, r24	; 0x1d
    3bee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bf0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bf2:	01 97       	sbiw	r24, 0x01	; 1
    3bf4:	f1 f7       	brne	.-4      	; 0x3bf2 <main+0xcb6>
    3bf6:	9e 8f       	std	Y+30, r25	; 0x1e
    3bf8:	8d 8f       	std	Y+29, r24	; 0x1d

    		           _delay_ms(200);
    		           key3 = KEYPAD_getPressedKey();
    3bfa:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <KEYPAD_getPressedKey>
    3bfe:	fe 01       	movw	r30, r28
    3c00:	ef 56       	subi	r30, 0x6F	; 111
    3c02:	ff 4f       	sbci	r31, 0xFF	; 255
    3c04:	80 83       	st	Z, r24
    		           showingLowTempKeyPressed(key3,8);
    3c06:	fe 01       	movw	r30, r28
    3c08:	ef 56       	subi	r30, 0x6F	; 111
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	80 81       	ld	r24, Z
    3c0e:	68 e0       	ldi	r22, 0x08	; 8
    3c10:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <showingLowTempKeyPressed>
    		           lowTemp = key3*10;
    3c14:	fe 01       	movw	r30, r28
    3c16:	ef 56       	subi	r30, 0x6F	; 111
    3c18:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1a:	80 81       	ld	r24, Z
    3c1c:	88 2f       	mov	r24, r24
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	9c 01       	movw	r18, r24
    3c22:	22 0f       	add	r18, r18
    3c24:	33 1f       	adc	r19, r19
    3c26:	c9 01       	movw	r24, r18
    3c28:	88 0f       	add	r24, r24
    3c2a:	99 1f       	adc	r25, r25
    3c2c:	88 0f       	add	r24, r24
    3c2e:	99 1f       	adc	r25, r25
    3c30:	82 0f       	add	r24, r18
    3c32:	93 1f       	adc	r25, r19
    3c34:	fe 01       	movw	r30, r28
    3c36:	e2 57       	subi	r30, 0x72	; 114
    3c38:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3a:	80 83       	st	Z, r24
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	a8 e4       	ldi	r26, 0x48	; 72
    3c42:	b3 e4       	ldi	r27, 0x43	; 67
    3c44:	89 8f       	std	Y+25, r24	; 0x19
    3c46:	9a 8f       	std	Y+26, r25	; 0x1a
    3c48:	ab 8f       	std	Y+27, r26	; 0x1b
    3c4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c4c:	69 8d       	ldd	r22, Y+25	; 0x19
    3c4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c54:	20 e0       	ldi	r18, 0x00	; 0
    3c56:	30 e0       	ldi	r19, 0x00	; 0
    3c58:	4a e7       	ldi	r20, 0x7A	; 122
    3c5a:	55 e4       	ldi	r21, 0x45	; 69
    3c5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c60:	dc 01       	movw	r26, r24
    3c62:	cb 01       	movw	r24, r22
    3c64:	8d 8b       	std	Y+21, r24	; 0x15
    3c66:	9e 8b       	std	Y+22, r25	; 0x16
    3c68:	af 8b       	std	Y+23, r26	; 0x17
    3c6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c6c:	6d 89       	ldd	r22, Y+21	; 0x15
    3c6e:	7e 89       	ldd	r23, Y+22	; 0x16
    3c70:	8f 89       	ldd	r24, Y+23	; 0x17
    3c72:	98 8d       	ldd	r25, Y+24	; 0x18
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	40 e8       	ldi	r20, 0x80	; 128
    3c7a:	5f e3       	ldi	r21, 0x3F	; 63
    3c7c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3c80:	88 23       	and	r24, r24
    3c82:	2c f4       	brge	.+10     	; 0x3c8e <main+0xd52>
		__ticks = 1;
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	9c 8b       	std	Y+20, r25	; 0x14
    3c8a:	8b 8b       	std	Y+19, r24	; 0x13
    3c8c:	3f c0       	rjmp	.+126    	; 0x3d0c <main+0xdd0>
	else if (__tmp > 65535)
    3c8e:	6d 89       	ldd	r22, Y+21	; 0x15
    3c90:	7e 89       	ldd	r23, Y+22	; 0x16
    3c92:	8f 89       	ldd	r24, Y+23	; 0x17
    3c94:	98 8d       	ldd	r25, Y+24	; 0x18
    3c96:	20 e0       	ldi	r18, 0x00	; 0
    3c98:	3f ef       	ldi	r19, 0xFF	; 255
    3c9a:	4f e7       	ldi	r20, 0x7F	; 127
    3c9c:	57 e4       	ldi	r21, 0x47	; 71
    3c9e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3ca2:	18 16       	cp	r1, r24
    3ca4:	4c f5       	brge	.+82     	; 0x3cf8 <main+0xdbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ca6:	69 8d       	ldd	r22, Y+25	; 0x19
    3ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	40 e2       	ldi	r20, 0x20	; 32
    3cb4:	51 e4       	ldi	r21, 0x41	; 65
    3cb6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cba:	dc 01       	movw	r26, r24
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	bc 01       	movw	r22, r24
    3cc0:	cd 01       	movw	r24, r26
    3cc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	cb 01       	movw	r24, r22
    3cca:	9c 8b       	std	Y+20, r25	; 0x14
    3ccc:	8b 8b       	std	Y+19, r24	; 0x13
    3cce:	0f c0       	rjmp	.+30     	; 0x3cee <main+0xdb2>
    3cd0:	80 e9       	ldi	r24, 0x90	; 144
    3cd2:	91 e0       	ldi	r25, 0x01	; 1
    3cd4:	9a 8b       	std	Y+18, r25	; 0x12
    3cd6:	89 8b       	std	Y+17, r24	; 0x11
    3cd8:	89 89       	ldd	r24, Y+17	; 0x11
    3cda:	9a 89       	ldd	r25, Y+18	; 0x12
    3cdc:	01 97       	sbiw	r24, 0x01	; 1
    3cde:	f1 f7       	brne	.-4      	; 0x3cdc <main+0xda0>
    3ce0:	9a 8b       	std	Y+18, r25	; 0x12
    3ce2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ce6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ce8:	01 97       	sbiw	r24, 0x01	; 1
    3cea:	9c 8b       	std	Y+20, r25	; 0x14
    3cec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cee:	8b 89       	ldd	r24, Y+19	; 0x13
    3cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    3cf2:	00 97       	sbiw	r24, 0x00	; 0
    3cf4:	69 f7       	brne	.-38     	; 0x3cd0 <main+0xd94>
    3cf6:	14 c0       	rjmp	.+40     	; 0x3d20 <main+0xde4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cf8:	6d 89       	ldd	r22, Y+21	; 0x15
    3cfa:	7e 89       	ldd	r23, Y+22	; 0x16
    3cfc:	8f 89       	ldd	r24, Y+23	; 0x17
    3cfe:	98 8d       	ldd	r25, Y+24	; 0x18
    3d00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d04:	dc 01       	movw	r26, r24
    3d06:	cb 01       	movw	r24, r22
    3d08:	9c 8b       	std	Y+20, r25	; 0x14
    3d0a:	8b 8b       	std	Y+19, r24	; 0x13
    3d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    3d10:	98 8b       	std	Y+16, r25	; 0x10
    3d12:	8f 87       	std	Y+15, r24	; 0x0f
    3d14:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d16:	98 89       	ldd	r25, Y+16	; 0x10
    3d18:	01 97       	sbiw	r24, 0x01	; 1
    3d1a:	f1 f7       	brne	.-4      	; 0x3d18 <main+0xddc>
    3d1c:	98 8b       	std	Y+16, r25	; 0x10
    3d1e:	8f 87       	std	Y+15, r24	; 0x0f
    		           _delay_ms(200);
    		           key4 = KEYPAD_getPressedKey();
    3d20:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <KEYPAD_getPressedKey>
    3d24:	fe 01       	movw	r30, r28
    3d26:	e0 57       	subi	r30, 0x70	; 112
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	80 83       	st	Z, r24
    		           showingLowTempKeyPressed(key4,9);
    3d2c:	fe 01       	movw	r30, r28
    3d2e:	e0 57       	subi	r30, 0x70	; 112
    3d30:	ff 4f       	sbci	r31, 0xFF	; 255
    3d32:	80 81       	ld	r24, Z
    3d34:	69 e0       	ldi	r22, 0x09	; 9
    3d36:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <showingLowTempKeyPressed>
    		           lowTemp += key4;
    3d3a:	9e 01       	movw	r18, r28
    3d3c:	22 57       	subi	r18, 0x72	; 114
    3d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d40:	fe 01       	movw	r30, r28
    3d42:	e2 57       	subi	r30, 0x72	; 114
    3d44:	ff 4f       	sbci	r31, 0xFF	; 255
    3d46:	de 01       	movw	r26, r28
    3d48:	a0 57       	subi	r26, 0x70	; 112
    3d4a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d4c:	90 81       	ld	r25, Z
    3d4e:	8c 91       	ld	r24, X
    3d50:	89 0f       	add	r24, r25
    3d52:	f9 01       	movw	r30, r18
    3d54:	80 83       	st	Z, r24
    3d56:	80 e0       	ldi	r24, 0x00	; 0
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	a6 e9       	ldi	r26, 0x96	; 150
    3d5c:	b3 e4       	ldi	r27, 0x43	; 67
    3d5e:	8b 87       	std	Y+11, r24	; 0x0b
    3d60:	9c 87       	std	Y+12, r25	; 0x0c
    3d62:	ad 87       	std	Y+13, r26	; 0x0d
    3d64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d66:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d68:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d6e:	20 e0       	ldi	r18, 0x00	; 0
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	4a e7       	ldi	r20, 0x7A	; 122
    3d74:	55 e4       	ldi	r21, 0x45	; 69
    3d76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d7a:	dc 01       	movw	r26, r24
    3d7c:	cb 01       	movw	r24, r22
    3d7e:	8f 83       	std	Y+7, r24	; 0x07
    3d80:	98 87       	std	Y+8, r25	; 0x08
    3d82:	a9 87       	std	Y+9, r26	; 0x09
    3d84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d86:	6f 81       	ldd	r22, Y+7	; 0x07
    3d88:	78 85       	ldd	r23, Y+8	; 0x08
    3d8a:	89 85       	ldd	r24, Y+9	; 0x09
    3d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	40 e8       	ldi	r20, 0x80	; 128
    3d94:	5f e3       	ldi	r21, 0x3F	; 63
    3d96:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3d9a:	88 23       	and	r24, r24
    3d9c:	2c f4       	brge	.+10     	; 0x3da8 <main+0xe6c>
		__ticks = 1;
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	9e 83       	std	Y+6, r25	; 0x06
    3da4:	8d 83       	std	Y+5, r24	; 0x05
    3da6:	3f c0       	rjmp	.+126    	; 0x3e26 <main+0xeea>
	else if (__tmp > 65535)
    3da8:	6f 81       	ldd	r22, Y+7	; 0x07
    3daa:	78 85       	ldd	r23, Y+8	; 0x08
    3dac:	89 85       	ldd	r24, Y+9	; 0x09
    3dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	3f ef       	ldi	r19, 0xFF	; 255
    3db4:	4f e7       	ldi	r20, 0x7F	; 127
    3db6:	57 e4       	ldi	r21, 0x47	; 71
    3db8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3dbc:	18 16       	cp	r1, r24
    3dbe:	4c f5       	brge	.+82     	; 0x3e12 <main+0xed6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dc8:	20 e0       	ldi	r18, 0x00	; 0
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	40 e2       	ldi	r20, 0x20	; 32
    3dce:	51 e4       	ldi	r21, 0x41	; 65
    3dd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	bc 01       	movw	r22, r24
    3dda:	cd 01       	movw	r24, r26
    3ddc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3de0:	dc 01       	movw	r26, r24
    3de2:	cb 01       	movw	r24, r22
    3de4:	9e 83       	std	Y+6, r25	; 0x06
    3de6:	8d 83       	std	Y+5, r24	; 0x05
    3de8:	0f c0       	rjmp	.+30     	; 0x3e08 <main+0xecc>
    3dea:	80 e9       	ldi	r24, 0x90	; 144
    3dec:	91 e0       	ldi	r25, 0x01	; 1
    3dee:	9c 83       	std	Y+4, r25	; 0x04
    3df0:	8b 83       	std	Y+3, r24	; 0x03
    3df2:	8b 81       	ldd	r24, Y+3	; 0x03
    3df4:	9c 81       	ldd	r25, Y+4	; 0x04
    3df6:	01 97       	sbiw	r24, 0x01	; 1
    3df8:	f1 f7       	brne	.-4      	; 0x3df6 <main+0xeba>
    3dfa:	9c 83       	std	Y+4, r25	; 0x04
    3dfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    3e00:	9e 81       	ldd	r25, Y+6	; 0x06
    3e02:	01 97       	sbiw	r24, 0x01	; 1
    3e04:	9e 83       	std	Y+6, r25	; 0x06
    3e06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e08:	8d 81       	ldd	r24, Y+5	; 0x05
    3e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e0c:	00 97       	sbiw	r24, 0x00	; 0
    3e0e:	69 f7       	brne	.-38     	; 0x3dea <main+0xeae>
    3e10:	51 cd       	rjmp	.-1374   	; 0x38b4 <main+0x978>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e12:	6f 81       	ldd	r22, Y+7	; 0x07
    3e14:	78 85       	ldd	r23, Y+8	; 0x08
    3e16:	89 85       	ldd	r24, Y+9	; 0x09
    3e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3e1e:	dc 01       	movw	r26, r24
    3e20:	cb 01       	movw	r24, r22
    3e22:	9e 83       	std	Y+6, r25	; 0x06
    3e24:	8d 83       	std	Y+5, r24	; 0x05
    3e26:	8d 81       	ldd	r24, Y+5	; 0x05
    3e28:	9e 81       	ldd	r25, Y+6	; 0x06
    3e2a:	9a 83       	std	Y+2, r25	; 0x02
    3e2c:	89 83       	std	Y+1, r24	; 0x01
    3e2e:	89 81       	ldd	r24, Y+1	; 0x01
    3e30:	9a 81       	ldd	r25, Y+2	; 0x02
    3e32:	01 97       	sbiw	r24, 0x01	; 1
    3e34:	f1 f7       	brne	.-4      	; 0x3e32 <main+0xef6>
    3e36:	9a 83       	std	Y+2, r25	; 0x02
    3e38:	89 83       	std	Y+1, r24	; 0x01
    3e3a:	3c cd       	rjmp	.-1416   	; 0x38b4 <main+0x978>

00003e3c <showingHighTempKeyPressed>:
    }
}


void showingHighTempKeyPressed(uint8 key, uint8 cursor)
{
    3e3c:	df 93       	push	r29
    3e3e:	cf 93       	push	r28
    3e40:	00 d0       	rcall	.+0      	; 0x3e42 <showingHighTempKeyPressed+0x6>
    3e42:	00 d0       	rcall	.+0      	; 0x3e44 <showingHighTempKeyPressed+0x8>
    3e44:	cd b7       	in	r28, 0x3d	; 61
    3e46:	de b7       	in	r29, 0x3e	; 62
    3e48:	89 83       	std	Y+1, r24	; 0x01
    3e4a:	6a 83       	std	Y+2, r22	; 0x02
	        switch(key)
    3e4c:	89 81       	ldd	r24, Y+1	; 0x01
    3e4e:	28 2f       	mov	r18, r24
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	3c 83       	std	Y+4, r19	; 0x04
    3e54:	2b 83       	std	Y+3, r18	; 0x03
    3e56:	8b 81       	ldd	r24, Y+3	; 0x03
    3e58:	9c 81       	ldd	r25, Y+4	; 0x04
    3e5a:	85 30       	cpi	r24, 0x05	; 5
    3e5c:	91 05       	cpc	r25, r1
    3e5e:	09 f4       	brne	.+2      	; 0x3e62 <showingHighTempKeyPressed+0x26>
    3e60:	7c c0       	rjmp	.+248    	; 0x3f5a <showingHighTempKeyPressed+0x11e>
    3e62:	2b 81       	ldd	r18, Y+3	; 0x03
    3e64:	3c 81       	ldd	r19, Y+4	; 0x04
    3e66:	26 30       	cpi	r18, 0x06	; 6
    3e68:	31 05       	cpc	r19, r1
    3e6a:	24 f5       	brge	.+72     	; 0x3eb4 <showingHighTempKeyPressed+0x78>
    3e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e70:	82 30       	cpi	r24, 0x02	; 2
    3e72:	91 05       	cpc	r25, r1
    3e74:	09 f4       	brne	.+2      	; 0x3e78 <showingHighTempKeyPressed+0x3c>
    3e76:	59 c0       	rjmp	.+178    	; 0x3f2a <showingHighTempKeyPressed+0xee>
    3e78:	2b 81       	ldd	r18, Y+3	; 0x03
    3e7a:	3c 81       	ldd	r19, Y+4	; 0x04
    3e7c:	23 30       	cpi	r18, 0x03	; 3
    3e7e:	31 05       	cpc	r19, r1
    3e80:	64 f4       	brge	.+24     	; 0x3e9a <showingHighTempKeyPressed+0x5e>
    3e82:	8b 81       	ldd	r24, Y+3	; 0x03
    3e84:	9c 81       	ldd	r25, Y+4	; 0x04
    3e86:	00 97       	sbiw	r24, 0x00	; 0
    3e88:	09 f4       	brne	.+2      	; 0x3e8c <showingHighTempKeyPressed+0x50>
    3e8a:	3f c0       	rjmp	.+126    	; 0x3f0a <showingHighTempKeyPressed+0xce>
    3e8c:	2b 81       	ldd	r18, Y+3	; 0x03
    3e8e:	3c 81       	ldd	r19, Y+4	; 0x04
    3e90:	21 30       	cpi	r18, 0x01	; 1
    3e92:	31 05       	cpc	r19, r1
    3e94:	09 f4       	brne	.+2      	; 0x3e98 <showingHighTempKeyPressed+0x5c>
    3e96:	41 c0       	rjmp	.+130    	; 0x3f1a <showingHighTempKeyPressed+0xde>
    3e98:	97 c0       	rjmp	.+302    	; 0x3fc8 <showingHighTempKeyPressed+0x18c>
    3e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e9e:	83 30       	cpi	r24, 0x03	; 3
    3ea0:	91 05       	cpc	r25, r1
    3ea2:	09 f4       	brne	.+2      	; 0x3ea6 <showingHighTempKeyPressed+0x6a>
    3ea4:	4a c0       	rjmp	.+148    	; 0x3f3a <showingHighTempKeyPressed+0xfe>
    3ea6:	2b 81       	ldd	r18, Y+3	; 0x03
    3ea8:	3c 81       	ldd	r19, Y+4	; 0x04
    3eaa:	24 30       	cpi	r18, 0x04	; 4
    3eac:	31 05       	cpc	r19, r1
    3eae:	09 f4       	brne	.+2      	; 0x3eb2 <showingHighTempKeyPressed+0x76>
    3eb0:	4c c0       	rjmp	.+152    	; 0x3f4a <showingHighTempKeyPressed+0x10e>
    3eb2:	8a c0       	rjmp	.+276    	; 0x3fc8 <showingHighTempKeyPressed+0x18c>
    3eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb8:	88 30       	cpi	r24, 0x08	; 8
    3eba:	91 05       	cpc	r25, r1
    3ebc:	09 f4       	brne	.+2      	; 0x3ec0 <showingHighTempKeyPressed+0x84>
    3ebe:	65 c0       	rjmp	.+202    	; 0x3f8a <showingHighTempKeyPressed+0x14e>
    3ec0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ec2:	3c 81       	ldd	r19, Y+4	; 0x04
    3ec4:	29 30       	cpi	r18, 0x09	; 9
    3ec6:	31 05       	cpc	r19, r1
    3ec8:	6c f4       	brge	.+26     	; 0x3ee4 <showingHighTempKeyPressed+0xa8>
    3eca:	8b 81       	ldd	r24, Y+3	; 0x03
    3ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ece:	86 30       	cpi	r24, 0x06	; 6
    3ed0:	91 05       	cpc	r25, r1
    3ed2:	09 f4       	brne	.+2      	; 0x3ed6 <showingHighTempKeyPressed+0x9a>
    3ed4:	4a c0       	rjmp	.+148    	; 0x3f6a <showingHighTempKeyPressed+0x12e>
    3ed6:	2b 81       	ldd	r18, Y+3	; 0x03
    3ed8:	3c 81       	ldd	r19, Y+4	; 0x04
    3eda:	27 30       	cpi	r18, 0x07	; 7
    3edc:	31 05       	cpc	r19, r1
    3ede:	09 f4       	brne	.+2      	; 0x3ee2 <showingHighTempKeyPressed+0xa6>
    3ee0:	4c c0       	rjmp	.+152    	; 0x3f7a <showingHighTempKeyPressed+0x13e>
    3ee2:	72 c0       	rjmp	.+228    	; 0x3fc8 <showingHighTempKeyPressed+0x18c>
    3ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ee8:	83 32       	cpi	r24, 0x23	; 35
    3eea:	91 05       	cpc	r25, r1
    3eec:	09 f4       	brne	.+2      	; 0x3ef0 <showingHighTempKeyPressed+0xb4>
    3eee:	65 c0       	rjmp	.+202    	; 0x3fba <showingHighTempKeyPressed+0x17e>
    3ef0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ef2:	3c 81       	ldd	r19, Y+4	; 0x04
    3ef4:	2a 32       	cpi	r18, 0x2A	; 42
    3ef6:	31 05       	cpc	r19, r1
    3ef8:	09 f4       	brne	.+2      	; 0x3efc <showingHighTempKeyPressed+0xc0>
    3efa:	57 c0       	rjmp	.+174    	; 0x3faa <showingHighTempKeyPressed+0x16e>
    3efc:	8b 81       	ldd	r24, Y+3	; 0x03
    3efe:	9c 81       	ldd	r25, Y+4	; 0x04
    3f00:	89 30       	cpi	r24, 0x09	; 9
    3f02:	91 05       	cpc	r25, r1
    3f04:	09 f4       	brne	.+2      	; 0x3f08 <showingHighTempKeyPressed+0xcc>
    3f06:	49 c0       	rjmp	.+146    	; 0x3f9a <showingHighTempKeyPressed+0x15e>
    3f08:	5f c0       	rjmp	.+190    	; 0x3fc8 <showingHighTempKeyPressed+0x18c>
	        		{
	        		case 0:
	        			 LCD_displayStringRowColumn(0 ,cursor,"0");
    3f0a:	2e e9       	ldi	r18, 0x9E	; 158
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
    3f0e:	80 e0       	ldi	r24, 0x00	; 0
    3f10:	6a 81       	ldd	r22, Y+2	; 0x02
    3f12:	a9 01       	movw	r20, r18
    3f14:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    3f18:	57 c0       	rjmp	.+174    	; 0x3fc8 <showingHighTempKeyPressed+0x18c>
	        			break;
	        		case 1:
	        			 LCD_displayStringRowColumn(0 ,cursor,"1");
    3f1a:	20 ea       	ldi	r18, 0xA0	; 160
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	6a 81       	ldd	r22, Y+2	; 0x02
    3f22:	a9 01       	movw	r20, r18
    3f24:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    3f28:	4f c0       	rjmp	.+158    	; 0x3fc8 <showingHighTempKeyPressed+0x18c>
	        			break;
	        		case 2:
	        			 LCD_displayStringRowColumn(0 ,cursor,"2");
    3f2a:	22 ea       	ldi	r18, 0xA2	; 162
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	80 e0       	ldi	r24, 0x00	; 0
    3f30:	6a 81       	ldd	r22, Y+2	; 0x02
    3f32:	a9 01       	movw	r20, r18
    3f34:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    3f38:	47 c0       	rjmp	.+142    	; 0x3fc8 <showingHighTempKeyPressed+0x18c>
	           			 break;
	        		case 3:
	        			 LCD_displayStringRowColumn(0 ,cursor,"3");
    3f3a:	24 ea       	ldi	r18, 0xA4	; 164
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	80 e0       	ldi	r24, 0x00	; 0
    3f40:	6a 81       	ldd	r22, Y+2	; 0x02
    3f42:	a9 01       	movw	r20, r18
    3f44:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    3f48:	3f c0       	rjmp	.+126    	; 0x3fc8 <showingHighTempKeyPressed+0x18c>
	        			break;
	        		case 4:
	        			 LCD_displayStringRowColumn(0 ,cursor,"4");
    3f4a:	26 ea       	ldi	r18, 0xA6	; 166
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	80 e0       	ldi	r24, 0x00	; 0
    3f50:	6a 81       	ldd	r22, Y+2	; 0x02
    3f52:	a9 01       	movw	r20, r18
    3f54:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    3f58:	37 c0       	rjmp	.+110    	; 0x3fc8 <showingHighTempKeyPressed+0x18c>
	        			break;
	        		case 5:
	        			 LCD_displayStringRowColumn(0 ,cursor,"5");
    3f5a:	28 ea       	ldi	r18, 0xA8	; 168
    3f5c:	30 e0       	ldi	r19, 0x00	; 0
    3f5e:	80 e0       	ldi	r24, 0x00	; 0
    3f60:	6a 81       	ldd	r22, Y+2	; 0x02
    3f62:	a9 01       	movw	r20, r18
    3f64:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    3f68:	2f c0       	rjmp	.+94     	; 0x3fc8 <showingHighTempKeyPressed+0x18c>
	        			break;
	        		case 6:
	        			 LCD_displayStringRowColumn(0 ,cursor,"6");
    3f6a:	2a ea       	ldi	r18, 0xAA	; 170
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	80 e0       	ldi	r24, 0x00	; 0
    3f70:	6a 81       	ldd	r22, Y+2	; 0x02
    3f72:	a9 01       	movw	r20, r18
    3f74:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    3f78:	27 c0       	rjmp	.+78     	; 0x3fc8 <showingHighTempKeyPressed+0x18c>
	        			break;
	        		case 7:
	        			 LCD_displayStringRowColumn(0 ,cursor,"7");
    3f7a:	2c ea       	ldi	r18, 0xAC	; 172
    3f7c:	30 e0       	ldi	r19, 0x00	; 0
    3f7e:	80 e0       	ldi	r24, 0x00	; 0
    3f80:	6a 81       	ldd	r22, Y+2	; 0x02
    3f82:	a9 01       	movw	r20, r18
    3f84:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    3f88:	1f c0       	rjmp	.+62     	; 0x3fc8 <showingHighTempKeyPressed+0x18c>
	        			break;
	        		case 8:
	        			 LCD_displayStringRowColumn(0 ,cursor,"8");
    3f8a:	2e ea       	ldi	r18, 0xAE	; 174
    3f8c:	30 e0       	ldi	r19, 0x00	; 0
    3f8e:	80 e0       	ldi	r24, 0x00	; 0
    3f90:	6a 81       	ldd	r22, Y+2	; 0x02
    3f92:	a9 01       	movw	r20, r18
    3f94:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    3f98:	17 c0       	rjmp	.+46     	; 0x3fc8 <showingHighTempKeyPressed+0x18c>
	        			break;
	        		case 9:
	        			 LCD_displayStringRowColumn(0 ,cursor,"9");
    3f9a:	20 eb       	ldi	r18, 0xB0	; 176
    3f9c:	30 e0       	ldi	r19, 0x00	; 0
    3f9e:	80 e0       	ldi	r24, 0x00	; 0
    3fa0:	6a 81       	ldd	r22, Y+2	; 0x02
    3fa2:	a9 01       	movw	r20, r18
    3fa4:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    3fa8:	0f c0       	rjmp	.+30     	; 0x3fc8 <showingHighTempKeyPressed+0x18c>
	        			break;
	        		case '*':
	        			 LCD_displayStringRowColumn(0 ,cursor,"0");
    3faa:	2e e9       	ldi	r18, 0x9E	; 158
    3fac:	30 e0       	ldi	r19, 0x00	; 0
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	6a 81       	ldd	r22, Y+2	; 0x02
    3fb2:	a9 01       	movw	r20, r18
    3fb4:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    3fb8:	07 c0       	rjmp	.+14     	; 0x3fc8 <showingHighTempKeyPressed+0x18c>
	        			break;
	        		case '#':
	        			 LCD_displayStringRowColumn(0 ,cursor,"0");
    3fba:	2e e9       	ldi	r18, 0x9E	; 158
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	80 e0       	ldi	r24, 0x00	; 0
    3fc0:	6a 81       	ldd	r22, Y+2	; 0x02
    3fc2:	a9 01       	movw	r20, r18
    3fc4:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
	        			break;
	        		}
}
    3fc8:	0f 90       	pop	r0
    3fca:	0f 90       	pop	r0
    3fcc:	0f 90       	pop	r0
    3fce:	0f 90       	pop	r0
    3fd0:	cf 91       	pop	r28
    3fd2:	df 91       	pop	r29
    3fd4:	08 95       	ret

00003fd6 <showingLowTempKeyPressed>:


void showingLowTempKeyPressed(uint8 key, uint8 cursor)
{
    3fd6:	df 93       	push	r29
    3fd8:	cf 93       	push	r28
    3fda:	00 d0       	rcall	.+0      	; 0x3fdc <showingLowTempKeyPressed+0x6>
    3fdc:	00 d0       	rcall	.+0      	; 0x3fde <showingLowTempKeyPressed+0x8>
    3fde:	cd b7       	in	r28, 0x3d	; 61
    3fe0:	de b7       	in	r29, 0x3e	; 62
    3fe2:	89 83       	std	Y+1, r24	; 0x01
    3fe4:	6a 83       	std	Y+2, r22	; 0x02
	        switch(key)
    3fe6:	89 81       	ldd	r24, Y+1	; 0x01
    3fe8:	28 2f       	mov	r18, r24
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	3c 83       	std	Y+4, r19	; 0x04
    3fee:	2b 83       	std	Y+3, r18	; 0x03
    3ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff4:	85 30       	cpi	r24, 0x05	; 5
    3ff6:	91 05       	cpc	r25, r1
    3ff8:	09 f4       	brne	.+2      	; 0x3ffc <showingLowTempKeyPressed+0x26>
    3ffa:	7c c0       	rjmp	.+248    	; 0x40f4 <showingLowTempKeyPressed+0x11e>
    3ffc:	2b 81       	ldd	r18, Y+3	; 0x03
    3ffe:	3c 81       	ldd	r19, Y+4	; 0x04
    4000:	26 30       	cpi	r18, 0x06	; 6
    4002:	31 05       	cpc	r19, r1
    4004:	24 f5       	brge	.+72     	; 0x404e <showingLowTempKeyPressed+0x78>
    4006:	8b 81       	ldd	r24, Y+3	; 0x03
    4008:	9c 81       	ldd	r25, Y+4	; 0x04
    400a:	82 30       	cpi	r24, 0x02	; 2
    400c:	91 05       	cpc	r25, r1
    400e:	09 f4       	brne	.+2      	; 0x4012 <showingLowTempKeyPressed+0x3c>
    4010:	59 c0       	rjmp	.+178    	; 0x40c4 <showingLowTempKeyPressed+0xee>
    4012:	2b 81       	ldd	r18, Y+3	; 0x03
    4014:	3c 81       	ldd	r19, Y+4	; 0x04
    4016:	23 30       	cpi	r18, 0x03	; 3
    4018:	31 05       	cpc	r19, r1
    401a:	64 f4       	brge	.+24     	; 0x4034 <showingLowTempKeyPressed+0x5e>
    401c:	8b 81       	ldd	r24, Y+3	; 0x03
    401e:	9c 81       	ldd	r25, Y+4	; 0x04
    4020:	00 97       	sbiw	r24, 0x00	; 0
    4022:	09 f4       	brne	.+2      	; 0x4026 <showingLowTempKeyPressed+0x50>
    4024:	3f c0       	rjmp	.+126    	; 0x40a4 <showingLowTempKeyPressed+0xce>
    4026:	2b 81       	ldd	r18, Y+3	; 0x03
    4028:	3c 81       	ldd	r19, Y+4	; 0x04
    402a:	21 30       	cpi	r18, 0x01	; 1
    402c:	31 05       	cpc	r19, r1
    402e:	09 f4       	brne	.+2      	; 0x4032 <showingLowTempKeyPressed+0x5c>
    4030:	41 c0       	rjmp	.+130    	; 0x40b4 <showingLowTempKeyPressed+0xde>
    4032:	97 c0       	rjmp	.+302    	; 0x4162 <showingLowTempKeyPressed+0x18c>
    4034:	8b 81       	ldd	r24, Y+3	; 0x03
    4036:	9c 81       	ldd	r25, Y+4	; 0x04
    4038:	83 30       	cpi	r24, 0x03	; 3
    403a:	91 05       	cpc	r25, r1
    403c:	09 f4       	brne	.+2      	; 0x4040 <showingLowTempKeyPressed+0x6a>
    403e:	4a c0       	rjmp	.+148    	; 0x40d4 <showingLowTempKeyPressed+0xfe>
    4040:	2b 81       	ldd	r18, Y+3	; 0x03
    4042:	3c 81       	ldd	r19, Y+4	; 0x04
    4044:	24 30       	cpi	r18, 0x04	; 4
    4046:	31 05       	cpc	r19, r1
    4048:	09 f4       	brne	.+2      	; 0x404c <showingLowTempKeyPressed+0x76>
    404a:	4c c0       	rjmp	.+152    	; 0x40e4 <showingLowTempKeyPressed+0x10e>
    404c:	8a c0       	rjmp	.+276    	; 0x4162 <showingLowTempKeyPressed+0x18c>
    404e:	8b 81       	ldd	r24, Y+3	; 0x03
    4050:	9c 81       	ldd	r25, Y+4	; 0x04
    4052:	88 30       	cpi	r24, 0x08	; 8
    4054:	91 05       	cpc	r25, r1
    4056:	09 f4       	brne	.+2      	; 0x405a <showingLowTempKeyPressed+0x84>
    4058:	65 c0       	rjmp	.+202    	; 0x4124 <showingLowTempKeyPressed+0x14e>
    405a:	2b 81       	ldd	r18, Y+3	; 0x03
    405c:	3c 81       	ldd	r19, Y+4	; 0x04
    405e:	29 30       	cpi	r18, 0x09	; 9
    4060:	31 05       	cpc	r19, r1
    4062:	6c f4       	brge	.+26     	; 0x407e <showingLowTempKeyPressed+0xa8>
    4064:	8b 81       	ldd	r24, Y+3	; 0x03
    4066:	9c 81       	ldd	r25, Y+4	; 0x04
    4068:	86 30       	cpi	r24, 0x06	; 6
    406a:	91 05       	cpc	r25, r1
    406c:	09 f4       	brne	.+2      	; 0x4070 <showingLowTempKeyPressed+0x9a>
    406e:	4a c0       	rjmp	.+148    	; 0x4104 <showingLowTempKeyPressed+0x12e>
    4070:	2b 81       	ldd	r18, Y+3	; 0x03
    4072:	3c 81       	ldd	r19, Y+4	; 0x04
    4074:	27 30       	cpi	r18, 0x07	; 7
    4076:	31 05       	cpc	r19, r1
    4078:	09 f4       	brne	.+2      	; 0x407c <showingLowTempKeyPressed+0xa6>
    407a:	4c c0       	rjmp	.+152    	; 0x4114 <showingLowTempKeyPressed+0x13e>
    407c:	72 c0       	rjmp	.+228    	; 0x4162 <showingLowTempKeyPressed+0x18c>
    407e:	8b 81       	ldd	r24, Y+3	; 0x03
    4080:	9c 81       	ldd	r25, Y+4	; 0x04
    4082:	83 32       	cpi	r24, 0x23	; 35
    4084:	91 05       	cpc	r25, r1
    4086:	09 f4       	brne	.+2      	; 0x408a <showingLowTempKeyPressed+0xb4>
    4088:	65 c0       	rjmp	.+202    	; 0x4154 <showingLowTempKeyPressed+0x17e>
    408a:	2b 81       	ldd	r18, Y+3	; 0x03
    408c:	3c 81       	ldd	r19, Y+4	; 0x04
    408e:	2a 32       	cpi	r18, 0x2A	; 42
    4090:	31 05       	cpc	r19, r1
    4092:	09 f4       	brne	.+2      	; 0x4096 <showingLowTempKeyPressed+0xc0>
    4094:	57 c0       	rjmp	.+174    	; 0x4144 <showingLowTempKeyPressed+0x16e>
    4096:	8b 81       	ldd	r24, Y+3	; 0x03
    4098:	9c 81       	ldd	r25, Y+4	; 0x04
    409a:	89 30       	cpi	r24, 0x09	; 9
    409c:	91 05       	cpc	r25, r1
    409e:	09 f4       	brne	.+2      	; 0x40a2 <showingLowTempKeyPressed+0xcc>
    40a0:	49 c0       	rjmp	.+146    	; 0x4134 <showingLowTempKeyPressed+0x15e>
    40a2:	5f c0       	rjmp	.+190    	; 0x4162 <showingLowTempKeyPressed+0x18c>
	        		{
	        		case 0:
	        			 LCD_displayStringRowColumn(0 , cursor,"0");
    40a4:	2e e9       	ldi	r18, 0x9E	; 158
    40a6:	30 e0       	ldi	r19, 0x00	; 0
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	6a 81       	ldd	r22, Y+2	; 0x02
    40ac:	a9 01       	movw	r20, r18
    40ae:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    40b2:	57 c0       	rjmp	.+174    	; 0x4162 <showingLowTempKeyPressed+0x18c>
	        			break;
	        		case 1:
	        			 LCD_displayStringRowColumn(0 ,cursor,"1");
    40b4:	20 ea       	ldi	r18, 0xA0	; 160
    40b6:	30 e0       	ldi	r19, 0x00	; 0
    40b8:	80 e0       	ldi	r24, 0x00	; 0
    40ba:	6a 81       	ldd	r22, Y+2	; 0x02
    40bc:	a9 01       	movw	r20, r18
    40be:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    40c2:	4f c0       	rjmp	.+158    	; 0x4162 <showingLowTempKeyPressed+0x18c>
	        			break;
	        		case 2:
	        			 LCD_displayStringRowColumn(0 ,cursor,"2");
    40c4:	22 ea       	ldi	r18, 0xA2	; 162
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	6a 81       	ldd	r22, Y+2	; 0x02
    40cc:	a9 01       	movw	r20, r18
    40ce:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    40d2:	47 c0       	rjmp	.+142    	; 0x4162 <showingLowTempKeyPressed+0x18c>
	           			 break;
	        		case 3:
	        			 LCD_displayStringRowColumn(0 ,cursor,"3");
    40d4:	24 ea       	ldi	r18, 0xA4	; 164
    40d6:	30 e0       	ldi	r19, 0x00	; 0
    40d8:	80 e0       	ldi	r24, 0x00	; 0
    40da:	6a 81       	ldd	r22, Y+2	; 0x02
    40dc:	a9 01       	movw	r20, r18
    40de:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    40e2:	3f c0       	rjmp	.+126    	; 0x4162 <showingLowTempKeyPressed+0x18c>
	        			break;
	        		case 4:
	        			 LCD_displayStringRowColumn(0 ,cursor,"4");
    40e4:	26 ea       	ldi	r18, 0xA6	; 166
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	80 e0       	ldi	r24, 0x00	; 0
    40ea:	6a 81       	ldd	r22, Y+2	; 0x02
    40ec:	a9 01       	movw	r20, r18
    40ee:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    40f2:	37 c0       	rjmp	.+110    	; 0x4162 <showingLowTempKeyPressed+0x18c>
	        			break;
	        		case 5:
	        			 LCD_displayStringRowColumn(0 ,cursor,"5");
    40f4:	28 ea       	ldi	r18, 0xA8	; 168
    40f6:	30 e0       	ldi	r19, 0x00	; 0
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	6a 81       	ldd	r22, Y+2	; 0x02
    40fc:	a9 01       	movw	r20, r18
    40fe:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    4102:	2f c0       	rjmp	.+94     	; 0x4162 <showingLowTempKeyPressed+0x18c>
	        			break;
	        		case 6:
	        			 LCD_displayStringRowColumn(0 ,cursor,"6");
    4104:	2a ea       	ldi	r18, 0xAA	; 170
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	6a 81       	ldd	r22, Y+2	; 0x02
    410c:	a9 01       	movw	r20, r18
    410e:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    4112:	27 c0       	rjmp	.+78     	; 0x4162 <showingLowTempKeyPressed+0x18c>
	        			break;
	        		case 7:
	        			 LCD_displayStringRowColumn(0 ,cursor,"7");
    4114:	2c ea       	ldi	r18, 0xAC	; 172
    4116:	30 e0       	ldi	r19, 0x00	; 0
    4118:	80 e0       	ldi	r24, 0x00	; 0
    411a:	6a 81       	ldd	r22, Y+2	; 0x02
    411c:	a9 01       	movw	r20, r18
    411e:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    4122:	1f c0       	rjmp	.+62     	; 0x4162 <showingLowTempKeyPressed+0x18c>
	        			break;
	        		case 8:
	        			 LCD_displayStringRowColumn(0 ,cursor,"8");
    4124:	2e ea       	ldi	r18, 0xAE	; 174
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	6a 81       	ldd	r22, Y+2	; 0x02
    412c:	a9 01       	movw	r20, r18
    412e:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    4132:	17 c0       	rjmp	.+46     	; 0x4162 <showingLowTempKeyPressed+0x18c>
	        			break;
	        		case 9:
	        			 LCD_displayStringRowColumn(0 ,cursor,"9");
    4134:	20 eb       	ldi	r18, 0xB0	; 176
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	6a 81       	ldd	r22, Y+2	; 0x02
    413c:	a9 01       	movw	r20, r18
    413e:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    4142:	0f c0       	rjmp	.+30     	; 0x4162 <showingLowTempKeyPressed+0x18c>
	        			break;
	        		case '*':
	        			 LCD_displayStringRowColumn(0 ,cursor,"0");
    4144:	2e e9       	ldi	r18, 0x9E	; 158
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	80 e0       	ldi	r24, 0x00	; 0
    414a:	6a 81       	ldd	r22, Y+2	; 0x02
    414c:	a9 01       	movw	r20, r18
    414e:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
    4152:	07 c0       	rjmp	.+14     	; 0x4162 <showingLowTempKeyPressed+0x18c>
	        			break;
	        		case '#':
	        			 LCD_displayStringRowColumn(0 ,cursor,"0");
    4154:	2e e9       	ldi	r18, 0x9E	; 158
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	80 e0       	ldi	r24, 0x00	; 0
    415a:	6a 81       	ldd	r22, Y+2	; 0x02
    415c:	a9 01       	movw	r20, r18
    415e:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <LCD_displayStringRowColumn>
	        			break;
	        		}
}
    4162:	0f 90       	pop	r0
    4164:	0f 90       	pop	r0
    4166:	0f 90       	pop	r0
    4168:	0f 90       	pop	r0
    416a:	cf 91       	pop	r28
    416c:	df 91       	pop	r29
    416e:	08 95       	ret

00004170 <PWM_Timer0_Start>:
Prescaler: F_CPU/1024
Non-inverting mode
The function configures OC0 as the output pin.
Parameters:
duty_cycle: Percentage (0 to 100%) representing the PWM duty cycle.*/
void PWM_Timer0_Start(uint8 duty_cycle){
    4170:	df 93       	push	r29
    4172:	cf 93       	push	r28
    4174:	0f 92       	push	r0
    4176:	cd b7       	in	r28, 0x3d	; 61
    4178:	de b7       	in	r29, 0x3e	; 62
    417a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //Set Timer Initial value
    417c:	e2 e5       	ldi	r30, 0x52	; 82
    417e:	f0 e0       	ldi	r31, 0x00	; 0
    4180:	10 82       	st	Z, r1

	// Set Fast PWM Mode by setting WGM01 and WGM00
	SET_BIT(TCCR0,WGM00);
    4182:	a3 e5       	ldi	r26, 0x53	; 83
    4184:	b0 e0       	ldi	r27, 0x00	; 0
    4186:	e3 e5       	ldi	r30, 0x53	; 83
    4188:	f0 e0       	ldi	r31, 0x00	; 0
    418a:	80 81       	ld	r24, Z
    418c:	80 64       	ori	r24, 0x40	; 64
    418e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    4190:	a3 e5       	ldi	r26, 0x53	; 83
    4192:	b0 e0       	ldi	r27, 0x00	; 0
    4194:	e3 e5       	ldi	r30, 0x53	; 83
    4196:	f0 e0       	ldi	r31, 0x00	; 0
    4198:	80 81       	ld	r24, Z
    419a:	88 60       	ori	r24, 0x08	; 8
    419c:	8c 93       	st	X, r24

	// Set Non-Inverting Mode by setting COM01 and clearing COM00
	 SET_BIT(TCCR0,COM01);
    419e:	a3 e5       	ldi	r26, 0x53	; 83
    41a0:	b0 e0       	ldi	r27, 0x00	; 0
    41a2:	e3 e5       	ldi	r30, 0x53	; 83
    41a4:	f0 e0       	ldi	r31, 0x00	; 0
    41a6:	80 81       	ld	r24, Z
    41a8:	80 62       	ori	r24, 0x20	; 32
    41aa:	8c 93       	st	X, r24
	 CLEAR_BIT(TCCR0,COM00);
    41ac:	a3 e5       	ldi	r26, 0x53	; 83
    41ae:	b0 e0       	ldi	r27, 0x00	; 0
    41b0:	e3 e5       	ldi	r30, 0x53	; 83
    41b2:	f0 e0       	ldi	r31, 0x00	; 0
    41b4:	80 81       	ld	r24, Z
    41b6:	8f 7e       	andi	r24, 0xEF	; 239
    41b8:	8c 93       	st	X, r24

	/* clock = F_CPU/1024 CS00=1 CS01=0 CS02=1*/
	SET_BIT(TCCR0,CS00);
    41ba:	a3 e5       	ldi	r26, 0x53	; 83
    41bc:	b0 e0       	ldi	r27, 0x00	; 0
    41be:	e3 e5       	ldi	r30, 0x53	; 83
    41c0:	f0 e0       	ldi	r31, 0x00	; 0
    41c2:	80 81       	ld	r24, Z
    41c4:	81 60       	ori	r24, 0x01	; 1
    41c6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS01);
    41c8:	a3 e5       	ldi	r26, 0x53	; 83
    41ca:	b0 e0       	ldi	r27, 0x00	; 0
    41cc:	e3 e5       	ldi	r30, 0x53	; 83
    41ce:	f0 e0       	ldi	r31, 0x00	; 0
    41d0:	80 81       	ld	r24, Z
    41d2:	8d 7f       	andi	r24, 0xFD	; 253
    41d4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
    41d6:	a3 e5       	ldi	r26, 0x53	; 83
    41d8:	b0 e0       	ldi	r27, 0x00	; 0
    41da:	e3 e5       	ldi	r30, 0x53	; 83
    41dc:	f0 e0       	ldi	r31, 0x00	; 0
    41de:	80 81       	ld	r24, Z
    41e0:	84 60       	ori	r24, 0x04	; 4
    41e2:	8c 93       	st	X, r24

	/* Set Compare Value (Duty Cycle here is Percentage) */
	OCR0 =duty_cycle;
    41e4:	ec e5       	ldi	r30, 0x5C	; 92
    41e6:	f0 e0       	ldi	r31, 0x00	; 0
    41e8:	89 81       	ldd	r24, Y+1	; 0x01
    41ea:	80 83       	st	Z, r24

	/* Set PB3/OC0 as Output pin --> pin where the PWM signal is generated from MC. */
	GPIO_setupPinDirection(OC0_PORT_ID, OC0_PIN_ID, PIN_OUTPUT);
    41ec:	81 e0       	ldi	r24, 0x01	; 1
    41ee:	63 e0       	ldi	r22, 0x03	; 3
    41f0:	41 e0       	ldi	r20, 0x01	; 1
    41f2:	0e 94 07 08 	call	0x100e	; 0x100e <GPIO_setupPinDirection>
}
    41f6:	0f 90       	pop	r0
    41f8:	cf 91       	pop	r28
    41fa:	df 91       	pop	r29
    41fc:	08 95       	ret

000041fe <LM35_getTemperature>:
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */

	 uint8 LM35_getTemperature(void)
	 {
    41fe:	df 93       	push	r29
    4200:	cf 93       	push	r28
    4202:	00 d0       	rcall	.+0      	; 0x4204 <LM35_getTemperature+0x6>
    4204:	0f 92       	push	r0
    4206:	cd b7       	in	r28, 0x3d	; 61
    4208:	de b7       	in	r29, 0x3e	; 62
		 uint8 temp_value = 0;
    420a:	1b 82       	std	Y+3, r1	; 0x03

		 uint16 adc_value = 0;
    420c:	1a 82       	std	Y+2, r1	; 0x02
    420e:	19 82       	std	Y+1, r1	; 0x01

		 /* Read ADC channel where the temperature sensor is connected */
		 adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    4210:	87 e0       	ldi	r24, 0x07	; 7
    4212:	0e 94 47 07 	call	0xe8e	; 0xe8e <ADC_readChannel>
    4216:	9a 83       	std	Y+2, r25	; 0x02
    4218:	89 83       	std	Y+1, r24	; 0x01

		 /* Calculate the temperature from the ADC value*/
		 temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*2.56)/(1023*SENSOR_MAX_VOLT_VALUE));
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	9a 81       	ldd	r25, Y+2	; 0x02
    421e:	cc 01       	movw	r24, r24
    4220:	a0 e0       	ldi	r26, 0x00	; 0
    4222:	b0 e0       	ldi	r27, 0x00	; 0
    4224:	26 e9       	ldi	r18, 0x96	; 150
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	40 e0       	ldi	r20, 0x00	; 0
    422a:	50 e0       	ldi	r21, 0x00	; 0
    422c:	bc 01       	movw	r22, r24
    422e:	cd 01       	movw	r24, r26
    4230:	0e 94 44 21 	call	0x4288	; 0x4288 <__mulsi3>
    4234:	dc 01       	movw	r26, r24
    4236:	cb 01       	movw	r24, r22
    4238:	bc 01       	movw	r22, r24
    423a:	cd 01       	movw	r24, r26
    423c:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    4240:	dc 01       	movw	r26, r24
    4242:	cb 01       	movw	r24, r22
    4244:	bc 01       	movw	r22, r24
    4246:	cd 01       	movw	r24, r26
    4248:	2a e0       	ldi	r18, 0x0A	; 10
    424a:	37 ed       	ldi	r19, 0xD7	; 215
    424c:	43 e2       	ldi	r20, 0x23	; 35
    424e:	50 e4       	ldi	r21, 0x40	; 64
    4250:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4254:	dc 01       	movw	r26, r24
    4256:	cb 01       	movw	r24, r22
    4258:	bc 01       	movw	r22, r24
    425a:	cd 01       	movw	r24, r26
    425c:	20 e0       	ldi	r18, 0x00	; 0
    425e:	30 ed       	ldi	r19, 0xD0	; 208
    4260:	4f eb       	ldi	r20, 0xBF	; 191
    4262:	54 e4       	ldi	r21, 0x44	; 68
    4264:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    4268:	dc 01       	movw	r26, r24
    426a:	cb 01       	movw	r24, r22
    426c:	bc 01       	movw	r22, r24
    426e:	cd 01       	movw	r24, r26
    4270:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4274:	dc 01       	movw	r26, r24
    4276:	cb 01       	movw	r24, r22
    4278:	8b 83       	std	Y+3, r24	; 0x03

		 return temp_value;
    427a:	8b 81       	ldd	r24, Y+3	; 0x03
	 }
    427c:	0f 90       	pop	r0
    427e:	0f 90       	pop	r0
    4280:	0f 90       	pop	r0
    4282:	cf 91       	pop	r28
    4284:	df 91       	pop	r29
    4286:	08 95       	ret

00004288 <__mulsi3>:
    4288:	62 9f       	mul	r22, r18
    428a:	d0 01       	movw	r26, r0
    428c:	73 9f       	mul	r23, r19
    428e:	f0 01       	movw	r30, r0
    4290:	82 9f       	mul	r24, r18
    4292:	e0 0d       	add	r30, r0
    4294:	f1 1d       	adc	r31, r1
    4296:	64 9f       	mul	r22, r20
    4298:	e0 0d       	add	r30, r0
    429a:	f1 1d       	adc	r31, r1
    429c:	92 9f       	mul	r25, r18
    429e:	f0 0d       	add	r31, r0
    42a0:	83 9f       	mul	r24, r19
    42a2:	f0 0d       	add	r31, r0
    42a4:	74 9f       	mul	r23, r20
    42a6:	f0 0d       	add	r31, r0
    42a8:	65 9f       	mul	r22, r21
    42aa:	f0 0d       	add	r31, r0
    42ac:	99 27       	eor	r25, r25
    42ae:	72 9f       	mul	r23, r18
    42b0:	b0 0d       	add	r27, r0
    42b2:	e1 1d       	adc	r30, r1
    42b4:	f9 1f       	adc	r31, r25
    42b6:	63 9f       	mul	r22, r19
    42b8:	b0 0d       	add	r27, r0
    42ba:	e1 1d       	adc	r30, r1
    42bc:	f9 1f       	adc	r31, r25
    42be:	bd 01       	movw	r22, r26
    42c0:	cf 01       	movw	r24, r30
    42c2:	11 24       	eor	r1, r1
    42c4:	08 95       	ret

000042c6 <__prologue_saves__>:
    42c6:	2f 92       	push	r2
    42c8:	3f 92       	push	r3
    42ca:	4f 92       	push	r4
    42cc:	5f 92       	push	r5
    42ce:	6f 92       	push	r6
    42d0:	7f 92       	push	r7
    42d2:	8f 92       	push	r8
    42d4:	9f 92       	push	r9
    42d6:	af 92       	push	r10
    42d8:	bf 92       	push	r11
    42da:	cf 92       	push	r12
    42dc:	df 92       	push	r13
    42de:	ef 92       	push	r14
    42e0:	ff 92       	push	r15
    42e2:	0f 93       	push	r16
    42e4:	1f 93       	push	r17
    42e6:	cf 93       	push	r28
    42e8:	df 93       	push	r29
    42ea:	cd b7       	in	r28, 0x3d	; 61
    42ec:	de b7       	in	r29, 0x3e	; 62
    42ee:	ca 1b       	sub	r28, r26
    42f0:	db 0b       	sbc	r29, r27
    42f2:	0f b6       	in	r0, 0x3f	; 63
    42f4:	f8 94       	cli
    42f6:	de bf       	out	0x3e, r29	; 62
    42f8:	0f be       	out	0x3f, r0	; 63
    42fa:	cd bf       	out	0x3d, r28	; 61
    42fc:	09 94       	ijmp

000042fe <__epilogue_restores__>:
    42fe:	2a 88       	ldd	r2, Y+18	; 0x12
    4300:	39 88       	ldd	r3, Y+17	; 0x11
    4302:	48 88       	ldd	r4, Y+16	; 0x10
    4304:	5f 84       	ldd	r5, Y+15	; 0x0f
    4306:	6e 84       	ldd	r6, Y+14	; 0x0e
    4308:	7d 84       	ldd	r7, Y+13	; 0x0d
    430a:	8c 84       	ldd	r8, Y+12	; 0x0c
    430c:	9b 84       	ldd	r9, Y+11	; 0x0b
    430e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4310:	b9 84       	ldd	r11, Y+9	; 0x09
    4312:	c8 84       	ldd	r12, Y+8	; 0x08
    4314:	df 80       	ldd	r13, Y+7	; 0x07
    4316:	ee 80       	ldd	r14, Y+6	; 0x06
    4318:	fd 80       	ldd	r15, Y+5	; 0x05
    431a:	0c 81       	ldd	r16, Y+4	; 0x04
    431c:	1b 81       	ldd	r17, Y+3	; 0x03
    431e:	aa 81       	ldd	r26, Y+2	; 0x02
    4320:	b9 81       	ldd	r27, Y+1	; 0x01
    4322:	ce 0f       	add	r28, r30
    4324:	d1 1d       	adc	r29, r1
    4326:	0f b6       	in	r0, 0x3f	; 63
    4328:	f8 94       	cli
    432a:	de bf       	out	0x3e, r29	; 62
    432c:	0f be       	out	0x3f, r0	; 63
    432e:	cd bf       	out	0x3d, r28	; 61
    4330:	ed 01       	movw	r28, r26
    4332:	08 95       	ret

00004334 <itoa>:
    4334:	fb 01       	movw	r30, r22
    4336:	9f 01       	movw	r18, r30
    4338:	e8 94       	clt
    433a:	42 30       	cpi	r20, 0x02	; 2
    433c:	c4 f0       	brlt	.+48     	; 0x436e <itoa+0x3a>
    433e:	45 32       	cpi	r20, 0x25	; 37
    4340:	b4 f4       	brge	.+44     	; 0x436e <itoa+0x3a>
    4342:	4a 30       	cpi	r20, 0x0A	; 10
    4344:	29 f4       	brne	.+10     	; 0x4350 <itoa+0x1c>
    4346:	97 fb       	bst	r25, 7
    4348:	1e f4       	brtc	.+6      	; 0x4350 <itoa+0x1c>
    434a:	90 95       	com	r25
    434c:	81 95       	neg	r24
    434e:	9f 4f       	sbci	r25, 0xFF	; 255
    4350:	64 2f       	mov	r22, r20
    4352:	77 27       	eor	r23, r23
    4354:	0e 94 cb 21 	call	0x4396	; 0x4396 <__udivmodhi4>
    4358:	80 5d       	subi	r24, 0xD0	; 208
    435a:	8a 33       	cpi	r24, 0x3A	; 58
    435c:	0c f0       	brlt	.+2      	; 0x4360 <itoa+0x2c>
    435e:	89 5d       	subi	r24, 0xD9	; 217
    4360:	81 93       	st	Z+, r24
    4362:	cb 01       	movw	r24, r22
    4364:	00 97       	sbiw	r24, 0x00	; 0
    4366:	a1 f7       	brne	.-24     	; 0x4350 <itoa+0x1c>
    4368:	16 f4       	brtc	.+4      	; 0x436e <itoa+0x3a>
    436a:	5d e2       	ldi	r21, 0x2D	; 45
    436c:	51 93       	st	Z+, r21
    436e:	10 82       	st	Z, r1
    4370:	c9 01       	movw	r24, r18
    4372:	0c 94 bb 21 	jmp	0x4376	; 0x4376 <strrev>

00004376 <strrev>:
    4376:	dc 01       	movw	r26, r24
    4378:	fc 01       	movw	r30, r24
    437a:	67 2f       	mov	r22, r23
    437c:	71 91       	ld	r23, Z+
    437e:	77 23       	and	r23, r23
    4380:	e1 f7       	brne	.-8      	; 0x437a <strrev+0x4>
    4382:	32 97       	sbiw	r30, 0x02	; 2
    4384:	04 c0       	rjmp	.+8      	; 0x438e <strrev+0x18>
    4386:	7c 91       	ld	r23, X
    4388:	6d 93       	st	X+, r22
    438a:	70 83       	st	Z, r23
    438c:	62 91       	ld	r22, -Z
    438e:	ae 17       	cp	r26, r30
    4390:	bf 07       	cpc	r27, r31
    4392:	c8 f3       	brcs	.-14     	; 0x4386 <strrev+0x10>
    4394:	08 95       	ret

00004396 <__udivmodhi4>:
    4396:	aa 1b       	sub	r26, r26
    4398:	bb 1b       	sub	r27, r27
    439a:	51 e1       	ldi	r21, 0x11	; 17
    439c:	07 c0       	rjmp	.+14     	; 0x43ac <__udivmodhi4_ep>

0000439e <__udivmodhi4_loop>:
    439e:	aa 1f       	adc	r26, r26
    43a0:	bb 1f       	adc	r27, r27
    43a2:	a6 17       	cp	r26, r22
    43a4:	b7 07       	cpc	r27, r23
    43a6:	10 f0       	brcs	.+4      	; 0x43ac <__udivmodhi4_ep>
    43a8:	a6 1b       	sub	r26, r22
    43aa:	b7 0b       	sbc	r27, r23

000043ac <__udivmodhi4_ep>:
    43ac:	88 1f       	adc	r24, r24
    43ae:	99 1f       	adc	r25, r25
    43b0:	5a 95       	dec	r21
    43b2:	a9 f7       	brne	.-22     	; 0x439e <__udivmodhi4_loop>
    43b4:	80 95       	com	r24
    43b6:	90 95       	com	r25
    43b8:	bc 01       	movw	r22, r24
    43ba:	cd 01       	movw	r24, r26
    43bc:	08 95       	ret

000043be <_exit>:
    43be:	f8 94       	cli

000043c0 <__stop_program>:
    43c0:	ff cf       	rjmp	.-2      	; 0x43c0 <__stop_program>
